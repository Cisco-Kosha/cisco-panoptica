{
  "openapi": "3.0.0",
  "info": {
    "title": "Panoptica Management API",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "paths": {
    "/account/usageStatus": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageStatus"
                }
              }
            },
            "description": "Success"
          },
          "403": {
            "description": "Session expired or doesnt exists. need to login"
          }
        },
        "tags": [
          "users"
        ],
        "summary": "an api to get the account usage status"
      }
    },
    "/accountVulnerabilitiesXlsx": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/imageNameFilter"
          },
          {
            "$ref": "#/components/parameters/imageTagFilter"
          },
          {
            "$ref": "#/components/parameters/imageHashFilter"
          },
          {
            "$ref": "#/components/parameters/vulnerabilityNameFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "image hash"
        ],
        "summary": "Returns a xlsx file of images alongside to their vulnerabilities."
      }
    },
    "/advisor/clusterEventRules": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ClusterEventRuleRecommendationPeriod"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "advisor"
        ],
        "summary": "Returns a list of suggested cluster event rules"
      }
    },
    "/advisor/connectionRules": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConnectionsRuleRecommendationPeriod"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "advisor"
        ],
        "summary": "Returns a list of suggested connection rules"
      }
    },
    "/advisor/environment": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EnvironmentRecommendationPeriod"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "advisor"
        ],
        "summary": "Returns a list of suggested kubernetes environments"
      }
    },
    "/advisor/environmentRules": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EnvironmentRulesRecommendationPeriod"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "advisor"
        ],
        "summary": "Returns a list of suggested environment rules"
      }
    },
    "/advisor/podSecurityPolicy": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PodSecurityPolicyRecommendationPeriod"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "advisor"
        ],
        "summary": "Returns a list of suggested kubernetes Pod Security Standards"
      }
    },
    "/advisor/queue/{advisorType}": {
      "parameters": [
        {
          "in": "path",
          "name": "advisorType",
          "required": true,
          "schema": {
            "enum": [
              "ENVIRONMENT",
              "POD_SECURITY_STANDARD",
              "CONNECTION_RULES",
              "DEPLOYMENT_RULES",
              "API_RULES"
            ],
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyAdvisorState"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "advisor"
        ],
        "summary": "Get status for policy advisor background job"
      }
    },
    "/advisor/run": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/policyAdvisorType"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "advisor"
        ],
        "summary": "Runs the policy advisor"
      }
    },
    "/agents": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/agentSortKey"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          },
          {
            "$ref": "#/components/parameters/hostNameFilter"
          },
          {
            "$ref": "#/components/parameters/agentStatusFilter"
          },
          {
            "$ref": "#/components/parameters/environmentNameFilter"
          },
          {
            "$ref": "#/components/parameters/riskFilter"
          },
          {
            "$ref": "#/components/parameters/downloadAsXlsx"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agents"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "agent management"
        ],
        "summary": "List all installed agents"
      }
    },
    "/agents/{agentId}/update": {
      "parameters": [
        {
          "$ref": "#/components/parameters/agentId"
        }
      ],
      "post": {
        "responses": {
          "204": {
            "description": "Status was successfully changed."
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            },
            "description": "Account is disabled."
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "agent management"
        ],
        "summary": "Update the agent with the given id to the latest agent version"
      }
    },
    "/agents/{agentId}/updateState": {
      "parameters": [
        {
          "$ref": "#/components/parameters/agentId"
        }
      ],
      "post": {
        "responses": {
          "204": {
            "description": "Status was successfully changed."
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            },
            "description": "Account is disabled."
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "agent management"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentStatusUpdate"
              }
            }
          },
          "required": true
        },
        "summary": "Update the status of an agent with the given id"
      }
    },
    "/api": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api"
        ],
        "summary": "Get Secure Application API as a Swagger file"
      }
    },
    "/apiSecurity/api": {
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "uuid",
                  "type": "string"
                }
              }
            },
            "description": "the new api id"
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden. Api Security is disabled for user"
          },
          "404": {
            "description": "Api with given catalogId does not exist"
          }
        },
        "tags": [
          "api security"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSecurityApi"
              }
            }
          },
          "required": true
        },
        "summary": "Register an API for scoring"
      }
    },
    "/apiSecurity/api/{catalogId}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Delete an API"
      }
    },
    "/apiSecurity/api/{catalogId}/hitCountGraph": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          },
          {
            "$ref": "#/components/parameters/ApiServiceSpecPath"
          },
          {
            "$ref": "#/components/parameters/ApiServiceSpecPathMethod"
          },
          {
            "$ref": "#/components/parameters/HitCountIntervalInHours"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiServiceSpecPathHitCountGraph"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "performance"
        ],
        "summary": "Get hit count for specific spec path"
      }
    },
    "/apiSecurity/externalCatalog": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/includeServiceWithNoSpec"
          },
          {
            "$ref": "#/components/parameters/apiPolicyProfiles"
          },
          {
            "$ref": "#/components/parameters/apiCatalogSortKey"
          },
          {
            "$ref": "#/components/parameters/apiCatalogNameFilter"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          },
          {
            "$ref": "#/components/parameters/noPagination"
          },
          {
            "$ref": "#/components/parameters/updatedAfter"
          },
          {
            "$ref": "#/components/parameters/drillDownScore"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiServiceListExternal"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Get a list of APIs and their compliance"
      }
    },
    "/apiSecurity/externalCatalog/count": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/includeServiceWithNoSpec"
          },
          {
            "$ref": "#/components/parameters/apiCatalogNameFilter"
          },
          {
            "$ref": "#/components/parameters/updatedAfter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            },
            "description": "Number of APIs in the inventory"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Get the number of existing 3rd party APIs in the inventory"
      }
    },
    "/apiSecurity/externalCatalog/{catalogId}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          },
          {
            "$ref": "#/components/parameters/apiPolicyProfiles"
          },
          {
            "$ref": "#/components/parameters/downloadAsJson"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiServiceDrillDownExternal"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Get information about a specific API"
      }
    },
    "/apiSecurity/internalCatalog": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/namespacesFilter"
          },
          {
            "$ref": "#/components/parameters/includeServiceWithNoSpec"
          },
          {
            "$ref": "#/components/parameters/apiPolicyProfiles"
          },
          {
            "$ref": "#/components/parameters/apiCatalogSortKey"
          },
          {
            "$ref": "#/components/parameters/apiCatalogNameFilter"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          },
          {
            "$ref": "#/components/parameters/noPagination"
          },
          {
            "$ref": "#/components/parameters/updatedAfter"
          },
          {
            "$ref": "#/components/parameters/drillDownScore"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiServiceListInternal"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Get a list of APIs and their compliance"
      }
    },
    "/apiSecurity/internalCatalog/count": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/namespacesFilter"
          },
          {
            "$ref": "#/components/parameters/includeServiceWithNoSpec"
          },
          {
            "$ref": "#/components/parameters/apiCatalogNameFilter"
          },
          {
            "$ref": "#/components/parameters/updatedAfter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            },
            "description": "Number of APIs in the inventory"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Get the number of existing 3rd party APIs in the inventory"
      }
    },
    "/apiSecurity/internalCatalog/{catalogId}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          },
          {
            "$ref": "#/components/parameters/apiPolicyProfiles"
          },
          {
            "$ref": "#/components/parameters/downloadAsJson"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiServiceDrillDownInternal"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Get information about a specific API"
      }
    },
    "/apiSecurity/internalCatalog/{catalogId}/bfla": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiServiceBflaInfo"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security",
          "bfla"
        ],
        "summary": "Get bfla info for given catalogId"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "uuid",
                  "type": "string"
                }
              }
            },
            "description": "Updated"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security",
          "bfla"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiServiceBflaInfo"
              }
            }
          },
          "required": true
        },
        "summary": "update BFLA info for this catalogId"
      }
    },
    "/apiSecurity/internalCatalog/{catalogId}/bfla/detection": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "uuid",
                  "type": "string"
                }
              }
            },
            "description": "Stopped"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security",
          "bfla"
        ],
        "summary": "stop bfla detection phase"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "uuid",
                  "type": "string"
                }
              }
            },
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security",
          "bfla"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BflaDurationConfiguration"
              }
            }
          },
          "required": true
        },
        "summary": "Start new bfla detection phase"
      }
    },
    "/apiSecurity/internalCatalog/{catalogId}/bfla/learning": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "uuid",
                  "type": "string"
                }
              }
            },
            "description": "Stopped"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security",
          "bfla"
        ],
        "summary": "stop bfla learning phase"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "uuid",
                  "type": "string"
                }
              }
            },
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security",
          "bfla"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BflaDurationConfiguration"
              }
            }
          },
          "required": true
        },
        "summary": "Start new bfla learning phase"
      }
    },
    "/apiSecurity/internalCatalog/{catalogId}/bfla/reset": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "uuid",
                  "type": "string"
                }
              }
            },
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security",
          "bfla"
        ],
        "summary": "Reset bfla model"
      }
    },
    "/apiSecurity/internalCatalog/{catalogId}/fuzzingStatus": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiServiceFuzzingProgress"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Get status of the last/running fuzzing test"
      }
    },
    "/apiSecurity/internalCatalog/{catalogId}/fuzzingTests": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApiServiceFuzzingTest"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Get list of fuzzing tests"
      }
    },
    "/apiSecurity/internalCatalog/{catalogId}/resetTraceAnalysis": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Reset trace analysis"
      }
    },
    "/apiSecurity/internalCatalog/{catalogId}/startFuzzing": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiServiceFuzzingTest"
                }
              }
            },
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiFuzzingTestConfiguration"
              }
            }
          },
          "required": true
        },
        "summary": "Start new fuzzing test"
      }
    },
    "/apiSecurity/internalCatalog/{catalogId}/startTraceAnalysis": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TraceAnalysisConfiguration"
              }
            }
          },
          "required": true
        },
        "summary": "Start trace analysis"
      }
    },
    "/apiSecurity/internalCatalog/{catalogId}/stopFuzzing": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Stop fuzzing test"
      }
    },
    "/apiSecurity/internalCatalog/{catalogId}/stopTraceAnalysis": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Stop trace analysis"
      }
    },
    "/apiSecurity/internalCatalog/{catalogId}/traceAnalysis": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TraceAnalysisDetails"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Get trace analysis details"
      }
    },
    "/apiSecurity/openApiSpecs/{catalogId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/catalogId"
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenApiSpecScoreStatus"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "delete open api spec include all of it findings and scores"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenApiSpec"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Get provided and reconstructed open api specs for specific API"
      },
      "put": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenApiSpec"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Json or Yaml representing openapi spec V2 or V3",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "summary": "Add or edit a spec about a specific API for the account"
      }
    },
    "/apiSecurity/openApiSpecs/{catalogId}/diffDetectionStatus": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiffDetectionStatus"
                }
              }
            },
            "description": "diff detection status. in case of in progress, will reveal the detection end time. will return null for external services"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Get provided and reconstructed open api specs for specific API"
      }
    },
    "/apiSecurity/openApiSpecs/{catalogId}/getOpenApiSpecScoreStatus": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenApiSpecScoreStatus"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Get open api spec score status"
      }
    },
    "/apiSecurity/openApiSpecs/{catalogId}/openApiSpecSwagger.json": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Get provided spec content as json"
      }
    },
    "/apiSecurity/openApiSpecs/{catalogId}/reconstructedSpec/abort": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "abort learning and reconstructing an API via API Clarity"
      }
    },
    "/apiSecurity/openApiSpecs/{catalogId}/reconstructedSpec/learn": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiReconstructionRequest"
              }
            }
          }
        },
        "summary": "Start learning and reconstructing an API via API Clarity"
      }
    },
    "/apiSecurity/openApiSpecs/{catalogId}/reconstructedSpec/review": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiReconstructedSpec"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Get the suggestions of a spec reconstruction (or previously cached info)"
      }
    },
    "/apiSecurity/openApiSpecs/{catalogId}/reconstructedSpec/review/approve": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiReconstructedSpec"
              }
            }
          },
          "required": true
        },
        "summary": "Approve reconstructed spec suggestions (only 1 approval per catalogId)"
      }
    },
    "/apiSecurity/openApiSpecs/{catalogId}/reconstructedSpec/status": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiReconstructionResponse"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Get the status of a spec reconstruction"
      }
    },
    "/apiSecurity/openApiSpecs/{catalogId}/reconstructedSpecJson": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          },
          {
            "$ref": "#/components/parameters/downloadAsJson"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Get reconstructed open api spec as json for specific API"
      }
    },
    "/apiSecurity/openApiSpecs/{catalogId}/startDiffsDetection": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionDuration"
              }
            }
          },
          "required": true
        },
        "summary": "Start spec diffs detection"
      }
    },
    "/apiSecurity/openApiSpecs/{catalogId}/stopDiffsDetection": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "stop spec diffs detection"
      }
    },
    "/apiSecurity/riskFindings": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/findingNameFilter"
          },
          {
            "$ref": "#/components/parameters/apiRisksFilter"
          },
          {
            "$ref": "#/components/parameters/findingCategoryFilter"
          },
          {
            "$ref": "#/components/parameters/findingSourceFilter"
          },
          {
            "$ref": "#/components/parameters/findingElementFilter"
          },
          {
            "$ref": "#/components/parameters/detectedFindingFilter"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          },
          {
            "$ref": "#/components/parameters/riskFindingSortKey"
          },
          {
            "$ref": "#/components/parameters/sortDirDesc"
          },
          {
            "$ref": "#/components/parameters/apiSecSourceFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskFindings"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Get a list of risk findings"
      }
    },
    "/apiSecurity/riskFindings/categories": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Get a list of risk findings categories"
      }
    },
    "/apiSecurity/riskFindings/sources": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Get a list of risk findings sources"
      }
    },
    "/apiSecurity/riskFindings/{riskFindingId}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/riskFindingId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskFinding"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Get a specific risk findings"
      }
    },
    "/apiSecurity/{catalogId}/deleteDependencies": {
      "parameters": [
        {
          "$ref": "#/components/parameters/catalogId"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiServiceDeleteDependencies"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "get dependencies which need to be handled in order to delete specified api security service"
      }
    },
    "/apiSecurity/{catalogId}/methods": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          },
          {
            "$ref": "#/components/parameters/apiServiceSpecTags"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApiServiceMethod"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Get a list of an API spec methods for a specific API and its spec's tags"
      }
    },
    "/apiSecurity/{catalogId}/tags": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiServiceTags"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security"
        ],
        "summary": "Get a list of an API spec tags or a specific API"
      }
    },
    "/apiSecurityPolicy": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApiSecurityPolicy"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "API security policies"
        ],
        "summary": "Get a list of API security policies"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSecurityPolicy"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "API security policies"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ApiSecurityPolicy"
        },
        "summary": "Add new API security policy"
      }
    },
    "/apiSecurityPolicy/{policyId}": {
      "parameters": [
        {
          "in": "path",
          "name": "policyId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "API security policies"
        ],
        "summary": "Delete api security policy"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSecurityPolicy"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "API security policies"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSecurityPolicy"
              }
            }
          },
          "required": true
        },
        "summary": "Edit Api security policy."
      }
    },
    "/apiSecurityPolicy/{policyId}/deleteDependencies": {
      "parameters": [
        {
          "in": "path",
          "name": "policyId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSecurityPolicyDeleteDependencies"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "API security policies"
        ],
        "summary": "get dependencies which need to be handled in order to delete specified api security service"
      }
    },
    "/appTelemetries": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/namespacesFilter"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          },
          {
            "$ref": "#/components/parameters/sortKey"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          },
          {
            "$ref": "#/components/parameters/startTime"
          },
          {
            "$ref": "#/components/parameters/endTime"
          },
          {
            "$ref": "#/components/parameters/appNameFilter"
          },
          {
            "$ref": "#/components/parameters/appTypeFilter"
          },
          {
            "$ref": "#/components/parameters/hostFilter"
          },
          {
            "$ref": "#/components/parameters/statusFilter"
          },
          {
            "$ref": "#/components/parameters/environmentNameFilter"
          },
          {
            "$ref": "#/components/parameters/highestVulnerabilityFilter"
          },
          {
            "$ref": "#/components/parameters/highestDockerfileScanResultFilter"
          },
          {
            "$ref": "#/components/parameters/workloadRiskFilter"
          },
          {
            "$ref": "#/components/parameters/showOnlyEntriesWithAppName"
          },
          {
            "$ref": "#/components/parameters/executableFilter"
          },
          {
            "$ref": "#/components/parameters/violationsFilter"
          },
          {
            "$ref": "#/components/parameters/hideInternals"
          },
          {
            "$ref": "#/components/parameters/downloadAsXlsx"
          },
          {
            "$ref": "#/components/parameters/showSystemPods"
          },
          {
            "$ref": "#/components/parameters/protectionStatusFilter"
          },
          {
            "$ref": "#/components/parameters/appResultFilter"
          },
          {
            "$ref": "#/components/parameters/isIdentifiedFilter"
          },
          {
            "$ref": "#/components/parameters/imagesIdFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AppTelemetry"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "telemetries"
        ],
        "summary": "Get App telemetries"
      }
    },
    "/appTelemetries/{appTelemetryId}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/appTelemetryId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppTelemetry"
                }
              }
            },
            "description": "Success"
          },
          "404": {
            "description": "App telemetry with given ID does not exist"
          }
        },
        "tags": [
          "telemetries"
        ],
        "summary": "Get App telemetry by ID"
      }
    },
    "/appTelemetries/{appTelemetryId}/apiRiskInfo": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/appTelemetryId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApiRiskInfo"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "telemetries"
        ],
        "summary": "Get API risks info of given app telemetry"
      }
    },
    "/appTelemetries/{appTelemetryId}/imagePackages": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/appTelemetryId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ImagesWithLicenses"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "404": {
            "description": "App telemetry with given ID does not exist"
          }
        },
        "tags": [
          "telemetries"
        ],
        "summary": "list packages with licenses runnin on a pod"
      }
    },
    "/appTelemetries/{appTelemetryId}/injectionInfo": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/appTelemetryId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TokenInjectionInfo"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "telemetries"
        ],
        "summary": "Get token injection info of given app telemetry"
      }
    },
    "/apps": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/appSortKey"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          },
          {
            "$ref": "#/components/parameters/appName"
          },
          {
            "$ref": "#/components/parameters/appTypes"
          },
          {
            "$ref": "#/components/parameters/downloadAsXlsx"
          },
          {
            "$ref": "#/components/parameters/noPagination"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/App"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "apps"
        ],
        "summary": "Returns a list of defined Apps"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            },
            "description": "A new app was added."
          },
          "400": {
            "description": "Required field was not provided."
          },
          "401": {
            "description": "Unauthorized."
          },
          "409": {
            "description": "An existing App already has this name, or, according to the details provided, this App cannot be uniquely identified.\n"
          }
        },
        "tags": [
          "apps"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/App"
        },
        "summary": "Define a New App"
      }
    },
    "/apps/delete": {
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "apps"
        ],
        "description": "Delete several apps.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentifierArray"
              }
            }
          },
          "description": "Array of apps ids",
          "required": true
        },
        "summary": "Delete several Apps"
      }
    },
    "/apps/{appId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "apps"
        ],
        "summary": "Returns an App by its ID"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            },
            "description": "App was edited."
          },
          "400": {
            "description": "Required field was not provided."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "apps"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/App"
              }
            }
          },
          "required": true
        },
        "summary": "Edit the existing App"
      }
    },
    "/appsPolicy": {
      "get": {
        "parameters": [
          {
            "description": "the filter to filter by. the string must be a json representation of PolicyFilter object",
            "in": "query",
            "name": "policyFilter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppPolicy"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "environment policies"
        ],
        "summary": "Get the current Apps policy"
      },
      "put": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppPolicy"
                }
              }
            },
            "description": "Added"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "environment policies"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppPolicy"
              }
            }
          },
          "required": true
        },
        "summary": "Set the current Apps policy"
      }
    },
    "/appsPolicy/history": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AppPolicyHistory"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "environment policies"
        ],
        "summary": "Get the history of Apps policies"
      }
    },
    "/appsPolicy/searchOptions": {
      "get": {
        "parameters": [
          {
            "description": "the pod/env name to filter by.",
            "in": "query",
            "name": "nameFilter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyFilterSearchResponse"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "environment policies"
        ],
        "summary": "Get the current Apps policy filter option"
      }
    },
    "/auditLogs": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/startTime"
          },
          {
            "$ref": "#/components/parameters/endTime"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          },
          {
            "$ref": "#/components/parameters/auditLogSortKey"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          },
          {
            "$ref": "#/components/parameters/userFilter"
          },
          {
            "$ref": "#/components/parameters/actionFilter"
          },
          {
            "$ref": "#/components/parameters/objectTypeFilter"
          },
          {
            "$ref": "#/components/parameters/downloadAsXlsx"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AuditLog"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "audit logs"
        ],
        "summary": "Get audit logs"
      }
    },
    "/auditLogs/actions": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "audit logs"
        ],
        "summary": "Get all the audit logs actions"
      }
    },
    "/auditLogs/kubernetes": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/startTime"
          },
          {
            "$ref": "#/components/parameters/endTime"
          },
          {
            "$ref": "#/components/parameters/resourceKindFilter"
          },
          {
            "$ref": "#/components/parameters/resourceNameFilter"
          },
          {
            "$ref": "#/components/parameters/kubernetesAuditActionFilter"
          },
          {
            "$ref": "#/components/parameters/userFilter"
          },
          {
            "$ref": "#/components/parameters/namespaceNameFilter"
          },
          {
            "$ref": "#/components/parameters/clusterNameFilter"
          },
          {
            "$ref": "#/components/parameters/kubernetesAuditLogSortKey"
          },
          {
            "$ref": "#/components/parameters/noPagination"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          },
          {
            "$ref": "#/components/parameters/resultFilter"
          },
          {
            "$ref": "#/components/parameters/downloadAsXlsx"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/KubernetesAuditLog"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "audit logs"
        ],
        "summary": "Get audit logs"
      }
    },
    "/auditLogs/kubernetes/actions": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "audit logs"
        ],
        "summary": "Get all the kubernetes audit logs actions"
      }
    },
    "/aws/accounts": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AWSAccount"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "aws"
        ],
        "description": "Returns a list of AWS accounts for this Secure Application account.\n",
        "summary": "Get a list of AWS accounts"
      }
    },
    "/aws/roles": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AWSRole"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "aws"
        ],
        "summary": "Lists AWS role ARNs for the account"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AWSRole"
                }
              }
            },
            "description": "Added"
          }
        },
        "tags": [
          "aws"
        ],
        "description": "Upload a role ARN, that Secure Application will use to connect to the AWS account.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AWSRolePost"
              }
            }
          },
          "required": true
        },
        "summary": "Add AWS role to the account"
      }
    },
    "/aws/roles/{roleId}": {
      "parameters": [
        {
          "in": "path",
          "name": "roleId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AWSRole"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "aws"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AWSRoleDetails"
              }
            }
          },
          "required": true
        },
        "summary": "Change AWS role name"
      }
    },
    "/aws/tags": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "aws"
        ],
        "summary": "Get a list of AWS tag keys"
      }
    },
    "/aws/{awsAccountId}/regions": {
      "parameters": [
        {
          "description": "AWS account Id",
          "in": "path",
          "name": "awsAccountId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "aws"
        ],
        "description": "Returns a list of regions for AWS account.\n",
        "summary": "Get a list of regions for the  AWS account"
      }
    },
    "/aws/{awsAccountId}/{regionId}/subnets": {
      "parameters": [
        {
          "description": "AWS account Id",
          "in": "path",
          "name": "awsAccountId",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "AWS region Id",
          "in": "path",
          "name": "regionId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PortshiftAwsSubnet"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "aws"
        ],
        "summary": "Get a list of AWS subnets for an AWS account and region"
      }
    },
    "/aws/{awsAccountId}/{regionId}/vpcs": {
      "parameters": [
        {
          "description": "AWS account Id",
          "in": "path",
          "name": "awsAccountId",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "AWS region Id",
          "in": "path",
          "name": "regionId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/vpcResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "aws"
        ],
        "description": "Returns a list of VPCs for an AWS account and region. These values are used to define a Secure Application environment.\n",
        "summary": "Get a list of VPCs for AWS accounts."
      }
    },
    "/cd": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/startTime"
          },
          {
            "$ref": "#/components/parameters/endTime"
          },
          {
            "$ref": "#/components/parameters/resourceNameFilter"
          },
          {
            "$ref": "#/components/parameters/CdSortKey"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CDPipelineResult"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "CD"
        ],
        "summary": "Get all the CD pipelines results"
      }
    },
    "/cd/connectionsRule": {
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CdConnectionRule"
                }
              }
            },
            "description": "created."
          }
        },
        "tags": [
          "CD"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CdConnectionRule"
        },
        "summary": "Adds cd connection rule."
      }
    },
    "/cd/serverlessRule": {
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CdServerlessRule"
                }
              }
            },
            "description": "created."
          }
        },
        "tags": [
          "CD"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CdServerlessRule"
        },
        "summary": "Adds cd serverless rule."
      }
    },
    "/cd/{resourceId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/ResourceSortKey"
        },
        {
          "$ref": "#/components/parameters/sortDir"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CdPipelineResourceResult"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "CD"
        ],
        "summary": "Get A single CD pipeline results"
      }
    },
    "/cd/{ruleId}/connectionsRule": {
      "parameters": [
        {
          "in": "path",
          "name": "ruleId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "deleted"
          }
        },
        "tags": [
          "CD"
        ],
        "summary": "delete a cd connection rule."
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CdConnectionRule"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "CD"
        ],
        "summary": "get a cd connection rule."
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CdConnectionRule"
                }
              }
            },
            "description": "updated"
          }
        },
        "tags": [
          "CD"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CdConnectionRule"
              }
            }
          },
          "required": true
        },
        "summary": "update a cd connection rule."
      }
    },
    "/cd/{ruleId}/serverlessRule": {
      "parameters": [
        {
          "in": "path",
          "name": "ruleId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "deleted"
          }
        },
        "tags": [
          "CD"
        ],
        "summary": "delete a cd serverless rule."
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CdServerlessRule"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "CD"
        ],
        "summary": "get a cd serverless rule."
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CdServerlessRule"
                }
              }
            },
            "description": "updated"
          }
        },
        "tags": [
          "CD"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CdServerlessRule"
              }
            }
          },
          "required": true
        },
        "summary": "update a cd serverless rule."
      }
    },
    "/cdPolicy": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CdPolicy"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "CI/CD policies"
        ],
        "summary": "Get the current CD policy"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CdPolicy"
                }
              }
            },
            "description": "Added"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "CI/CD policies"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CdPolicy"
        },
        "summary": "Set the current CD policy. At least one CdPolicyElement should be present"
      }
    },
    "/cdPolicy/{policyId}": {
      "parameters": [
        {
          "in": "path",
          "name": "policyId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "CI/CD policies"
        ],
        "summary": "Delete CD policy"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CdPolicy"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "CI/CD policies"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CdPolicy"
              }
            }
          },
          "required": true
        },
        "summary": "Edit CD policy. At least one CdPolicyElement should be present"
      }
    },
    "/changePassword": {
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordInfo"
              }
            }
          },
          "required": true
        },
        "summary": "Change the password for the current user"
      }
    },
    "/ciPolicy": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CiPolicy"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "CI/CD policies"
        ],
        "summary": "Get the current CI policy"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CiPolicy"
                }
              }
            },
            "description": "Added"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "CI/CD policies"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CiPolicy"
        },
        "summary": "Set the current CI policy"
      }
    },
    "/ciPolicy/{policyId}": {
      "parameters": [
        {
          "in": "path",
          "name": "policyId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "CI/CD policies"
        ],
        "summary": "Delete CI policy"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CiPolicy"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "CI/CD policies"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CiPolicy"
              }
            }
          },
          "required": true
        },
        "summary": "Edit CI policy"
      }
    },
    "/cloudAccounts": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          },
          {
            "$ref": "#/components/parameters/noPagination"
          },
          {
            "$ref": "#/components/parameters/cloudAccountSortKey"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          },
          {
            "$ref": "#/components/parameters/cloudAccountNameFilter"
          },
          {
            "$ref": "#/components/parameters/regionFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CloudAccount"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "serverless"
        ],
        "summary": "List all the cloud accounts on the system"
      }
    },
    "/cloudAccounts/azureInstallationDetails": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerlessAzureInstallationDetails"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "serverless"
        ],
        "summary": "Get the Azure installation details"
      }
    },
    "/cloudAccounts/installationDetails": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerlessInstallationDetails"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "serverless"
        ],
        "summary": "Get the installation details"
      }
    },
    "/cloudAccounts/regions/AWS": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AwsRegion"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "serverless"
        ],
        "summary": "List all the possible regions of AWS"
      }
    },
    "/cloudAccounts/regions/Azure": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "serverless"
        ],
        "summary": "List all the possible regions of Azure"
      }
    },
    "/cloudAccounts/scan": {
      "post": {
        "responses": {
          "204": {
            "description": "Scan with the returned scanId was added to execution queue."
          },
          "400": {
            "description": "invalid config"
          },
          "412": {
            "description": "Failed to scan given cloud accounts"
          }
        },
        "tags": [
          "serverless"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServerlessScanConfig"
              }
            }
          },
          "required": true
        },
        "summary": "invoke cloud account scan"
      }
    },
    "/cloudAccounts/{cloudAccountId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/cloudAccountId"
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "serverless"
        ],
        "summary": "Delete a cloud account"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudAccount"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "serverless"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudAccount"
              }
            }
          },
          "required": true
        },
        "summary": "Edit cloud account definition"
      }
    },
    "/cloudAccounts/{cloudAccountId}/deleteDependencies": {
      "parameters": [
        {
          "$ref": "#/components/parameters/cloudAccountId"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudAccountDeleteDependencies"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "serverless"
        ],
        "summary": "get dependencies which need to be handled in order to delete specified cloud account"
      }
    },
    "/cloudAccounts/{cloudAccountId}/download_bundle": {
      "parameters": [
        {
          "$ref": "#/components/parameters/cloudAccountId"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "serverless"
        ],
        "description": "In order to install, extract and run \"./install_bundle.sh\"",
        "summary": "Get Secure Application installation script"
      }
    },
    "/connectionTelemetries": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/sourceNamespacesFilter"
          },
          {
            "$ref": "#/components/parameters/targetNamespacesFilter"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          },
          {
            "$ref": "#/components/parameters/connectionSortKey"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          },
          {
            "$ref": "#/components/parameters/startTime"
          },
          {
            "$ref": "#/components/parameters/endTime"
          },
          {
            "$ref": "#/components/parameters/sourceAppNameFilter"
          },
          {
            "$ref": "#/components/parameters/sourceEnvironmentNameFilter"
          },
          {
            "$ref": "#/components/parameters/sourceExecutableFilter"
          },
          {
            "$ref": "#/components/parameters/sourceRiskFilter"
          },
          {
            "$ref": "#/components/parameters/sourceHostNameFilter"
          },
          {
            "$ref": "#/components/parameters/targetAppNameFilter"
          },
          {
            "$ref": "#/components/parameters/targetEnvironmentNameFilter"
          },
          {
            "$ref": "#/components/parameters/targetExecutableFilter"
          },
          {
            "$ref": "#/components/parameters/targetRiskFilter"
          },
          {
            "$ref": "#/components/parameters/violationsFilter"
          },
          {
            "$ref": "#/components/parameters/targetHostNameFilter"
          },
          {
            "$ref": "#/components/parameters/logicalOperatorFilter"
          },
          {
            "$ref": "#/components/parameters/downloadAsXlsx"
          },
          {
            "$ref": "#/components/parameters/connectionResultFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConnectionTelemetry"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "telemetries"
        ],
        "summary": "Get connection telemetries"
      }
    },
    "/connectionTelemetries/{connectionTelemetryId}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/connectionTelemetryId"
          },
          {
            "$ref": "#/components/parameters/startTime"
          },
          {
            "$ref": "#/components/parameters/endTime"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionTelemetry"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "telemetries"
        ],
        "summary": "get details for a single connection telemetry"
      }
    },
    "/connectionsPolicy": {
      "get": {
        "parameters": [
          {
            "description": "the filter to filter by.",
            "in": "query",
            "name": "policyFilter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionsPolicy"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "connection policies"
        ],
        "summary": "Get current connection policy"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionsPolicy"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "connection policies"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionsPolicy"
              }
            }
          },
          "required": true
        },
        "summary": "Set the current connection policy"
      }
    },
    "/connectionsPolicy/history": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConnectionPolicyHistory"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "connection policies"
        ],
        "summary": "Get the history of the connection policies"
      }
    },
    "/connectionsPolicy/kafka/actions": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "connection policies"
        ],
        "summary": "Get the a list of kafka actions"
      }
    },
    "/connectionsPolicy/kafka/{kubernetesClusterId}/brokers": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetesClusterId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "connection policies"
        ],
        "summary": "Get the a list of kafka brokers"
      }
    },
    "/connectionsPolicy/kafka/{kubernetesClusterId}/topics": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetesClusterId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "connection policies"
        ],
        "summary": "Get the a list of kafka topics"
      }
    },
    "/connectionsPolicy/searchOptions": {
      "get": {
        "parameters": [
          {
            "description": "the pod/env name to filter by.",
            "in": "query",
            "name": "nameFilter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyFilterSearchResponse"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "connection policies"
        ],
        "summary": "Get the current connection policy filter option"
      }
    },
    "/dashboard/apisec/riskFindings": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/apiSecSourceFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSecRiskFindingsWidget"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "dashboard",
          "api security"
        ],
        "summary": "Get API sec risk findings widget"
      }
    },
    "/dashboard/apisec/riskFindingsTrend": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/apiSecSourceFilter"
          },
          {
            "$ref": "#/components/parameters/apiSecDashboardNumOfDays"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSecRiskFindingsTrendWidget"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "dashboard",
          "api security"
        ],
        "summary": "Get API sec risk findings trend graph widget for the last 30 days"
      }
    },
    "/dashboard/apisec/specsAndOperationsDiffs": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/apiSecSourceFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpecsAndOperationsDiffsWidget"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "dashboard",
          "api security"
        ],
        "summary": "Get API sec specs and operations diffs widget"
      }
    },
    "/dashboard/apisec/topRiskyApis": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/apiSecSourceFilter"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSecTopRiskyApisWidget"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "dashboard",
          "api security"
        ],
        "summary": "Get API sec top risky APIs widget"
      }
    },
    "/dashboard/apisec/topRiskyFindings": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/apiSecSourceFilter"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSecTopRiskyFindingsWidget"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "dashboard",
          "api security"
        ],
        "summary": "Get API sec top risky findings widget"
      }
    },
    "/dashboard/clusters": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClustersDetails"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "dashboard"
        ],
        "summary": "Get the active clusters"
      }
    },
    "/dashboard/connectionTelemetries": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionTelemetriesWidget"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "dashboard"
        ],
        "summary": "Get pod connection dashboard data for all clusters"
      }
    },
    "/dashboard/kubernetesAuditLogs": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/kubernetesAuditLogsWidget"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "dashboard"
        ],
        "summary": "Get kubernetes audit logs dashboard data for all clusters"
      }
    },
    "/dashboard/operationalBar": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/clustersIdsFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationalBar"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "dashboard"
        ],
        "summary": "Get the operation data dashboard for the given kubernetesClusterId"
      }
    },
    "/dashboard/permissions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/clustersIdsFilter"
          },
          {
            "$ref": "#/components/parameters/includeSystemOwners"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionsWidget"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "dashboard"
        ],
        "summary": "Get permissions dashboard data for the given kubernetesClusterIds"
      }
    },
    "/dashboard/podTelemetries": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodTelemetriesWidget"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "dashboard"
        ],
        "summary": "Get pod telemetries dashboard data for all clusters"
      }
    },
    "/dashboard/report/download": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "The Secure Application security report"
          }
        },
        "tags": [
          "dashboard"
        ],
        "summary": "Download Secure Application security report"
      }
    },
    "/dashboard/report/generate": {
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "dashboard"
        ],
        "summary": "Generate Secure Application security report"
      }
    },
    "/dashboard/report/status": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportStatus"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "dashboard"
        ],
        "summary": "Get Secure Application report security status"
      }
    },
    "/dashboard/securityContext": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/clustersIdsFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityContextWidget"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "dashboard"
        ],
        "summary": "Get security context dashboard data for all clusters"
      }
    },
    "/dashboard/topSecurityRisks": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/clustersIdsFilter"
          },
          {
            "$ref": "#/components/parameters/topRiskyWorkloadsSize"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopSecurityRisksWidget"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "dashboard"
        ],
        "summary": "Get the top risky deployments dashboard data for the given kubernetesClusterIds"
      }
    },
    "/dashboard/vulnerabilities": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/clustersIdsFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VulnerabilitiesWidget"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "dashboard"
        ],
        "summary": "Get the data which populates the vulnerabilities dashboard screen."
      }
    },
    "/dashboard/{kubernetesClusterId}/connectionTelemetries": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetesClusterId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionTelemetriesWidget"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "dashboard"
        ],
        "summary": "Get connection telemetries dashboard data for the given kubernetesClusterId"
      }
    },
    "/dashboard/{kubernetesClusterId}/kubernetesAuditLogs": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetesClusterId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/kubernetesAuditLogsWidget"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "dashboard"
        ],
        "summary": "Get kubernetes audit logs dashboard data for the given kubernetesClusterId"
      }
    },
    "/dashboard/{kubernetesClusterId}/podTelemetries": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetesClusterId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodTelemetriesWidget"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "dashboard"
        ],
        "summary": "Get pod telemetries dashboard data for the given kubernetesClusterId"
      }
    },
    "/deployers": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          },
          {
            "$ref": "#/components/parameters/deployerSortKey"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          },
          {
            "$ref": "#/components/parameters/deployerNameFilter"
          },
          {
            "$ref": "#/components/parameters/deployerRuleCreationFilter"
          },
          {
            "$ref": "#/components/parameters/deployerSecurityCheckFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Deployer"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "deployers"
        ],
        "summary": "List all the deployers on the system"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deployer"
                }
              }
            },
            "description": "A new deployer was added."
          },
          "409": {
            "description": "An existing deployer already has this name\n"
          }
        },
        "tags": [
          "deployers"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Deployer"
        },
        "summary": "Create a new deployer"
      }
    },
    "/deployers/serviceAccounts": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "kubernetesClusterId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/namespaceNameFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ServiceAccountInfo"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "deployers"
        ],
        "summary": "List all the service account on the system"
      }
    },
    "/deployers/{deployerId}": {
      "parameters": [
        {
          "in": "path",
          "name": "deployerId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "deployers"
        ],
        "summary": "Delete an deployer"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deployer"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "deployers"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Deployer"
              }
            }
          },
          "required": true
        },
        "summary": "Edit deployer definition"
      }
    },
    "/deployers/{deployerId}/deleteDependencies": {
      "parameters": [
        {
          "in": "path",
          "name": "deployerId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeployerDeleteDependencies"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "deployers"
        ],
        "summary": "get dependencies which need to be handled in order to delete specified deployer"
      }
    },
    "/environments": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/envSortKey"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          },
          {
            "$ref": "#/components/parameters/envName"
          },
          {
            "$ref": "#/components/parameters/includeSystemEnvs"
          },
          {
            "$ref": "#/components/parameters/downloadAsXlsx"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Environment"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "envs"
        ],
        "summary": "List all defined Secure Application environments"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            },
            "description": "Added"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "envs"
        ],
        "description": "Add a  Secure Application environment. An instance should be contained in a single environment. The environment is defined by a VPC and an optional tag. If a tag is supplied, only instances in the specified VPC with the given tag will belong to the new environment.\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Environment"
        },
        "summary": "Add a new environment"
      }
    },
    "/environments/batch": {
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Environment"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Added"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "envs"
        ],
        "description": "Add a number of new Secure Application environments. This is similar to the 'Add environment' method, but for multiple environments.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Environment"
                },
                "type": "array"
              }
            }
          },
          "description": "Environment definition",
          "required": true
        },
        "summary": "Add a number of  Secure Application environments"
      }
    },
    "/environments/delete": {
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "envs"
        ],
        "description": "Delete multiple Secure Application environments.\n",
        "summary": "Delete multiple Secure Application environments"
      }
    },
    "/environments/{envId}": {
      "parameters": [
        {
          "in": "path",
          "name": "envId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "envs"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Environment"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "envs"
        ],
        "summary": "get a Secure Application environment"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "envs"
        ],
        "description": "Edit an existing Secure Application environment.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Environment"
              }
            }
          },
          "description": "Environment definition",
          "required": true
        },
        "summary": "Edit an existing Secure Application environment"
      }
    },
    "/environments/{envId}/deleteDependencies": {
      "parameters": [
        {
          "in": "path",
          "name": "envId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteDependencyElementEnvironments"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "envs"
        ],
        "summary": "get dependencies which need to be handled in order to delete specified environment"
      }
    },
    "/expansions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          },
          {
            "$ref": "#/components/parameters/expansionSortKey"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          },
          {
            "$ref": "#/components/parameters/downloadAsXlsx"
          },
          {
            "$ref": "#/components/parameters/noPagination"
          },
          {
            "$ref": "#/components/parameters/expansionNameFilter"
          },
          {
            "$ref": "#/components/parameters/expansionClusterNameFilter"
          },
          {
            "$ref": "#/components/parameters/expansionNamespaceFilter"
          },
          {
            "$ref": "#/components/parameters/controllerVersionFilter"
          },
          {
            "$ref": "#/components/parameters/controllerStatusFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Expansion"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "expansions"
        ],
        "summary": "List all the expansions on the system"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Expansion"
                }
              }
            },
            "description": "A new expansion was added."
          },
          "409": {
            "description": "An existing expansion already has this name\n"
          }
        },
        "tags": [
          "expansions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Expansion"
              }
            }
          },
          "required": true
        },
        "summary": "Create a new expansion"
      }
    },
    "/expansions/{expansionId}": {
      "parameters": [
        {
          "in": "path",
          "name": "expansionId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "expansions"
        ],
        "summary": "Delete an expansion"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Expansion"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "expansions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpansionPut"
              }
            }
          },
          "required": true
        },
        "summary": "Edit expansion definition"
      }
    },
    "/expansions/{expansionId}/install_expansion.tar.gz": {
      "parameters": [
        {
          "in": "path",
          "name": "expansionId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "expansions"
        ],
        "summary": "Get the expansion installation"
      }
    },
    "/gateways": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          },
          {
            "$ref": "#/components/parameters/noPagination"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Gateway"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security",
          "gateways"
        ],
        "summary": "Get gateways"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Gateway"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security",
          "gateways"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Gateway"
        },
        "summary": "Add new gateway"
      }
    },
    "/gateways/clusters": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/gatewayType"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GatewayClusterInfo"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security",
          "gateways"
        ],
        "summary": "Get clusters info"
      }
    },
    "/gateways/{gatewayId}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/gatewayId"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "api security",
          "gateways"
        ],
        "summary": "Delete gateway"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/gatewayId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Gateway"
                }
              }
            },
            "description": "Token was gateway."
          },
          "400": {
            "description": "Required field was not provided."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "api security",
          "gateways"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Gateway"
              }
            }
          },
          "required": true
        },
        "summary": "Edit gateway"
      }
    },
    "/gateways/{gatewayId}/download_bundle": {
      "parameters": [
        {
          "$ref": "#/components/parameters/gatewayId"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "api security",
          "gateways"
        ],
        "description": "In order to install,  extract and run \"./install_bundle.sh\"",
        "summary": "Get a GW installation script"
      }
    },
    "/getControllerData/{clusterId}": {
      "get": {
        "parameters": [
          {
            "description": "Portshift cluster ID",
            "in": "path",
            "name": "clusterId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControllerDataResponse"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "security": [
          {
            "dummyForAgentGeneration": []
          }
        ],
        "tags": [
          "kubernetes"
        ],
        "summary": "get controller data using clusterId"
      }
    },
    "/images": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/imageSortKey"
          },
          {
            "$ref": "#/components/parameters/sortDirDesc"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          },
          {
            "$ref": "#/components/parameters/imageNameFilter"
          },
          {
            "$ref": "#/components/parameters/imageTagFilter"
          },
          {
            "$ref": "#/components/parameters/imageHashFilter"
          },
          {
            "$ref": "#/components/parameters/vulnerabilityNameFilter"
          },
          {
            "$ref": "#/components/parameters/downloadAsXlsx"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ImageDefGet"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "image hash"
        ],
        "summary": "Returns a list of images"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageDefGet"
                }
              }
            },
            "description": "A new image was added."
          },
          "400": {
            "description": "Required field was not provided."
          },
          "401": {
            "description": "Unauthorized."
          },
          "409": {
            "description": "An existing app already has this name, or, according to the details provided, this app cannot be uniquely identified.\n"
          }
        },
        "tags": [
          "image hash"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageDef"
              }
            }
          },
          "required": true
        },
        "summary": "Define a New image hash"
      }
    },
    "/images/approve": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/isImageApproved"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Failure"
          }
        },
        "tags": [
          "image hash"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UuidList"
        },
        "summary": "Approve an image hash"
      }
    },
    "/images/imagesHash": {
      "get": {
        "parameters": [
          {
            "description": "image hash to search for ( as prefix and suffix )",
            "in": "query",
            "name": "imageHash",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/maxResults"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "images hash"
        ],
        "summary": "search for image hash in the account"
      }
    },
    "/images/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Failure"
          }
        },
        "tags": [
          "image hash"
        ],
        "summary": "Delete an image hash"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageDefGet"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "image hash"
        ],
        "summary": "get an image"
      }
    },
    "/images/{imageId}/dockerfileScanResults": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "imageId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          },
          {
            "$ref": "#/components/parameters/isIgnored"
          },
          {
            "$ref": "#/components/parameters/sortDirDesc"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DockerfileScanResult"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "images hash"
        ],
        "summary": "Returns a list of vulnerabilities detected in the  image"
      }
    },
    "/images/{imageId}/dockerfileScanResults/ignore": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "imageId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ignoreAction"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "images hash"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UuidList"
              }
            }
          },
          "required": true
        },
        "summary": "Add / remove a list of  UUIDs of dockerfileScanResults from ignored list"
      }
    },
    "/images/{imageId}/imageLayers": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "imageId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/sortDir"
          },
          {
            "$ref": "#/components/parameters/isIgnored"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageLayers"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "images hash"
        ],
        "summary": "Returns a list of image layers"
      }
    },
    "/images/{imageId}/packages": {
      "get": {
        "parameters": [
          {
            "description": "the image record identifier",
            "in": "path",
            "name": "imageId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/imagePackageDetails"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "image hash"
        ],
        "summary": "Returns a list of packages for a specific image"
      }
    },
    "/images/{imageId}/vulnerabilities": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "imageId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          },
          {
            "$ref": "#/components/parameters/isIgnored"
          },
          {
            "$ref": "#/components/parameters/showOnlyVulnerabilitiesWithFix"
          },
          {
            "$ref": "#/components/parameters/sortDirDesc"
          },
          {
            "$ref": "#/components/parameters/layerId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Vulnerability"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "images hash"
        ],
        "summary": "Returns a list of vulnerabilities detected in the image"
      }
    },
    "/images/{imageId}/vulnerabilities/ignore": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "imageId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ignoreAction"
          },
          {
            "$ref": "#/components/parameters/snoozeTime"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "images hash"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UuidList"
              }
            }
          },
          "required": true
        },
        "summary": "Add / remove a list of  UUIDs of vulnerabilities from ignored list"
      }
    },
    "/istio/supportedVersions": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "kubernetes"
        ],
        "summary": "Get a list of istio releases that are supported by Secure Application agent. sorted from latest to oldest"
      }
    },
    "/k8sCISBenchmark": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/K8sCISBenchmarkClustersSummary"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "k8s cis benchmark"
        ],
        "summary": "Get k8s cis benchmark for clusters"
      }
    },
    "/k8sCISBenchmark/summary": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/K8sCISBenchmarkAccountSummary"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "k8s cis benchmark"
        ],
        "summary": "Get k8s cis benchmark summary of account"
      }
    },
    "/k8sCISBenchmark/{clusterId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/clusterIdPathParameter"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/K8sCISBenchmarkClusterSummary",
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "k8s cis benchmark"
        ],
        "summary": "Get k8s cis benchmark for a specific cluster"
      },
      "post": {
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "k8s cis benchmark"
        ],
        "summary": "initiate k8s cis benchmark scan for a specific cluster"
      },
      "put": {
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "k8s cis benchmark"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/K8sCISBenchmarkUpdateNodes"
              }
            }
          },
          "required": true
        },
        "summary": "edit k8s cis benchmark for a specific cluster with test statuses"
      }
    },
    "/kubernetesApiPolicy": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KubernetesApiPolicy"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "cluster events policies"
        ],
        "summary": "Get current Kubernetes API policy"
      },
      "put": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KubernetesApiPolicy"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "cluster events policies"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KubernetesApiPolicy"
              }
            }
          },
          "required": true
        },
        "summary": "set the current Kubernetes API policy"
      }
    },
    "/kubernetesApiPolicy/history": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/KubernetesApiPolicyHistory"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "cluster events policies"
        ],
        "summary": "Get the history of the Kubernetes API policies"
      }
    },
    "/kubernetesApiPolicy/kubernetesResources": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/KubernetesResource"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "cluster events policies"
        ],
        "summary": "Get the Kubernetes resource list"
      }
    },
    "/kubernetesApiPolicy/kubernetesUsers": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/KubernetesUsersByType"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "cluster events policies"
        ],
        "summary": "Get the Kubernetes user list"
      }
    },
    "/kubernetesApiPolicy/recommendedRules": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RecommendedKubernetesApiRule"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "cluster events policies"
        ],
        "summary": "Get the recommended Kubernetes API rules"
      }
    },
    "/kubernetesClusters": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/onlySpecReconstructionEnabledFilter"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          },
          {
            "$ref": "#/components/parameters/clusterSortKey"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          },
          {
            "$ref": "#/components/parameters/clusterNameFilter"
          },
          {
            "$ref": "#/components/parameters/kubernetesVersionFilter"
          },
          {
            "$ref": "#/components/parameters/controllerVersionFilter"
          },
          {
            "$ref": "#/components/parameters/controllerStatusFilter"
          },
          {
            "$ref": "#/components/parameters/downloadAsXlsx"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/KubernetesClusterController"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "summary": "get a list of current Kubernetes clusters"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KubernetesCluster"
                }
              }
            },
            "description": "Agent was added."
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/KubernetesCluster"
        },
        "summary": "Add a new Kubernetes cluster to Secure Application"
      }
    },
    "/kubernetesClusters/{kubernetesClusterId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/kubernetesClusterId"
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "summary": "Delete a Kubernetes cluster"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KubernetesCluster"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "summary": "get the Kubernetes cluster with the given id"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KubernetesCluster"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KubernetesCluster"
              }
            }
          },
          "required": true
        },
        "summary": "Update the Kubernetes cluster"
      }
    },
    "/kubernetesClusters/{kubernetesClusterId}/deleteDependencies": {
      "parameters": [
        {
          "$ref": "#/components/parameters/kubernetesClusterId"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KubernetesClusterDeleteDependencies"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "summary": "get dependencies which need to be handled in order to delete specified Kubernetes cluster"
      }
    },
    "/kubernetesClusters/{kubernetesClusterId}/download_bundle": {
      "parameters": [
        {
          "$ref": "#/components/parameters/kubernetesClusterId"
        }
      ],
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/sendTelemetriesIntervalSec"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "description": "In order to install,  extract and run \"./install_bundle.sh\"",
        "summary": "Get Secure Application installation script"
      }
    },
    "/kubernetesClusters/{kubernetesClusterId}/namespaces": {
      "parameters": [
        {
          "$ref": "#/components/parameters/kubernetesClusterId"
        },
        {
          "$ref": "#/components/parameters/ListNamespaceSortKey"
        },
        {
          "$ref": "#/components/parameters/sortDir"
        },
        {
          "$ref": "#/components/parameters/includeScannable"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/KubernetesNamespaceResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "success"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "summary": "List namespaces on a specific Kubernetes cluster"
      }
    },
    "/kubernetesClusters/{kubernetesClusterId}/securecn_bundle.yml": {
      "parameters": [
        {
          "$ref": "#/components/parameters/kubernetesClusterId"
        }
      ],
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/sendTelemetriesIntervalSec"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "description": "In order to install,  run \"kubectl apply -f securecn_bundle.yml\"",
        "summary": "Get the Secure Application bundle to install"
      }
    },
    "/kubernetesClusters/{kubernetesClusterId}/services": {
      "parameters": [
        {
          "$ref": "#/components/parameters/kubernetesClusterId"
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "if true, return only services deployed on namespace with label istio-injection=enabled",
            "in": "query",
            "name": "showIstioOnly",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/KubernetesService"
                  },
                  "type": "array"
                }
              }
            },
            "description": "success"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "summary": "List services on a specific Kubernetes cluster"
      }
    },
    "/kubernetesClusters/{kubernetesClusterId}/uninstall_securecn.tar.gz": {
      "parameters": [
        {
          "$ref": "#/components/parameters/kubernetesClusterId"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "description": "In order to uninstall, run \"./uninstall_securecn.sh\"",
        "summary": "Get the Secure Application bundle to uninstall"
      }
    },
    "/leanKubernetesClusters": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/clusterNameFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LeanKubernetesCluster"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "summary": "get a list of current Kubernetes clusters"
      }
    },
    "/licensingDashboard": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicensingDashboard"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "dashboard"
        ],
        "summary": "Get licensing dashboard data"
      }
    },
    "/login": {
      "post": {
        "parameters": [
          {
            "description": "cognito id token",
            "in": "header",
            "name": "token",
            "schema": {
              "format": "jwt",
              "type": "string"
            }
          },
          {
            "description": "google id token",
            "in": "header",
            "name": "googleIdToken",
            "schema": {
              "format": "jwt",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLoginInfo"
                }
              }
            },
            "description": "Success"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeRequest"
                }
              }
            },
            "description": "Accepted. Challenge required"
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            },
            "description": "Account is disabled."
          }
        },
        "tags": [
          "users"
        ],
        "summary": "Login"
      }
    },
    "/logout": {
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "users"
        ],
        "summary": "Log out"
      }
    },
    "/me": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLoginInfo"
                }
              }
            },
            "description": "Success"
          },
          "403": {
            "description": "Session expired or doesnt exists. need to login"
          }
        },
        "tags": [
          "users"
        ],
        "summary": "an api to get current logged in user info"
      }
    },
    "/mitre/dashboard": {
      "parameters": [
        {
          "$ref": "#/components/parameters/clustersIdsFilter"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MitreDashboard"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "mitre"
        ],
        "summary": "Get data for MITRE dashboard for all clusters"
      }
    },
    "/mitre/report/download": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "The Mitre report"
          }
        },
        "tags": [
          "mitre"
        ],
        "summary": "Download Mitre security report"
      }
    },
    "/mitre/report/generate": {
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "mitre"
        ],
        "summary": "Generate Mitre report"
      }
    },
    "/mitre/report/status": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportStatus"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "mitre"
        ],
        "summary": "Get Mitre report status"
      }
    },
    "/mitre/technique": {
      "parameters": [
        {
          "$ref": "#/components/parameters/mitreTechniqueType"
        },
        {
          "$ref": "#/components/parameters/clustersIdsFilter"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MitreTechniqueInfo"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "mitre"
        ],
        "summary": "Get data for MITRE technique of the given mitreTechniqueType"
      }
    },
    "/mitre/technique/fix": {
      "parameters": [
        {
          "$ref": "#/components/parameters/mitreTechniqueType"
        },
        {
          "$ref": "#/components/parameters/clustersIdsFilter"
        }
      ],
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "mitre"
        ],
        "summary": "Post fix for MITRE technique of the given mitreTechniqueType"
      }
    },
    "/namespaces": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/namespaceNameFilter"
          },
          {
            "$ref": "#/components/parameters/clusterNameFilter"
          },
          {
            "$ref": "#/components/parameters/protectionStatusFilter"
          },
          {
            "$ref": "#/components/parameters/namespacesSortKey"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          },
          {
            "$ref": "#/components/parameters/downloadAsXlsx"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Namespace"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "summary": "Get a list of current Kubernetes namespaces"
      }
    },
    "/networkMap": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/startTime"
          },
          {
            "$ref": "#/components/parameters/endTime"
          },
          {
            "$ref": "#/components/parameters/showOnlyAppsWithViolations"
          },
          {
            "$ref": "#/components/parameters/showOnlyConnectionsBetweenEnvironments"
          },
          {
            "$ref": "#/components/parameters/showOnlyConnectionsWithViolations"
          },
          {
            "$ref": "#/components/parameters/showOnlyAppsWithConnections"
          },
          {
            "$ref": "#/components/parameters/groupAppsOnTheSameEnvironment"
          },
          {
            "$ref": "#/components/parameters/ignoreExternalConnection"
          },
          {
            "$ref": "#/components/parameters/apiRisk"
          },
          {
            "$ref": "#/components/parameters/apps"
          },
          {
            "$ref": "#/components/parameters/excludeApps"
          },
          {
            "$ref": "#/components/parameters/environments"
          },
          {
            "$ref": "#/components/parameters/namespaceIds"
          },
          {
            "$ref": "#/components/parameters/labels"
          },
          {
            "$ref": "#/components/parameters/isBackgroundJob"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkMap"
                }
              }
            },
            "description": "Success"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackgroundJobResponse"
                }
              }
            },
            "description": "Accepted"
          }
        },
        "tags": [
          "runtime map"
        ],
        "summary": "Get data for network map"
      }
    },
    "/networkMap/queue/{requestId}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "requestId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Failure"
          }
        },
        "tags": [
          "runtime map"
        ],
        "summary": "Cancel the network map background job"
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "requestId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackgroundJobResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "runtime map"
        ],
        "summary": "Get status for network map background job"
      }
    },
    "/networkMap/results/{requestId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "requestId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/NetworkMap"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "runtime map"
        ],
        "summary": "Get result for network map background job"
      }
    },
    "/operatorCredentials": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "users"
        ],
        "summary": "get the credentials of the Secure Application Operator service user"
      }
    },
    "/performanceMetrics": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/startTime"
          },
          {
            "$ref": "#/components/parameters/endTime"
          },
          {
            "$ref": "#/components/parameters/protocol"
          },
          {
            "$ref": "#/components/parameters/sourceNamespaceId"
          },
          {
            "$ref": "#/components/parameters/targetNamespaceId"
          },
          {
            "$ref": "#/components/parameters/sourcePodTemplateId"
          },
          {
            "$ref": "#/components/parameters/targetPodTemplateId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceMetrics"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "performance"
        ],
        "summary": "Get performance metrics for a connection between workloads"
      }
    },
    "/podDefinitions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/podDefinitionNameFilter"
          },
          {
            "$ref": "#/components/parameters/podDefinitionClusterNameFilter"
          },
          {
            "$ref": "#/components/parameters/podDefinitionTemplateSourceFilter"
          },
          {
            "$ref": "#/components/parameters/podDefinitionDeploymentTypeFilter"
          },
          {
            "$ref": "#/components/parameters/downloadAsXlsx"
          },
          {
            "$ref": "#/components/parameters/noPagination"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PodDefinition"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "summary": "Get all pod definitions on the system"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodDefinition"
                }
              }
            },
            "description": "A new pod definition was added."
          },
          "409": {
            "description": "An existing Pod definition already has this name\n"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PodDefinition"
        },
        "summary": "Create a new pod definition"
      }
    },
    "/podDefinitions/{podId}": {
      "parameters": [
        {
          "in": "path",
          "name": "podId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "summary": "Delete a pod definition"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodDefinition"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PodDefinition"
              }
            }
          },
          "required": true
        },
        "summary": "Change pod definition"
      }
    },
    "/podSecurityPolicyProfiles": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PodSecurityPolicy"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "psp profiles"
        ],
        "summary": "Get all the pod security standards profiles on the system"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodSecurityPolicy"
                }
              }
            },
            "description": "A new pod security policy standards was added"
          },
          "409": {
            "description": "An existing pod security standards profile already has this name\n"
          }
        },
        "tags": [
          "psp profiles"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PodSecurityPolicy"
        },
        "summary": "Create a new pod security standards"
      }
    },
    "/podSecurityPolicyProfiles/batch": {
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PodSecurityPolicy"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Added"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "psp profiles"
        ],
        "description": "Add a number of new Pod Security Standards Profiles.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/PodSecurityPolicy"
                },
                "type": "array"
              }
            }
          },
          "description": "psp definition",
          "required": true
        },
        "summary": "Add a number of Pod Security Standards"
      }
    },
    "/podSecurityPolicyProfiles/{profileId}": {
      "parameters": [
        {
          "in": "path",
          "name": "profileId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "psp profiles"
        ],
        "summary": "Delete a pod security policy standards"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodSecurityPolicy"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "psp profiles"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PodSecurityPolicy"
              }
            }
          },
          "required": true
        },
        "summary": "Change pod security standards profile"
      }
    },
    "/registries": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/RegistrySortKey"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Registry"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "registries"
        ],
        "summary": "Get a list of defined registries"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            },
            "description": "Added"
          }
        },
        "tags": [
          "registries"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Registry"
        },
        "summary": "Add new registry"
      }
    },
    "/registries/testConnection": {
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "412": {
            "description": "Failed to connect to Registry"
          },
          "501": {
            "description": "Not yet implemented"
          }
        },
        "tags": [
          "registries"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Registry"
        },
        "summary": "test registry connection"
      }
    },
    "/registries/testConnection/{registryId}": {
      "parameters": [
        {
          "in": "path",
          "name": "registryId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "412": {
            "description": "Failed to connect to Registry"
          },
          "501": {
            "description": "Not yet implemented"
          }
        },
        "tags": [
          "registries"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Registry"
              }
            }
          },
          "required": true
        },
        "summary": "test registry connection"
      }
    },
    "/registries/{registryId}": {
      "parameters": [
        {
          "in": "path",
          "name": "registryId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "registries"
        ],
        "summary": "Delete a registry"
      },
      "put": {
        "responses": {
          "200": {
            "description": "Added"
          }
        },
        "tags": [
          "registries"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Registry"
              }
            }
          },
          "required": true
        },
        "summary": "edit existing registry"
      }
    },
    "/riskAssessment": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RiskAssessmentCluster"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "risk assessment"
        ],
        "summary": "Get risk assessment data for all clusters"
      }
    },
    "/riskAssessment/ignoredRisks": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/IgnoredRisk"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "risk assessment"
        ],
        "summary": "Get all the ignored risks"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IgnoredRisk"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "risk assessment"
        ],
        "summary": "Add ignore risk"
      }
    },
    "/riskAssessment/ignoredRisks/{ignoredRiskId}": {
      "parameters": [
        {
          "in": "path",
          "name": "ignoredRiskId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "risk assessment"
        ],
        "summary": "Delete ignored risk"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IgnoredRisk"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "risk assessment"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CiPolicy"
              }
            }
          },
          "required": true
        },
        "summary": "Edit ignore risk"
      }
    },
    "/riskAssessment/permissions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/clustersIdsFilter"
          },
          {
            "$ref": "#/components/parameters/permissionRiskFilter"
          },
          {
            "$ref": "#/components/parameters/clustersPermissionSortKey"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          },
          {
            "$ref": "#/components/parameters/includeSystemOwners"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ClusterPermission"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "risk assessment"
        ],
        "summary": "Get list of clusters and their permissions"
      }
    },
    "/riskAssessment/permissions/{clusterId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/clusterIdPathParameter"
        }
      ],
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ownerNameFilter"
          },
          {
            "$ref": "#/components/parameters/ownerTypeFilter"
          },
          {
            "$ref": "#/components/parameters/namespaceNameFilter"
          },
          {
            "$ref": "#/components/parameters/permissionOwnerSortKey"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          },
          {
            "$ref": "#/components/parameters/noPagination"
          },
          {
            "$ref": "#/components/parameters/permissionRiskFilter"
          },
          {
            "$ref": "#/components/parameters/includeSystemOwners"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnerResponse"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "risk assessment"
        ],
        "summary": "Get all of the users permissions"
      }
    },
    "/riskAssessment/permissions/{clusterId}/{ownerId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/clusterIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/ownerIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/isApproved"
        },
        {
          "$ref": "#/components/parameters/permissionSortKey"
        },
        {
          "$ref": "#/components/parameters/sortDir"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "risk assessment"
        ],
        "summary": "Get the owner permissions"
      }
    },
    "/riskAssessment/permissions/{clusterId}/{ownerId}/{roleId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/clusterIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/ownerIdPathParameter"
        },
        {
          "$ref": "#/components/parameters/roleIdPathParameter"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionRoleResponse"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "risk assessment"
        ],
        "summary": "Get the owner permissions"
      }
    },
    "/riskAssessment/permissions/{ownerId}/approve": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/ownerIdPathParameter"
          },
          {
            "$ref": "#/components/parameters/approveAction"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "risk assessment"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UuidList"
              }
            }
          },
          "required": true
        },
        "summary": "add / remove permissions to /from the approved permissions list"
      }
    },
    "/riskAssessment/poll": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/riskAssessmentPollKey"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RiskAssessmentCluster"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "risk assessment"
        ],
        "summary": "Poll running scans"
      }
    },
    "/riskAssessment/{imageId}/vulnerabilities": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/riskAssessmentImageId"
          },
          {
            "$ref": "#/components/parameters/vulnerabilitySortKey"
          },
          {
            "$ref": "#/components/parameters/sortDirDesc"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RiskAssessmentVulnerability"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "risk assessment"
        ],
        "summary": "Get all images of given risk assessment pod"
      }
    },
    "/riskAssessment/{kubernetesClusterId}/cancel": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetesClusterId"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "risk assessment"
        ],
        "summary": "Cancel the runtime scan on the given cluster with the given id"
      }
    },
    "/riskAssessment/{kubernetesClusterId}/pods": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/namespacesNamesFilter"
          },
          {
            "$ref": "#/components/parameters/kubernetesClusterId"
          },
          {
            "$ref": "#/components/parameters/riskAssessmentPodSortKey"
          },
          {
            "$ref": "#/components/parameters/sortDirDesc"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          },
          {
            "$ref": "#/components/parameters/downloadAsXlsx"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RiskAssessmentPod"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "risk assessment"
        ],
        "summary": "Get all risk assessments of all pods of given cluster"
      }
    },
    "/riskAssessment/{kubernetesClusterId}/scan": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetesClusterId"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "uuid",
                  "type": "string"
                }
              }
            },
            "description": "Scan with the returned scanId was added to execution queue. "
          }
        },
        "tags": [
          "risk assessment"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskAssessmentClusterScanConfig"
              }
            }
          },
          "required": true
        },
        "summary": "Execute a new runtime scan on the given cluster with the given configuration"
      }
    },
    "/riskAssessment/{kubernetesClusterId}/settings": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetesClusterId"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "uuid",
                  "type": "string"
                }
              }
            },
            "description": "Scan with the returned scanId was added to execution queue. "
          }
        },
        "tags": [
          "risk assessment"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskAssessmentClusterScanConfig"
              }
            }
          },
          "required": true
        },
        "summary": "Save the runtime scan configuration on the given cluster"
      }
    },
    "/seccompProfiles": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SeccompProfile"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "psp profiles"
        ],
        "summary": "Get all the seccomp profiles on the system"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeccompProfile"
                }
              }
            },
            "description": "Added"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "psp profiles"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SeccompProfile"
              }
            }
          },
          "description": "seccomp profile",
          "required": true
        },
        "summary": "Add seccomp profile"
      }
    },
    "/seccompProfiles/validateData": {
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "412": {
            "description": "seccomp data is invalid"
          }
        },
        "tags": [
          "settings"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SeccompProfileData"
              }
            }
          },
          "required": true
        },
        "summary": "Test the seccomp profile data"
      }
    },
    "/seccompProfiles/{profileId}": {
      "parameters": [
        {
          "in": "path",
          "name": "profileId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "psp profiles"
        ],
        "summary": "Delete a seccomp profile"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeccompProfile"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "psp profiles"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SeccompProfile"
              }
            }
          },
          "required": true
        },
        "summary": "Change seccomp profile"
      }
    },
    "/serverless/functions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          },
          {
            "$ref": "#/components/parameters/funcNameFilter"
          },
          {
            "$ref": "#/components/parameters/serverlessSecretsRiskFilter"
          },
          {
            "$ref": "#/components/parameters/serverlessPolicyRiskFilter"
          },
          {
            "$ref": "#/components/parameters/serverlessRiskFilter"
          },
          {
            "$ref": "#/components/parameters/regionFilter"
          },
          {
            "$ref": "#/components/parameters/cloudAccountNameFilter"
          },
          {
            "$ref": "#/components/parameters/downloadAsXlsx"
          },
          {
            "$ref": "#/components/parameters/serverlessFunctionResultFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ServerlessFunction"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "serverless"
        ],
        "summary": "Get serverless functions"
      }
    },
    "/serverless/functions/arns": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/funcArnFilter"
          },
          {
            "$ref": "#/components/parameters/regionFilter"
          },
          {
            "$ref": "#/components/parameters/cloudAccountNameFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ServerlessFunctionArns"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "serverless"
        ],
        "summary": "Get serverless functions names"
      }
    },
    "/serverless/functions/names": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/funcNameFilter"
          },
          {
            "$ref": "#/components/parameters/regionFilter"
          },
          {
            "$ref": "#/components/parameters/cloudAccountNameFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ServerlessFunctionNames"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "serverless"
        ],
        "summary": "Get serverless functions names"
      }
    },
    "/serverless/functions/{functionId}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/functionId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerlessFunction"
                }
              }
            },
            "description": "Success"
          },
          "404": {
            "description": "Function with given ID does not exist"
          }
        },
        "tags": [
          "serverless"
        ],
        "summary": "Get Serverless Function by ID"
      }
    },
    "/serverless/functions/{functionId}/secrets": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/functionId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ServerlessFunctionSecretIssue"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "404": {
            "description": "Function with given ID does not exist"
          }
        },
        "tags": [
          "serverless"
        ],
        "summary": "Get Serverless Function secrets issues"
      }
    },
    "/serverless/functions/{functionId}/vulnerabilities": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/functionId"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Vulnerability"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "404": {
            "description": "Function with given ID does not exist"
          }
        },
        "tags": [
          "serverless"
        ],
        "summary": "Get Serverless Function Vulnerabilities by ID"
      }
    },
    "/serverless/zipFiles": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          },
          {
            "$ref": "#/components/parameters/zipNameFilter"
          },
          {
            "$ref": "#/components/parameters/zipSha256Filter"
          },
          {
            "$ref": "#/components/parameters/ServerlessZipSortKey"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ServerlessZip"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "serverless"
        ],
        "summary": "Get serverless zip files that was scanned by cli"
      }
    },
    "/serverless/zipFiles/{zipId}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "zipId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerlessZip"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "serverless"
        ],
        "summary": "Get specific zip file record"
      }
    },
    "/serverless/zipFiles/{zipId}/packages": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "zipId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/imagePackageDetails"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "serverless"
        ],
        "summary": "Returns a list of packages for a specific serverless zip"
      }
    },
    "/serverless/zipFiles/{zipId}/vulnerabilities": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "zipId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          },
          {
            "$ref": "#/components/parameters/sortDirDesc"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Vulnerability"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "serverless"
        ],
        "summary": "Returns a list of vulnerabilities detected in the serverless zip"
      }
    },
    "/serverlessPolicy": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerlessPolicy"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "serverless policies"
        ],
        "summary": "Get current serverless policy"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerlessPolicy"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "serverless policies"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServerlessPolicy"
              }
            }
          },
          "required": true
        },
        "summary": "Set the current serverless policy"
      }
    },
    "/serverlessPolicy/history": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConnectionPolicyHistory"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "connection policies"
        ],
        "summary": "Get the history of the serverless policies"
      }
    },
    "/settings/agentsUpdate": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentsUpdateSettings"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "settings"
        ],
        "summary": "Get the agents update configurations"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentsUpdateSettings"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "settings"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentsUpdateSettings"
              }
            }
          },
          "required": true
        },
        "summary": "get the agents update configurations."
      }
    },
    "/settings/agentsUpdate/updateNow": {
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "settings"
        ],
        "summary": "Update the agents of the account now"
      }
    },
    "/settings/integrations/ca": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CaIntegrationResponseWithClusters"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "settings"
        ],
        "summary": "Get the CA integration details"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaIntegrationResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "settings"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CaIntegrationRequest"
        },
        "summary": "Set the CA integration details"
      }
    },
    "/settings/integrations/ca/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "settings"
        ],
        "description": "Delete the CA integration details"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaIntegrationResponse"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "settings"
        ],
        "description": "Edit the CA integration details",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaIntegrationRequest"
              }
            }
          },
          "required": true
        }
      }
    },
    "/settings/integrations/eventForwarding": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventsForwardingDetailsList"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "settings"
        ],
        "summary": "Get the event forwarding integration details"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventsForwardingDetails"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "settings"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventsForwardingDetails"
              }
            }
          },
          "required": true
        },
        "summary": "Set the event forwarding integration details"
      }
    },
    "/settings/integrations/eventForwarding/{eventForwardingId}": {
      "parameters": [
        {
          "in": "path",
          "name": "eventForwardingId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "settings"
        ],
        "description": "Delete the event forwarding integration details with the given id"
      },
      "put": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventsForwardingDetails"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "settings"
        ],
        "description": "Edit the event forwarding integration details",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SplunkEventsForwardingDetails"
              }
            }
          },
          "required": true
        }
      }
    },
    "/settings/integrations/opsgenie/testIntegration": {
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "412": {
            "description": "Failed to send messages to Opsgenie"
          }
        },
        "tags": [
          "settings"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestOpsgenieConnectionRequest"
              }
            }
          },
          "required": true
        },
        "summary": "Test the connection to Opsgenie"
      }
    },
    "/settings/integrations/securex/testIntegration": {
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "412": {
            "description": "Failed to send messages to SecureX"
          }
        },
        "tags": [
          "settings"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestSecureXIntegrationRequest"
              }
            }
          },
          "required": true
        },
        "summary": "Test the SecureX integration by sending test message to the provided URL"
      }
    },
    "/settings/integrations/slack/testIntegration": {
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "412": {
            "description": "Failed to send messages to Slack"
          }
        },
        "tags": [
          "settings"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestSlackIntegrationRequest"
              }
            }
          },
          "required": true
        },
        "summary": "Test the Slack integration by sending test message to the provided URL"
      }
    },
    "/settings/integrations/splunk/testIntegration": {
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "412": {
            "description": "Failed to send messages to Splunk"
          }
        },
        "tags": [
          "settings"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestSplunkConnectionRequest"
              }
            }
          },
          "required": true
        },
        "summary": "Test the connection to Splunk"
      }
    },
    "/settings/integrations/sumoLogic/testIntegration": {
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "412": {
            "description": "Failed to send messages to Sumo Logic"
          }
        },
        "tags": [
          "settings"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestSumoLogicIntegrationRequest"
              }
            }
          },
          "required": true
        },
        "summary": "Test the Sumo Logic integration by sending test message to the provided URL"
      }
    },
    "/settings/integrations/webex/testIntegration": {
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "412": {
            "description": "Failed to send messages to Webex"
          }
        },
        "tags": [
          "settings"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestWebexIntegrationRequest"
              }
            }
          },
          "required": true
        },
        "summary": "Test the Webex integration by sending test message to the provided URL"
      }
    },
    "/tokens": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/maxResults"
          },
          {
            "$ref": "#/components/parameters/tokenName"
          },
          {
            "$ref": "#/components/parameters/noPagination"
          },
          {
            "$ref": "#/components/parameters/tokenSortKey"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Token"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "tokens"
        ],
        "summary": "Get tokens"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "tokens"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Token"
        },
        "summary": "Add new token"
      }
    },
    "/tokens/info": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/tokensIdsFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApiTokenInfo"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "tokens"
        ],
        "summary": "Get tokens by Ids"
      }
    },
    "/tokens/{tokenId}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/tokenId"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "tokens"
        ],
        "summary": "Delete token"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/tokenId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            },
            "description": "Token was edited."
          },
          "400": {
            "description": "Required field was not provided."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "tokens"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Token"
              }
            }
          },
          "required": true
        },
        "summary": "Edit token"
      }
    },
    "/tokens/{tokenId}/deleteDependencies": {
      "parameters": [
        {
          "$ref": "#/components/parameters/tokenId"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenDeleteDependencies"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "tokens"
        ],
        "summary": "get dependancies which need to be handled in order to delete specified token"
      }
    },
    "/tools/cli/securecn_deployment_cli": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "cli"
        ],
        "description": "Get the Secure Application deployment cli"
      }
    },
    "/truncation/images": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TruncationStatus"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "truncation"
        ],
        "summary": "Get workloads truncation time for account"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TruncationStatus"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "truncation"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TruncationStatus"
        },
        "summary": "Update workloads truncation status for account"
      }
    },
    "/truncation/workloads": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TruncationStatus"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "truncation"
        ],
        "summary": "Get workloads truncation time for account"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TruncationStatus"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "truncation"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TruncationStatus"
        },
        "summary": "Update workloads truncation status for account"
      }
    },
    "/trustedSigners": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/TrustedSignerSortKey"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TrustedSigner"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "tags": [
          "trusted signers"
        ],
        "summary": "Get a list of defined trusted signers"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustedSigner"
                }
              }
            },
            "description": "Added"
          }
        },
        "tags": [
          "trusted signers"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TrustedSigner"
        },
        "summary": "Add new trusted signer"
      }
    },
    "/trustedSigners/{trustedSignerId}": {
      "parameters": [
        {
          "in": "path",
          "name": "trustedSignerId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "trusted signers"
        ],
        "summary": "Delete a trusted signer"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustedSigner"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "trusted signers"
        ],
        "summary": "get existing trusted signer"
      },
      "put": {
        "responses": {
          "201": {
            "description": "Edited"
          }
        },
        "tags": [
          "trusted signers"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrustedSigner"
              }
            }
          },
          "required": true
        },
        "summary": "edit existing trusted signer"
      }
    },
    "/users": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/userNameFilter"
          },
          {
            "$ref": "#/components/parameters/emailFilter"
          },
          {
            "$ref": "#/components/parameters/userRoleFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserDisplay"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "users"
        ],
        "summary": "List current users"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "The new user that was added."
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "users"
        ],
        "description": "Create a new user. Must be admin user.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "summary": "Create a user"
      }
    },
    "/users/acceptEula": {
      "post": {
        "responses": {
          "204": {
            "description": "The EULA was accepted."
          }
        },
        "tags": [
          "users"
        ],
        "summary": "Accept the EULA"
      }
    },
    "/users/trial": {
      "post": {
        "parameters": [
          {
            "description": "google recaptcha response",
            "in": "header",
            "name": "g-recaptcha-response",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "The new trial user that was created"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrialUser"
              }
            }
          },
          "required": true
        },
        "summary": "Create a trail user"
      }
    },
    "/users/{userId}": {
      "parameters": [
        {
          "in": "path",
          "name": "userId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "tags": [
          "users"
        ],
        "summary": "Delete a user"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditUser"
              }
            }
          },
          "required": true
        },
        "summary": "Change user details"
      }
    },
    "/users/{userId}/accessTokens": {
      "parameters": [
        {
          "in": "path",
          "name": "userId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "users"
        ],
        "description": "Get the access tokens for the user, to access Secure Application",
        "summary": "Get the  access tokens for the user"
      }
    },
    "/users/{userId}/deleteDependencies": {
      "parameters": [
        {
          "in": "path",
          "name": "userId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteDependencyElementUser"
                }
              }
            },
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": [
          "users"
        ],
        "summary": "get dependencies which need to be handled in order to delete specified user"
      }
    },
    "/vulnerabilities": {
      "get": {
        "parameters": [
          {
            "description": "vulnerabilities to search for ( as prefix and suffix )",
            "in": "query",
            "name": "vulName",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/maxResults"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Success"
          }
        },
        "tags": [
          "vulnerabilities"
        ],
        "summary": "search for vulnerability names in the account"
      }
    }
  },
  "components": {
    "parameters": {
      "ApiServiceSpecPath": {
        "description": "spec path",
        "in": "query",
        "name": "specPath",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "ApiServiceSpecPathMethod": {
        "description": "spec path method",
        "in": "query",
        "name": "specPathMethod",
        "required": true,
        "schema": {
          "enum": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "HEAD",
            "CONNECT",
            "OPTIONS",
            "TRACE",
            "PATCH"
          ],
          "type": "string"
        }
      },
      "CdSortKey": {
        "description": "sort key",
        "in": "query",
        "name": "sortKey",
        "required": false,
        "schema": {
          "default": "time",
          "enum": [
            "time",
            "status"
          ],
          "type": "string"
        }
      },
      "HitCountIntervalInHours": {
        "description": "hours interval",
        "in": "query",
        "name": "hoursInterval",
        "required": false,
        "schema": {
          "default": 24,
          "type": "integer"
        }
      },
      "ListNamespaceSortKey": {
        "description": "sort key",
        "in": "query",
        "name": "sortKey",
        "required": false,
        "schema": {
          "default": "name",
          "enum": [
            "name",
            "status"
          ],
          "type": "string"
        }
      },
      "RegistrySortKey": {
        "description": "sort key",
        "in": "query",
        "name": "sortKey",
        "required": false,
        "schema": {
          "default": "url",
          "enum": [
            "url"
          ],
          "type": "string"
        }
      },
      "ResourceSortKey": {
        "description": "sort key",
        "in": "query",
        "name": "sortKey",
        "required": false,
        "schema": {
          "default": "risk",
          "enum": [
            "risk"
          ],
          "type": "string"
        }
      },
      "ServerlessZipSortKey": {
        "description": "sort key",
        "in": "query",
        "name": "sortKey",
        "required": false,
        "schema": {
          "default": "VULNERABILITIES",
          "enum": [
            "TIME",
            "VULNERABILITIES"
          ],
          "type": "string"
        }
      },
      "TrustedSignerSortKey": {
        "description": "sort key",
        "in": "query",
        "name": "sortKey",
        "required": false,
        "schema": {
          "default": "name",
          "enum": [
            "name"
          ],
          "type": "string"
        }
      },
      "accountFilter": {
        "description": "Account",
        "in": "query",
        "name": "account",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "accountsSortKey": {
        "description": "sort key",
        "in": "query",
        "name": "sortKey",
        "required": false,
        "schema": {
          "default": "name",
          "enum": [
            "name",
            "createdTime"
          ],
          "type": "string"
        }
      },
      "actionFilter": {
        "description": "Actions",
        "in": "query",
        "name": "actions",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "adminAuditLogSortKey": {
        "description": "sort key",
        "in": "query",
        "name": "sortKey",
        "required": true,
        "schema": {
          "enum": [
            "time",
            "action",
            "objectType",
            "account"
          ],
          "type": "string"
        }
      },
      "agentId": {
        "description": "Secure Application agent ID",
        "in": "path",
        "name": "agentId",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "agentSortKey": {
        "description": "sort key",
        "in": "query",
        "name": "sortKey",
        "required": false,
        "schema": {
          "default": "hostName",
          "enum": [
            "hostName",
            "environmentName",
            "risk",
            "status",
            "lastActive"
          ],
          "type": "string"
        }
      },
      "agentStatusFilter": {
        "description": "Agent status",
        "in": "query",
        "name": "status",
        "required": false,
        "schema": {
          "items": {
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "STOPPED",
              "TERMINATED"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "apiCatalogNameFilter": {
        "description": "the Api Catalog name filter",
        "in": "query",
        "name": "name",
        "schema": {
          "type": "string"
        }
      },
      "apiCatalogSortKey": {
        "description": "the Api Catalog sort key",
        "in": "query",
        "name": "sortKey",
        "schema": {
          "enum": [
            "name",
            "risk"
          ],
          "type": "string"
        }
      },
      "apiPolicyProfiles": {
        "description": "Names of the Api Policy Profiles",
        "in": "query",
        "name": "apiPolicyProfiles",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "apiRisk": {
        "description": "minimum api risk level",
        "in": "query",
        "name": "apiRisk",
        "required": false,
        "schema": {
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL",
            "NEUTRAL",
            "UNKNOWN"
          ],
          "type": "string"
        }
      },
      "apiRisksFilter": {
        "description": "The API risk filter",
        "in": "query",
        "name": "risks",
        "schema": {
          "items": {
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL",
              "ALL"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "apiSecDashboardNumOfDays": {
        "description": "the desired number of days in graph",
        "in": "query",
        "name": "numOfDays",
        "schema": {
          "default": 30,
          "type": "integer"
        }
      },
      "apiSecSourceFilter": {
        "description": "source filter. an enum representing the source of the APIs service in scope",
        "in": "query",
        "name": "apiSecSource",
        "required": true,
        "schema": {
          "default": "INTERNAL",
          "enum": [
            "INTERNAL",
            "EXTERNAL"
          ],
          "type": "string"
        }
      },
      "apiServiceSpecTags": {
        "description": "spec tags names",
        "in": "query",
        "name": "tags",
        "required": true,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "appName": {
        "description": "Filter Apps by name",
        "in": "query",
        "name": "name",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "appNameFilter": {
        "description": "Defined App name",
        "in": "query",
        "name": "appName",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "appResultFilter": {
        "description": "app result filter",
        "in": "query",
        "name": "result",
        "required": false,
        "schema": {
          "items": {
            "enum": [
              "ALLOW",
              "DETECT",
              "BLOCK"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "appSortKey": {
        "description": "App sort key",
        "in": "query",
        "name": "sortKey",
        "required": false,
        "schema": {
          "enum": [
            "name",
            "type"
          ],
          "type": "string"
        }
      },
      "appTelemetryId": {
        "description": "App telemetry ID",
        "in": "path",
        "name": "appTelemetryId",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "appTypeFilter": {
        "description": "Empty string means no filtering. \"UNDEFINED\" means telemetries with no App type",
        "in": "query",
        "name": "appType",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "appTypes": {
        "description": "Filter Apps by type",
        "in": "query",
        "name": "type",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "approveAction": {
        "description": "The approve action type (ADD/REMOVE)",
        "in": "query",
        "name": "actionType",
        "required": true,
        "schema": {
          "enum": [
            "ADD",
            "REMOVE"
          ],
          "type": "string"
        }
      },
      "apps": {
        "description": "Array of App names",
        "in": "query",
        "name": "apps",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "auditLogSortKey": {
        "description": "sort key",
        "in": "query",
        "name": "sortKey",
        "required": false,
        "schema": {
          "default": "time",
          "enum": [
            "time",
            "action",
            "objectType"
          ],
          "type": "string"
        }
      },
      "catalogId": {
        "in": "path",
        "name": "catalogId",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "cloudAccountId": {
        "description": "cloud account ID",
        "in": "path",
        "name": "cloudAccountId",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "cloudAccountNameFilter": {
        "description": "Filter cloud accounts by name",
        "in": "query",
        "name": "cloudAccountName",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "cloudAccountSortKey": {
        "description": "sort key",
        "in": "query",
        "name": "sortKey",
        "required": true,
        "schema": {
          "enum": [
            "lastScanned",
            "name"
          ],
          "type": "string"
        }
      },
      "clusterIdPathParameter": {
        "in": "path",
        "name": "clusterId",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "clusterNameFilter": {
        "description": "the cluster name to filter by",
        "in": "query",
        "name": "clusterName",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "clusterSortKey": {
        "description": "sort key",
        "in": "query",
        "name": "sortKey",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "clustersIdsFilter": {
        "description": "the clusters ids to filter by",
        "explode": true,
        "in": "query",
        "name": "clustersIds",
        "required": false,
        "schema": {
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        }
      },
      "clustersPermissionSortKey": {
        "description": "sort key",
        "in": "query",
        "name": "sortKey",
        "required": false,
        "schema": {
          "default": "permissionRisk",
          "enum": [
            "permissionRisk"
          ],
          "type": "string"
        }
      },
      "connectionResultFilter": {
        "description": "connection result filter",
        "in": "query",
        "name": "result",
        "required": false,
        "schema": {
          "items": {
            "enum": [
              "DETECT",
              "BLOCK",
              "ALLOW",
              "ENCRYPT"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "connectionSortKey": {
        "description": "sort key",
        "in": "query",
        "name": "sortKey",
        "required": true,
        "schema": {
          "enum": [
            "sourceAppName",
            "sourceAppType",
            "sourceEnvironmentName",
            "sourceExecutable",
            "sourceRisk",
            "sourceHostName",
            "targetAppName",
            "targetAppType",
            "targetEnvironmentName",
            "targetExecutable",
            "targetRisk",
            "targetHostName",
            "firstSeen",
            "lastSeen",
            "total"
          ],
          "type": "string"
        }
      },
      "connectionTelemetryId": {
        "description": "connection telemetry ID",
        "in": "path",
        "name": "connectionTelemetryId",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "controllerStatusFilter": {
        "description": "Filter the clusters by controller status",
        "in": "query",
        "name": "controllerStatus",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "controllerVersionFilter": {
        "description": "Filter the clusters by controller version",
        "in": "query",
        "name": "controllerVersion",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "deployerNameFilter": {
        "description": "Filter deployers by name",
        "in": "query",
        "name": "name",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "deployerRuleCreationFilter": {
        "description": "Filter deployers by rule creation",
        "in": "query",
        "name": "ruleCreation",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "deployerSecurityCheckFilter": {
        "description": "Filter deployers by security checks",
        "in": "query",
        "name": "securityCheck",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "deployerSortKey": {
        "description": "sort key",
        "in": "query",
        "name": "sortKey",
        "required": true,
        "schema": {
          "enum": [
            "deployer",
            "type"
          ],
          "type": "string"
        }
      },
      "detectedFindingFilter": {
        "description": "Show finding with detect elements only ",
        "in": "query",
        "name": "detected",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "downloadAsJson": {
        "description": "When true, the API will return an json file, and pagination will be ignored",
        "in": "query",
        "name": "downloadAsJson",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "downloadAsXlsx": {
        "description": "When true, the API will return an xlsx file, and pagination will be ignored",
        "in": "query",
        "name": "downloadAsXlsx",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "drillDownScore": {
        "description": "Return associated score",
        "in": "query",
        "name": "drillDownScore",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "emailFilter": {
        "description": "the email to filter by",
        "in": "query",
        "name": "email",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "endTime": {
        "description": "End date of the query",
        "in": "query",
        "name": "endTime",
        "required": true,
        "schema": {
          "format": "date-time",
          "type": "string"
        }
      },
      "envName": {
        "description": "Filter environments by name",
        "in": "query",
        "name": "name",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "envSortKey": {
        "description": "Environment sort key",
        "in": "query",
        "name": "sortKey",
        "required": false,
        "schema": {
          "enum": [
            "name"
          ],
          "type": "string"
        }
      },
      "environmentNameFilter": {
        "description": "Empty string means no filtering. \"UNDEFINED\" means telemetries with no App type",
        "in": "query",
        "name": "environmentName",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "environments": {
        "description": "Array of environments names",
        "in": "query",
        "name": "environments",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "excludeApps": {
        "description": "Array of App/pod names to exclude",
        "in": "query",
        "name": "excludeApps",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "executableFilter": {
        "in": "query",
        "name": "executable",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "expansionClusterNameFilter": {
        "description": "Filter expansions by cluster name",
        "in": "query",
        "name": "clusterName",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "expansionNameFilter": {
        "description": "Filter expansions by name",
        "in": "query",
        "name": "name",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "expansionNamespaceFilter": {
        "description": "Filter expansions by namespace",
        "in": "query",
        "name": "namespaceName",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "expansionSortKey": {
        "description": "sort key",
        "in": "query",
        "name": "sortKey",
        "required": true,
        "schema": {
          "enum": [
            "name"
          ],
          "type": "string"
        }
      },
      "expirationDate": {
        "description": "Expiration date of the token",
        "in": "query",
        "name": "expirationDate",
        "required": false,
        "schema": {
          "format": "date-time",
          "type": "string"
        }
      },
      "findingCategoryFilter": {
        "description": "Category of the risk finding",
        "in": "query",
        "name": "category",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "findingElementFilter": {
        "description": "Affected element of the risk finding",
        "in": "query",
        "name": "element",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "findingNameFilter": {
        "description": "Name of the risk finding name",
        "in": "query",
        "name": "name",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "findingSourceFilter": {
        "description": "Source of the risk finding",
        "in": "query",
        "name": "source",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "funcArnFilter": {
        "description": "Defined function ARN",
        "in": "query",
        "name": "funcArn",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "funcNameFilter": {
        "description": "Defined function name",
        "in": "query",
        "name": "funcName",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "functionId": {
        "description": "Function ID",
        "in": "path",
        "name": "functionId",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "gatewayId": {
        "in": "path",
        "name": "gatewayId",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "gatewayType": {
        "in": "query",
        "name": "gatewayType",
        "required": true,
        "schema": {
          "enum": [
            "APIGEE_X",
            "KONG_INTERNAL",
            "TYK_INTERNAL",
            "F5_BIG_IP"
          ],
          "type": "string"
        }
      },
      "groupAppsOnTheSameEnvironment": {
        "description": "When true, the API will aggregate Apps that are on the same environment",
        "in": "query",
        "name": "groupAppsOnTheSameEnvironment",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "hideInternals": {
        "description": "When true, the API will filter out \"OS Internal\" and \"User OS Internal\" App types",
        "in": "query",
        "name": "hideInternals",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "highestDockerfileScanResultFilter": {
        "description": "Highest DockerfileScan Result",
        "in": "query",
        "name": "highestDockerfileScanResult",
        "required": false,
        "schema": {
          "items": {
            "format": "enum - INFO - WARN - FATAL",
            "type": "string"
          },
          "type": "array"
        }
      },
      "highestVulnerabilityFilter": {
        "description": "Highest vulnerability",
        "in": "query",
        "name": "vulnerabilityLevelsFilter",
        "required": false,
        "schema": {
          "items": {
            "format": "enum - UNKNOWN - LOW - MEDIUM - HIGH - CRITICAL",
            "type": "string"
          },
          "type": "array"
        }
      },
      "hostFilter": {
        "description": "Defined host name",
        "in": "query",
        "name": "host",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "hostNameFilter": {
        "description": "The name of the host",
        "in": "query",
        "name": "hostName",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "ignoreAction": {
        "description": "The ignore action type (ADD/REMOVE)",
        "in": "query",
        "name": "actionType",
        "required": true,
        "schema": {
          "enum": [
            "ADD",
            "REMOVE"
          ],
          "type": "string"
        }
      },
      "ignoreExternalConnection": {
        "description": "When true, the API will ignore connections coming from external IP addresses",
        "in": "query",
        "name": "ignoreExternalConnection",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "imageHashFilter": {
        "description": "Filter images by HASH",
        "in": "query",
        "name": "IMAGE_HASH",
        "required": false,
        "schema": {
          "items": {
            "maxItems": 10,
            "type": "string"
          },
          "type": "array"
        }
      },
      "imageNameFilter": {
        "description": "Filter images by name",
        "in": "query",
        "name": "IMAGE_NAME",
        "required": false,
        "schema": {
          "items": {
            "maxItems": 10,
            "type": "string"
          },
          "type": "array"
        }
      },
      "imageSortKey": {
        "description": "image sort key. enum description in image sort key definition",
        "in": "query",
        "name": "sortKey",
        "required": true,
        "schema": {
          "default": "RISK",
          "enum": [
            "IMAGE_NAME",
            "TIME",
            "RISK"
          ],
          "type": "string"
        }
      },
      "imageTagFilter": {
        "description": "Filter images by tags",
        "in": "query",
        "name": "IMAGE_TAG",
        "required": false,
        "schema": {
          "items": {
            "maxItems": 10,
            "type": "string"
          },
          "type": "array"
        }
      },
      "imagesIdFilter": {
        "description": "Array of images id",
        "in": "query",
        "name": "imagesId",
        "required": false,
        "schema": {
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        }
      },
      "includeScannable": {
        "description": "If true - return all scannable namespaces",
        "in": "query",
        "name": "includeScannable",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "includeServiceWithNoSpec": {
        "description": "When false, only services with specs wikk be returned",
        "in": "query",
        "name": "includeServiceWithNoSpec",
        "required": false,
        "schema": {
          "default": true,
          "type": "boolean"
        }
      },
      "includeSystemEnvs": {
        "description": "include systems environments",
        "in": "query",
        "name": "includeSystemEnvs",
        "required": false,
        "schema": {
          "default": true,
          "type": "boolean"
        }
      },
      "includeSystemOwners": {
        "description": "include systems default owners",
        "in": "query",
        "name": "includeSystemOwners",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "isApproved": {
        "description": "Return approved / not approved entries",
        "in": "query",
        "name": "isApproved",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "isBackgroundJob": {
        "description": "should run as background job or not",
        "in": "query",
        "name": "isBackgroundJob",
        "required": false,
        "schema": {
          "default": true,
          "type": "boolean"
        }
      },
      "isIdentifiedFilter": {
        "description": "app is identified filter",
        "in": "query",
        "name": "isIdentified",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "isIgnored": {
        "description": "Return ignored / not ignored entries",
        "in": "query",
        "name": "isIgnored",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "isImageApproved": {
        "description": "Is image approved",
        "in": "query",
        "name": "isImageApproved",
        "required": true,
        "schema": {
          "type": "boolean"
        }
      },
      "kubernetesAuditActionFilter": {
        "description": "Kubernetes audit action",
        "in": "query",
        "name": "kubernetesAuditAction",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "kubernetesAuditLogSortKey": {
        "description": "sort key",
        "in": "query",
        "name": "sortKey",
        "required": false,
        "schema": {
          "default": "lastSeen",
          "enum": [
            "firstSeen",
            "lastSeen",
            "action",
            "user",
            "total"
          ],
          "type": "string"
        }
      },
      "kubernetesClusterId": {
        "description": "Secure Application Kubernetes cluster ID",
        "in": "path",
        "name": "kubernetesClusterId",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "kubernetesVersionFilter": {
        "description": "Filter the clusters by k8s version",
        "in": "query",
        "name": "kubernetesVersion",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "labels": {
        "description": "Array of labels. Each label is a string with format key:value",
        "in": "query",
        "name": "labels",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "maxItems": 10,
          "type": "array"
        }
      },
      "layerId": {
        "in": "query",
        "name": "layerId",
        "required": false,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "logicalOperatorFilter": {
        "description": "Logical operator between the source group and the target group filters",
        "in": "query",
        "name": "logicalOperator",
        "required": false,
        "schema": {
          "default": "and",
          "enum": [
            "and",
            "or"
          ],
          "type": "string"
        }
      },
      "maxResults": {
        "description": "The number of entries to return (pagination)",
        "in": "query",
        "name": "maxResults",
        "required": false,
        "schema": {
          "default": 100,
          "maximum": 200,
          "type": "number"
        }
      },
      "mitreTechniqueType": {
        "description": "MITRE technique type",
        "in": "query",
        "name": "mitreTechniqueType",
        "required": true,
        "schema": {
          "enum": [
            "COMPROMISED_IMAGES",
            "UNAUTHORISED_REGISTRIES_USAGE",
            "SUSPICIOUS_DEPLOYMENT",
            "VULNERABLE_APPLICATION",
            "EXPOSED_K8S_DASHBOARD",
            "EXPLOIT_PUBLIC_FACING_APPLICATION",
            "CONTAINER_SERVICE",
            "DEPLOY_CONTAINER",
            "SSH_CONNECTION",
            "WRITEABLE_HOST_PATH",
            "CRON_JOBS",
            "PRIVILEGED_OR_ROOT_CONTAINER",
            "PRIVILEGE_ESCALATION_ENABLED",
            "CLUSTER_ADMIN_BINDING",
            "UNAUTHORIZED_CLUSTER_ADMIN_BINDING",
            "ACCESS_CLUSTER_RESOURCES",
            "CLEAR_CONTAINER_LOGS",
            "CLEAR_K8S_EVENTS",
            "LIST_SECRETS",
            "SERVICE_ACCOUNT_ACCESS",
            "CONTAINER_RESOURCE_DISCOVERY",
            "CLUSTER_INTERNAL_NETWORKING",
            "TILLER_ENDPOINT_ACCESS",
            "DATA_DESTRUCTION"
          ],
          "type": "string"
        }
      },
      "namespaceIds": {
        "description": "Array of namespaces ids",
        "in": "query",
        "name": "namespaces",
        "required": false,
        "schema": {
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        }
      },
      "namespaceNameFilter": {
        "description": "the namespace name to filter by",
        "in": "query",
        "name": "namespaceName",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "namespacesFilter": {
        "description": "namespace filter. a base 64 representation of a list of NamespacesFilter definition object",
        "in": "query",
        "name": "namespacesFilter",
        "required": false,
        "schema": {
          "format": "base64",
          "type": "string"
        }
      },
      "namespacesNamesFilter": {
        "description": "namespace names filter. a base 64 representation of a list of namespace names definition object",
        "in": "query",
        "name": "namespacesNamesFilter",
        "required": false,
        "schema": {
          "format": "base64",
          "type": "string"
        }
      },
      "namespacesSortKey": {
        "description": "the namespaces sort key",
        "in": "query",
        "name": "sortKey",
        "required": false,
        "schema": {
          "default": "namespaceName",
          "enum": [
            "namespaceName",
            "clusterName",
            "runningPods",
            "protectionStatus"
          ],
          "type": "string"
        }
      },
      "noPagination": {
        "description": "When true, the pagination params will be ignored",
        "in": "query",
        "name": "noPagination",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "objectTypeFilter": {
        "description": "Object Type",
        "in": "query",
        "name": "objectType",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "offset": {
        "description": "Return entries from this offset (pagination)",
        "in": "query",
        "name": "offset",
        "required": false,
        "schema": {
          "default": 0,
          "type": "number"
        }
      },
      "onlySpecReconstructionEnabledFilter": {
        "description": "retrive only clusters that configured as spec reconstruction enabled.",
        "in": "query",
        "name": "onlySpecReconstructionEnabledFilter",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "ownerIdPathParameter": {
        "in": "path",
        "name": "ownerId",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "ownerNameFilter": {
        "description": "owner name",
        "in": "query",
        "name": "owner",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "ownerTypeFilter": {
        "description": "owner type",
        "in": "query",
        "name": "ownerType",
        "required": false,
        "schema": {
          "enum": [
            "SERVICEACCOUNT",
            "USER",
            "GROUP"
          ],
          "type": "string"
        }
      },
      "permissionOwnerSortKey": {
        "description": "sort key",
        "in": "query",
        "name": "sortKey",
        "required": false,
        "schema": {
          "default": "owner",
          "enum": [
            "owner",
            "ownerType"
          ],
          "type": "string"
        }
      },
      "permissionRiskFilter": {
        "description": "the risk to filter by",
        "in": "query",
        "name": "permissionRisk",
        "required": false,
        "schema": {
          "enum": [
            "NO_RISK",
            "MEDIUM",
            "HIGH",
            "APPROVED"
          ],
          "type": "string"
        }
      },
      "permissionSortKey": {
        "description": "sort key",
        "in": "query",
        "name": "sortKey",
        "required": false,
        "schema": {
          "default": "risk",
          "enum": [
            "risk"
          ],
          "type": "string"
        }
      },
      "podDefinitionClusterNameFilter": {
        "description": "Filter pod definitions by cluster name",
        "in": "query",
        "name": "clusterName",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "podDefinitionDeploymentTypeFilter": {
        "description": "Filter pod definitions by deployment type",
        "in": "query",
        "name": "deploymentType",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "podDefinitionNameFilter": {
        "description": "Filter pod definitions by name",
        "in": "query",
        "name": "name",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "podDefinitionTemplateSourceFilter": {
        "description": "Filter pod definitions by template source",
        "in": "query",
        "name": "templateSource",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "policyAdvisorType": {
        "description": "policy advisor type",
        "in": "query",
        "name": "policyAdvisorType",
        "required": true,
        "schema": {
          "enum": [
            "ENVIRONMENT",
            "POD_SECURITY_STANDARD",
            "CONNECTION_RULES",
            "DEPLOYMENT_RULES",
            "API_RULES"
          ],
          "type": "string"
        }
      },
      "protectionStatusFilter": {
        "description": "When true, the API will return only protected pods",
        "in": "query",
        "name": "protectionStatus",
        "required": false,
        "schema": {
          "default": "ALL",
          "enum": [
            "FULL",
            "DEPLOYMENT_ONLY",
            "CONNECTION_ONLY",
            "DISABLED",
            "ALL"
          ],
          "type": "string"
        }
      },
      "protocol": {
        "description": "protocol",
        "in": "query",
        "name": "protocol",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "regionFilter": {
        "description": "Filter cloud accounts by region",
        "in": "query",
        "name": "region",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "resourceId": {
        "in": "path",
        "name": "resourceId",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "resourceKindFilter": {
        "description": "Resource kind",
        "in": "query",
        "name": "resourceKind",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "resourceNameFilter": {
        "description": "Resource name",
        "in": "query",
        "name": "resourceName",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "resultFilter": {
        "description": "event result filter",
        "in": "query",
        "name": "result",
        "schema": {
          "items": {
            "enum": [
              "ALLOW",
              "DETECT",
              "BLOCK",
              "RISKY"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "riskAssessmentImageId": {
        "description": "The id of the risk assessment image",
        "in": "path",
        "name": "imageId",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "riskAssessmentPodSortKey": {
        "description": "risk assessment pod sort key.",
        "in": "query",
        "name": "sortKey",
        "required": true,
        "schema": {
          "default": "RISK",
          "enum": [
            "NAME",
            "RISK"
          ],
          "type": "string"
        }
      },
      "riskAssessmentPollKey": {
        "description": "The ids of the clusters whose scans to poll",
        "in": "query",
        "name": "riskAssessmentPollKey",
        "required": true,
        "schema": {
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        }
      },
      "riskFilter": {
        "description": "The risk of the environment for attack",
        "in": "query",
        "name": "risk",
        "required": false,
        "schema": {
          "items": {
            "enum": [
              "HIGH",
              "MEDIUM",
              "LOW",
              "UNDEFINED"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "riskFindingId": {
        "in": "path",
        "name": "riskFindingId",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "riskFindingSortKey": {
        "description": "Risk finding sort key.",
        "in": "query",
        "name": "sortKey",
        "required": true,
        "schema": {
          "default": "RISK",
          "enum": [
            "NAME",
            "RISK"
          ],
          "type": "string"
        }
      },
      "roleIdPathParameter": {
        "in": "path",
        "name": "roleId",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "sendTelemetriesIntervalSec": {
        "description": "The time interval for sending telemetries",
        "in": "query",
        "name": "sendTelemetriesIntervalSec",
        "required": false,
        "schema": {
          "default": 30,
          "type": "integer"
        }
      },
      "serverlessFunctionResultFilter": {
        "description": "serverless function result filter",
        "in": "query",
        "name": "result",
        "required": false,
        "schema": {
          "items": {
            "enum": [
              "ALLOW",
              "DETECT",
              "BLOCK"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "serverlessPolicyRiskFilter": {
        "description": "The risk of the serverless functioriskFindingsn policy",
        "in": "query",
        "name": "policyRisk",
        "required": false,
        "schema": {
          "items": {
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "serverlessRiskFilter": {
        "description": "The risk of the serverless function",
        "in": "query",
        "name": "risk",
        "required": false,
        "schema": {
          "items": {
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "serverlessSecretsRiskFilter": {
        "description": "The risk of the serverless function secrets",
        "in": "query",
        "name": "secretsRisk",
        "required": false,
        "schema": {
          "items": {
            "enum": [
              "NO_KNOWN_RISK",
              "RISK_IDENTIFIED"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "showOnlyAppsWithConnections": {
        "description": "When true, the API will only return Apps with connections",
        "in": "query",
        "name": "showOnlyAppsWithConnections",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "showOnlyAppsWithViolations": {
        "description": "When true, the API will only return Apps that violated the active policy",
        "in": "query",
        "name": "showOnlyAppsWithViolations",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "showOnlyConnectionsBetweenEnvironments": {
        "description": "When true, the API will only return connections between environments",
        "in": "query",
        "name": "showOnlyConnectionsBetweenEnvironments",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "showOnlyConnectionsWithViolations": {
        "description": "When true, the API will only return connections that violate the active policy",
        "in": "query",
        "name": "showOnlyConnectionsWithViolations",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "showOnlyEntriesWithAppName": {
        "description": "When true, the telemetries API will only return entries with the App name",
        "in": "query",
        "name": "showOnlyEntriesWithAppName",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "showOnlyVulnerabilitiesWithFix": {
        "in": "query",
        "name": "showOnlyVulnerabilitiesWithFix",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "showSystemPods": {
        "description": "When true, the telemetries API will also return workloads that are part of the Kubernetes system",
        "in": "query",
        "name": "showSystemPods",
        "required": false,
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "snoozeTime": {
        "description": "The time to snooze the vulnerability",
        "in": "query",
        "name": "snoozeTime",
        "required": false,
        "schema": {
          "enum": [
            "ALWAYS",
            "YEAR",
            "MONTH",
            "WEEK"
          ],
          "type": "string"
        }
      },
      "sortDir": {
        "description": "sorting direction",
        "in": "query",
        "name": "sortDir",
        "required": false,
        "schema": {
          "default": "ASC",
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string"
        }
      },
      "sortDirDesc": {
        "description": "sorting direction",
        "in": "query",
        "name": "sortDir",
        "required": false,
        "schema": {
          "default": "DESC",
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string"
        }
      },
      "sortKey": {
        "description": "sort key",
        "in": "query",
        "name": "sortKey",
        "required": true,
        "schema": {
          "enum": [
            "appName",
            "appType",
            "executable",
            "environmentName",
            "risk",
            "status",
            "startTime",
            "finishTime",
            "workloadRisk"
          ],
          "type": "string"
        }
      },
      "sourceAppNameFilter": {
        "in": "query",
        "name": "sourceAppName",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "sourceEnvironmentNameFilter": {
        "in": "query",
        "name": "sourceEnvironmentName",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "sourceExecutableFilter": {
        "in": "query",
        "name": "sourceExecutable",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "sourceHostNameFilter": {
        "in": "query",
        "name": "sourceHostName",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "sourceNamespaceId": {
        "description": "namespace id",
        "in": "query",
        "name": "sourceNamespace",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "sourceNamespacesFilter": {
        "description": "namespace filter for source in connection telemetries, a base 64 representation of a NamespacesFilter definition object",
        "in": "query",
        "name": "sourceNamespacesFilter",
        "required": false,
        "schema": {
          "format": "base64",
          "type": "string"
        }
      },
      "sourcePodTemplateId": {
        "description": "pod template id",
        "in": "query",
        "name": "sourcePodTemplate",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "sourceRiskFilter": {
        "in": "query",
        "name": "sourceRisk",
        "required": false,
        "schema": {
          "items": {
            "enum": [
              "HIGH",
              "MEDIUM",
              "LOW"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "startTime": {
        "description": "Start date of the query",
        "in": "query",
        "name": "startTime",
        "required": true,
        "schema": {
          "format": "date-time",
          "type": "string"
        }
      },
      "statusFilter": {
        "description": "App status",
        "in": "query",
        "name": "status",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "targetAppNameFilter": {
        "in": "query",
        "name": "targetAppName",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "targetEnvironmentNameFilter": {
        "in": "query",
        "name": "targetEnvironmentName",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "targetExecutableFilter": {
        "in": "query",
        "name": "targetExecutable",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "targetHostNameFilter": {
        "in": "query",
        "name": "targetHostName",
        "required": false,
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "targetNamespaceId": {
        "description": "namespace id",
        "in": "query",
        "name": "targetNamespace",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "targetNamespacesFilter": {
        "description": "namespace filter for target in connection telemetries. a base 64 representation of a NamespacesFilter definition object",
        "in": "query",
        "name": "targetNamespacesFilter",
        "required": false,
        "schema": {
          "format": "base64",
          "type": "string"
        }
      },
      "targetPodTemplateId": {
        "description": "pod template id",
        "in": "query",
        "name": "targetPodTemplate",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "targetRiskFilter": {
        "in": "query",
        "name": "targetRisk",
        "required": false,
        "schema": {
          "items": {
            "enum": [
              "HIGH",
              "MEDIUM",
              "LOW"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "tokenId": {
        "in": "path",
        "name": "tokenId",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "tokenName": {
        "description": "Defined token name",
        "in": "query",
        "name": "tokenName",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "tokenSortKey": {
        "description": "the token sort key",
        "in": "query",
        "name": "sortKey",
        "schema": {
          "enum": [
            "expirationDate"
          ],
          "type": "string"
        }
      },
      "tokensIdsFilter": {
        "in": "query",
        "name": "tokensIds",
        "required": true,
        "schema": {
          "items": {
            "format": "uuid",
            "type": "string"
          },
          "type": "array"
        }
      },
      "topRiskyWorkloadsSize": {
        "description": "Amount of top risky workloads to return",
        "in": "query",
        "name": "size",
        "required": false,
        "schema": {
          "default": 5,
          "minimum": 1,
          "type": "integer"
        }
      },
      "updatedAfter": {
        "description": "Only Apis updated since this date",
        "in": "query",
        "name": "updatedAfter",
        "required": false,
        "schema": {
          "format": "date-time",
          "type": "string"
        }
      },
      "userFilter": {
        "description": "User name",
        "in": "query",
        "name": "user",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "userNameFilter": {
        "description": "the user name to filter by",
        "in": "query",
        "name": "username",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "userRoleFilter": {
        "description": "the roles to filter by",
        "explode": true,
        "in": "query",
        "name": "roles",
        "required": false,
        "schema": {
          "items": {
            "enum": [
              "SELF_PROVISIONING",
              "CI_CD_SCANNER",
              "PORTSHIFT_ADMIN",
              "PORTSHIFT_AUDITOR",
              "ACCOUNT_ADMIN",
              "SERVICE",
              "ACCOUNT_AUDITOR"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "violationsFilter": {
        "description": "When true, the API will only return entries that violate the active policy",
        "in": "query",
        "name": "showOnlyViolations",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "vulnerabilityNameFilter": {
        "description": "Filter images by vulnerability name",
        "in": "query",
        "name": "vulnerabilityName",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "vulnerabilitySortKey": {
        "description": "risk assessment image sort key.",
        "in": "query",
        "name": "sortKey",
        "required": true,
        "schema": {
          "default": "SEVERITY",
          "enum": [
            "SEVERITY"
          ],
          "type": "string"
        }
      },
      "workloadRiskFilter": {
        "description": "workloadRisk filter",
        "in": "query",
        "name": "workloadRisks",
        "required": false,
        "schema": {
          "items": {
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "zipNameFilter": {
        "in": "query",
        "name": "zipNameFilter",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "zipSha256Filter": {
        "in": "query",
        "name": "zipSha256Filter",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "UnknownError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiResponse"
            }
          }
        },
        "description": "unknown error"
      }
    },
    "requestBodies": {
      "ApiSecurityPolicy": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiSecurityPolicy"
            }
          }
        },
        "required": true
      },
      "App": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/App"
            }
          }
        },
        "required": true
      },
      "BflaDurationConfiguration": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BflaDurationConfiguration"
            }
          }
        },
        "required": true
      },
      "CaIntegrationRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CaIntegrationRequest"
            }
          }
        },
        "required": true
      },
      "CdConnectionRule": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CdConnectionRule"
            }
          }
        },
        "required": true
      },
      "CdPolicy": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CdPolicy"
            }
          }
        },
        "required": true
      },
      "CdServerlessRule": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CdServerlessRule"
            }
          }
        },
        "required": true
      },
      "CiPolicy": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CiPolicy"
            }
          }
        },
        "required": true
      },
      "Deployer": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Deployer"
            }
          }
        },
        "required": true
      },
      "Environment": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Environment"
            }
          }
        },
        "description": "Environment definition",
        "required": true
      },
      "Gateway": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Gateway"
            }
          }
        },
        "required": true
      },
      "KubernetesCluster": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/KubernetesCluster"
            }
          }
        },
        "required": true
      },
      "PodDefinition": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PodDefinition"
            }
          }
        },
        "required": true
      },
      "PodSecurityPolicy": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PodSecurityPolicy"
            }
          }
        },
        "required": true
      },
      "Registry": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Registry"
            }
          }
        },
        "required": true
      },
      "RiskAssessmentClusterScanConfig": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RiskAssessmentClusterScanConfig"
            }
          }
        },
        "required": true
      },
      "Token": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Token"
            }
          }
        },
        "required": true
      },
      "TruncationStatus": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TruncationStatus"
            }
          }
        },
        "required": true
      },
      "TrustedSigner": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TrustedSigner"
            }
          }
        },
        "required": true
      },
      "UuidList": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UuidList"
            }
          }
        },
        "required": true
      }
    },
    "schemas": {
      "AWSAccount": {
        "description": "Defines an AWS account",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AWSRole": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AWSRolePost"
          },
          {
            "properties": {
              "id": {
                "format": "uuid",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "description": "Defines a role ARN that Secure Application can connect to.",
        "type": "object"
      },
      "AWSRoleDetails": {
        "description": "A given name for the AWS role that Secure Application can connect to.",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "pattern": "^[a-zA-Z 0-9.-/]*$",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "AWSRolePost": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AWSRoleDetails"
          },
          {
            "properties": {
              "arn": {
                "type": "string"
              }
            },
            "required": [
              "arn"
            ],
            "type": "object"
          }
        ],
        "description": "Defines a role ARN that Secure Application can connect to.",
        "type": "object"
      },
      "AccessToken": {
        "properties": {
          "accessKey": {
            "format": "uuid",
            "type": "string"
          },
          "agentSecretKey": {
            "description": "A 256-bit string encoded in base 64",
            "type": "string"
          },
          "secretKey": {
            "description": "A 256-bit string encoded in base 64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Account": {
        "properties": {
          "accountTier": {
            "$ref": "#/components/schemas/AccountTier"
          },
          "accountUsageLimits": {
            "$ref": "#/components/schemas/AccountUsageLimits"
          },
          "apiSecurity": {
            "$ref": "#/components/schemas/ApiSecurity"
          },
          "createdTime": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "lastAction": {
            "$ref": "#/components/schemas/AuditLog"
          },
          "lastKubernetesActive": {
            "format": "date-time",
            "type": "string"
          },
          "lastSeen": {
            "format": "date-time",
            "type": "string"
          },
          "lastServerlessActive": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "permissionsMode": {
            "$ref": "#/components/schemas/PermissionsMode"
          },
          "serverlessSecurity": {
            "$ref": "#/components/schemas/ServerlessSecurity"
          },
          "status": {
            "enum": [
              "ENABLED",
              "DISABLED"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "permissionsMode",
          "accountTier"
        ],
        "type": "object"
      },
      "AccountTier": {
        "description": "K8s security product tier",
        "enum": [
          "REVEAL",
          "CONNECT",
          "TRIAL",
          "PRO"
        ],
        "type": "string"
      },
      "AccountUsageLimits": {
        "properties": {
          "maxClusters": {
            "type": "integer"
          },
          "maxNodes": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ActionDuration": {
        "properties": {
          "duration": {
            "type": "integer"
          },
          "timeUnit": {
            "enum": [
              "MINUTES",
              "HOURS",
              "DAYS"
            ],
            "type": "string"
          }
        },
        "required": [
          "duration",
          "timeUnit"
        ],
        "type": "object"
      },
      "AddAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/User"
          },
          {
            "properties": {
              "account": {
                "$ref": "#/components/schemas/Account"
              }
            },
            "type": "object"
          }
        ]
      },
      "AdditionalInfo": {
        "properties": {
          "affected_endpoints": {
            "items": {
              "type": "string"
            },
            "title": "Affected Endpoints",
            "type": "array"
          },
          "affected_spec_paths": {
            "items": {
              "type": "string"
            },
            "title": "Affected Spec Paths",
            "type": "array"
          },
          "entries": {
            "additionalProperties": {
              "type": "string"
            },
            "title": "Dictionary entries",
            "type": "object"
          }
        },
        "title": "AdditionalInfo",
        "type": "object"
      },
      "AdminAddConnectionTelemetry": {
        "description": "Configuration for the forcefully created Secure Application connection telemetry",
        "properties": {
          "endTime": {
            "format": "date-time",
            "type": "string"
          },
          "sourceAgentId": {
            "type": "string"
          },
          "sourcePid": {
            "type": "integer"
          },
          "startTime": {
            "format": "date-time",
            "type": "string"
          },
          "targetAgentId": {
            "type": "string"
          },
          "targetPid": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AdminAuditLog": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditLog"
          },
          {
            "properties": {
              "account": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "description": "Single telemetry entry",
        "type": "object"
      },
      "Agent": {
        "properties": {
          "info": {
            "$ref": "#/components/schemas/AgentInfo"
          },
          "environments": {
            "items": {
              "$ref": "#/components/schemas/AgentEnvironment"
            },
            "type": "array"
          },
          "gatherInformationState": {
            "enum": [
              "NEW",
              "PROCESSING",
              "DONE",
              "FAILED",
              "NONE"
            ],
            "type": "string"
          },
          "id": {
            "description": "sha2 of the content of the public key pem. The fingerprint format is xx:xx:xx...",
            "format": "fingerprint",
            "readOnly": true,
            "type": "string"
          },
          "instance": {
            "$ref": "#/components/schemas/AgentInstance"
          },
          "isUpdateEnabled": {
            "type": "boolean"
          },
          "kubernetesVersion": {
            "type": "string"
          },
          "nodes": {
            "type": "integer"
          },
          "sharedSecret": {
            "type": "string"
          },
          "statusCodes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "$ref": "#/components/schemas/AgentType"
          },
          "vcpus": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AgentEnvironment": {
        "properties": {
          "id": {
            "description": "The id of the environment on which the agent is running",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "The name of the environment on which the agent is running",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AgentInfo": {
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "lastActive": {
            "description": "The last time that the agent sent telemetries",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "indicate whether the agent is active (sent logs in the last 5 minutes) or not",
            "enum": [
              "PENDING_INSTALL",
              "ACTIVE",
              "INACTIVE",
              "STOPPED",
              "TERMINATED",
              "UNKNOWN"
            ],
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AgentInstance": {
        "properties": {
          "id": {
            "description": "The id of the instance on which the agent is running",
            "type": "string"
          },
          "name": {
            "description": "The name of the instance on which the agent is running",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AgentShouldSendMetrics": {
        "properties": {
          "shouldSendMetrics": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AgentStatusUpdate": {
        "properties": {
          "active": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AgentType": {
        "description": "The type of agent. Possible values are instance agent or k8s agent.",
        "enum": [
          "AWS_INSTANCE",
          "KUBERNETES",
          "EXPANSION"
        ],
        "type": "string"
      },
      "Agents": {
        "properties": {
          "agents": {
            "items": {
              "$ref": "#/components/schemas/Agent"
            },
            "type": "array"
          },
          "latestAgentVersion": {
            "type": "string"
          },
          "latestIstioVersion": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AgentsUpdateSettings": {
        "properties": {
          "isManualUpdate": {
            "type": "boolean"
          },
          "isUpdateNowEnabled": {
            "type": "boolean"
          },
          "latestAgentVersion": {
            "readOnly": true,
            "type": "string"
          },
          "latestIstioVersion": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AllowedHostPath": {
        "properties": {
          "pathPrefix": {
            "type": "string"
          },
          "readOnly": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AllowedInjectedSidecars": {
        "properties": {
          "images": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "$ref": "#/components/schemas/AllowedInjectedSidecarsType"
          }
        },
        "type": "object"
      },
      "AllowedInjectedSidecarsType": {
        "enum": [
          "ALLOW_ALL",
          "NONE",
          "ALLOW_SPECIFIC"
        ],
        "type": "string"
      },
      "AllowedProcMountType": {
        "enum": [
          "Default",
          "Unmasked"
        ],
        "type": "string"
      },
      "AnyClusterIgnoredRisk": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IgnoredRisk"
          },
          {
            "type": "object"
          }
        ],
        "type": "object"
      },
      "AnyConnectionRulePart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectionRulePart"
          }
        ]
      },
      "AnyEnvironmentIgnoredRisk": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IgnoredRisk"
          },
          {
            "type": "object"
          }
        ],
        "type": "object"
      },
      "AnyEnvironmentRuleType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EnvironmentRuleType"
          }
        ]
      },
      "AnyRuleType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkloadRuleScopeType"
          }
        ]
      },
      "ApiAvgVulnerabilityDuration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/ConditionNumberComparison"
              },
              "value": {
                "title": "Value",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiAvgVulnerabilityDurationIsNone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiCatalogItem": {
        "properties": {
          "classification": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "compliance": {
            "type": "boolean"
          },
          "grade": {
            "$ref": "#/components/schemas/ApiSecurityPolicyGrade"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiCatalogItemApplicationInfo": {
        "properties": {
          "owaspVulnerabilities": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "preformance": {
            "type": "integer"
          },
          "uptime": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiCatalogItemInfo": {
        "properties": {
          "apiPolicyName": {
            "type": "string"
          },
          "application": {
            "$ref": "#/components/schemas/ApiCatalogItemApplicationInfo"
          },
          "compliance": {
            "type": "boolean"
          },
          "grade": {
            "$ref": "#/components/schemas/ApiSecurityPolicyGrade"
          },
          "lastUpdated": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "network": {
            "$ref": "#/components/schemas/ApiCatalogItemNetworkInfo"
          },
          "platform": {
            "$ref": "#/components/schemas/ApiCatalogItemPlatformInfo"
          },
          "provider": {
            "$ref": "#/components/schemas/ApiCatalogItemProviderInfo"
          }
        },
        "type": "object"
      },
      "ApiCatalogItemNetworkInfo": {
        "properties": {
          "location": {
            "type": "string"
          },
          "reachability": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiCatalogItemPlatformInfo": {
        "properties": {
          "csp": {
            "type": "string"
          },
          "cves": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tls": {
            "type": "integer"
          },
          "uptime": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiCatalogItemProviderInfo": {
        "properties": {
          "classification": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "location": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "reputation": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiClassification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/ConditionListComparison"
              },
              "value": {
                "items": {
                  "type": "string"
                },
                "title": "Value",
                "type": "array"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiClassificationIsNone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiEndpoint": {
        "properties": {
          "host": {
            "description": "IP v4/v6 address of the API endpoint",
            "title": "Host",
            "type": "string"
          },
          "api_id": {
            "description": "API service this endpoint belongs to. Empty if still undetermined.",
            "format": "uuid",
            "title": "Api Id",
            "type": "string"
          },
          "compliance": {
            "$ref": "#/components/schemas/ApiServiceCompliance_Simple"
          },
          "hostname": {
            "description": "Hostname of the API endpoint if known",
            "title": "Hostname",
            "type": "string"
          },
          "identifier": {
            "description": "Unique id of the Endpoint",
            "format": "uuid",
            "title": "id",
            "type": "string"
          },
          "location": {
            "title": "Location",
            "type": "string"
          },
          "port": {
            "description": "Port of the API endpoint",
            "maximum": 65535,
            "minimum": 0,
            "title": "Port",
            "type": "integer"
          },
          "proto": {
            "$ref": "#/components/schemas/IpProtoEnum"
          },
          "scheme": {
            "$ref": "#/components/schemas/UrlSchemeEnum"
          }
        },
        "required": [
          "proto",
          "host",
          "port",
          "identifier"
        ],
        "title": "ApiEndpoint",
        "type": "object"
      },
      "ApiEndpointScoreGrade": {
        "properties": {
          "additional_info": {
            "items": {
              "$ref": "#/components/schemas/AdditionalInfo"
            },
            "title": "Additional Info",
            "type": "array"
          },
          "categories": {
            "additionalProperties": {
              "$ref": "#/components/schemas/CategoryScoreGrade"
            },
            "title": "Categories",
            "type": "object"
          },
          "confidence": {
            "$ref": "#/components/schemas/RiskConfidenceEnum"
          },
          "counters_history": {
            "$ref": "#/components/schemas/CountersHistory"
          },
          "endpoint": {
            "$ref": "#/components/schemas/ApiEndpoint"
          },
          "endpoint_id": {
            "format": "uuid",
            "type": "string"
          },
          "risk": {
            "$ref": "#/components/schemas/ApiSecurityRiskSeverity"
          },
          "scorer_version": {
            "title": "Scorer Version",
            "type": "integer"
          },
          "trend": {
            "$ref": "#/components/schemas/RiskTrendEnum"
          }
        },
        "required": [
          "scorer_version",
          "risk",
          "categories",
          "endpoint"
        ],
        "title": "ApiEndpointScoreGrade",
        "type": "object"
      },
      "ApiEventPathAndMethods": {
        "properties": {
          "methods": {
            "items": {
              "$ref": "#/components/schemas/HttpMethod"
            },
            "type": "array"
          },
          "path": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiFuzzingTestConfiguration": {
        "properties": {
          "auth": {
            "$ref": "#/components/schemas/AuthorizationScheme"
          },
          "depth": {
            "$ref": "#/components/schemas/TestInputDepthEnum"
          }
        },
        "required": [
          "auth",
          "depth"
        ],
        "type": "object"
      },
      "ApiName": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/ConditionListComparison"
              },
              "value": {
                "title": "Value",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiOrConditionsBase": {
        "discriminator": {
          "propertyName": "attribute"
        },
        "properties": {
          "attribute": {
            "enum": [
              "ApiRisk",
              "ApiRiskTrend",
              "ApiRiskTrendIsNone",
              "ApiRiskConfidence",
              "ApiRiskConfidenceIsNone",
              "ApiAvgVulnerabilityDuration",
              "ApiAvgVulnerabilityDurationIsNone",
              "ApiName",
              "ApiClassification",
              "ApiClassificationIsNone"
            ],
            "type": "string"
          }
        },
        "required": [
          "attribute"
        ],
        "type": "object"
      },
      "ApiPolicyProfile": {
        "properties": {
          "compliant_on_missing_score": {
            "title": "Compliant On Missing Score",
            "type": "boolean"
          },
          "conditions": {
            "description": "List conditions defined in this policy profile. All conditions are in AND.",
            "items": {
              "$ref": "#/components/schemas/ApiPolicyProfileCondition"
            },
            "title": "Conditions",
            "type": "array"
          },
          "name": {
            "description": "Name of the policy profile",
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "name",
          "conditions",
          "compliant_on_missing_score"
        ],
        "title": "ApiPolicyProfile",
        "type": "object"
      },
      "ApiPolicyProfileCondition": {
        "properties": {
          "api_or_conditions": {
            "items": {
              "$ref": "#/components/schemas/ApiOrConditionsBase"
            },
            "title": "Api Or Conditions",
            "type": "array"
          },
          "endpoint_or_conditions": {
            "items": {
              "$ref": "#/components/schemas/EndpointOrConditionsBase"
            },
            "title": "Endpoint Or Conditions",
            "type": "array"
          },
          "provider_or_conditions": {
            "items": {
              "$ref": "#/components/schemas/ProviderOrConditionsBase"
            },
            "title": "Provider Or Conditions",
            "type": "array"
          }
        },
        "title": "ApiPolicyProfileCondition",
        "type": "object"
      },
      "ApiProviderScoreGrade": {
        "properties": {
          "additional_info": {
            "items": {
              "$ref": "#/components/schemas/AdditionalInfo"
            },
            "title": "Additional Info",
            "type": "array"
          },
          "avg_vulnerability_duration": {
            "title": "Avg Vulnerability Duration",
            "type": "integer"
          },
          "categories": {
            "additionalProperties": {
              "$ref": "#/components/schemas/CategoryScoreGradeNoFindings"
            },
            "title": "Categories",
            "type": "object"
          },
          "confidence": {
            "$ref": "#/components/schemas/RiskConfidenceEnum"
          },
          "curated": {
            "title": "Curated",
            "type": "boolean"
          },
          "last_finding_date": {
            "format": "date-time",
            "title": "Last Finding Date",
            "type": "string"
          },
          "last_vulnerability_date": {
            "format": "date-time",
            "title": "Last Vulnerability Date",
            "type": "string"
          },
          "provider": {
            "$ref": "#/components/schemas/ApiProvider_Base"
          },
          "provider_id": {
            "format": "uuid",
            "type": "string"
          },
          "risk": {
            "$ref": "#/components/schemas/ApiSecurityRiskSeverity"
          },
          "scorer_version": {
            "title": "Scorer Version",
            "type": "integer"
          },
          "trend": {
            "$ref": "#/components/schemas/RiskTrendEnum"
          }
        },
        "required": [
          "scorer_version",
          "risk",
          "categories",
          "provider",
          "curated"
        ],
        "title": "ApiProviderScoreGrade",
        "type": "object"
      },
      "ApiProvider_Base": {
        "properties": {
          "identifier": {
            "description": "Unique id of the subject API as assigned by Crankshaft",
            "format": "uuid",
            "title": "id",
            "type": "string"
          },
          "industry": {
            "title": "Industry",
            "type": "string"
          },
          "location": {
            "title": "Location",
            "type": "string"
          },
          "name": {
            "description": "Name of the provider, typically an FQDN",
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "identifier",
          "name"
        ],
        "title": "ApiProvider_Base",
        "type": "object"
      },
      "ApiReconstructedSpec": {
        "properties": {
          "OASVersion": {
            "$ref": "#/components/schemas/OASVersion"
          },
          "reviewId": {
            "readOnly": true,
            "type": "string"
          },
          "reviewPathItems": {
            "items": {
              "$ref": "#/components/schemas/ReviewPathItem",
              "description": "The suggested path items"
            },
            "type": "array"
          }
        },
        "required": [
          "OASVersion",
          "reviewPathItems"
        ],
        "type": "object"
      },
      "ApiReconstructionRequest": {
        "properties": {
          "clusterId": {
            "format": "uuid",
            "type": "string"
          },
          "learningDuration": {
            "format": "iso8601",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiReconstructionResponse": {
        "properties": {
          "response": {
            "properties": {
              "learningDurationLeft": {
                "format": "iso8601",
                "type": "string"
              },
              "messages": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "status": {
                "$ref": "#/components/schemas/ApiReconstructionStatus"
              }
            },
            "type": "object"
          },
          "type": {
            "$ref": "#/components/schemas/ApiReconstructionType"
          }
        },
        "type": "object"
      },
      "ApiReconstructionStatus": {
        "description": "Status of an ongoing API reconstruction phase.",
        "enum": [
          "NONE",
          "IN_PROGRESS",
          "ERROR",
          "DONE",
          "ABORTING"
        ],
        "type": "string"
      },
      "ApiReconstructionType": {
        "description": "Status of an ongoing API reconstruction.",
        "enum": [
          "LEARN",
          "APPROVE"
        ],
        "type": "string"
      },
      "ApiResponse": {
        "description": "An object that is return in all cases of failures.",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiRisk": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/ConditionNumberComparison"
              },
              "value": {
                "$ref": "#/components/schemas/RiskSeverity"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiRiskConfidence": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/ConditionEnumComparator"
              },
              "value": {
                "$ref": "#/components/schemas/RiskConfidenceEnum"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiRiskConfidenceIsNone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiRiskInfo": {
        "properties": {
          "serviceId": {
            "format": "uuid",
            "type": "string"
          },
          "serviceName": {
            "type": "string"
          },
          "serviceRisk": {
            "enum": [
              "CRITICAL",
              "HIGH",
              "MEDIUM",
              "LOW"
            ],
            "type": "string"
          },
          "serviceType": {
            "$ref": "#/components/schemas/ApiServiceType"
          }
        },
        "type": "object"
      },
      "ApiRiskTrend": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/ConditionEnumComparator"
              },
              "value": {
                "$ref": "#/components/schemas/RiskTrendEnum"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiRiskTrendIsNone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecRiskFindingsTrendWidget": {
        "properties": {
          "critical": {
            "items": {
              "$ref": "#/components/schemas/GraphNumberPoint"
            },
            "type": "array"
          },
          "high": {
            "items": {
              "$ref": "#/components/schemas/GraphNumberPoint"
            },
            "type": "array"
          },
          "low": {
            "items": {
              "$ref": "#/components/schemas/GraphNumberPoint"
            },
            "type": "array"
          },
          "medium": {
            "items": {
              "$ref": "#/components/schemas/GraphNumberPoint"
            },
            "type": "array"
          },
          "noKnownRisk": {
            "items": {
              "$ref": "#/components/schemas/GraphNumberPoint"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiSecRiskFindingsWidget": {
        "properties": {
          "critical": {
            "minimum": 0,
            "type": "integer"
          },
          "high": {
            "minimum": 0,
            "type": "integer"
          },
          "low": {
            "minimum": 0,
            "type": "integer"
          },
          "medium": {
            "minimum": 0,
            "type": "integer"
          },
          "noKnownRisk": {
            "minimum": 0,
            "type": "integer"
          },
          "total": {
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiSecTopRiskyApi": {
        "properties": {
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ApiServiceType"
          },
          "vulnerabilitiesSummary": {
            "$ref": "#/components/schemas/VulnerabilitiesSummary"
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ],
        "type": "object"
      },
      "ApiSecTopRiskyApisWidget": {
        "properties": {
          "apis": {
            "items": {
              "$ref": "#/components/schemas/ApiSecTopRiskyApi"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiSecTopRiskyFinding": {
        "properties": {
          "category": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "risk": {
            "$ref": "#/components/schemas/ApiSecurityRisk"
          }
        },
        "required": [
          "id",
          "name",
          "category",
          "risk"
        ],
        "type": "object"
      },
      "ApiSecTopRiskyFindingsWidget": {
        "properties": {
          "findings": {
            "items": {
              "$ref": "#/components/schemas/ApiSecTopRiskyFinding"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiSecurity": {
        "description": "Mode of the API security",
        "enum": [
          "ENABLED",
          "DISABLED"
        ],
        "type": "string"
      },
      "ApiSecurityApi": {
        "properties": {
          "name": {
            "description": "API name, usually an FQDN as determined by crankshaft, it can be logical or can correspond to one of the endpoints where the API is reachable, i.e. api.webex.com",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ApiSecurityApiStatus": {
        "description": "Api status enumeration.",
        "enum": [
          "PROCESSING",
          "VALID",
          "INVALID"
        ],
        "title": "ApiStatus",
        "type": "string"
      },
      "ApiSecurityAvgVulnerabilityDurationOperator": {
        "enum": [
          "EQUAL",
          "NOT_EQUAL",
          "LESS_THAN",
          "LESS_THAN_EQUAL",
          "GREATER_THAN",
          "GREATER_THAN_EQUAL",
          "IS_NONE"
        ],
        "type": "string"
      },
      "ApiSecurityCdPolicyElement": {
        "properties": {
          "apiSecurityProfile": {
            "description": "The allowed api security profile for the pipeline",
            "format": "uuid",
            "type": "string"
          },
          "enforcementOption": {
            "$ref": "#/components/schemas/EnforcementOption",
            "description": "The action that should be taken on the pipeline"
          }
        },
        "required": [
          "apiSecurityProfile",
          "enforcementOption"
        ],
        "type": "object"
      },
      "ApiSecurityConditionApiAvgVulnerabilityDuration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSecurityPolicyCondition"
          },
          {
            "properties": {
              "attribute": {
                "enum": [
                  "AVG_VULNERABILITY_DURATION"
                ],
                "type": "string"
              },
              "operator": {
                "$ref": "#/components/schemas/ApiSecurityAvgVulnerabilityDurationOperator"
              },
              "scope": {
                "enum": [
                  "API"
                ],
                "type": "string"
              },
              "values": {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              }
            },
            "required": [
              "scope",
              "attribute",
              "operator"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecurityConditionApiClassification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSecurityPolicyCondition"
          },
          {
            "properties": {
              "attribute": {
                "enum": [
                  "CLASSIFICATION"
                ],
                "type": "string"
              },
              "operator": {
                "enum": [
                  "EQUAL",
                  "NOT_EQUAL",
                  "IN",
                  "CONTAINS",
                  "IS_NONE"
                ],
                "type": "string"
              },
              "scope": {
                "enum": [
                  "API"
                ],
                "type": "string"
              },
              "values": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "scope",
              "attribute",
              "operator"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecurityConditionApiName": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSecurityPolicyCondition"
          },
          {
            "properties": {
              "attribute": {
                "enum": [
                  "NAME"
                ],
                "type": "string"
              },
              "operator": {
                "enum": [
                  "EQUAL",
                  "NOT_EQUAL",
                  "IN",
                  "CONTAINS"
                ],
                "type": "string"
              },
              "scope": {
                "enum": [
                  "API"
                ],
                "type": "string"
              },
              "values": {
                "items": {
                  "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.){2,}([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]){2,}$",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "scope",
              "attribute",
              "operator"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecurityConditionApiRisk": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSecurityPolicyCondition"
          },
          {
            "properties": {
              "attribute": {
                "enum": [
                  "RISK"
                ],
                "type": "string"
              },
              "operator": {
                "$ref": "#/components/schemas/ApiSecurityRiskOperator"
              },
              "scope": {
                "enum": [
                  "API"
                ],
                "type": "string"
              },
              "values": {
                "items": {
                  "$ref": "#/components/schemas/ApiSecurityRisk"
                },
                "type": "array"
              }
            },
            "required": [
              "scope",
              "attribute",
              "operator",
              "values"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecurityConditionApiRiskConfidence": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSecurityPolicyCondition"
          },
          {
            "properties": {
              "attribute": {
                "enum": [
                  "RISK_CONFIDENCE"
                ],
                "type": "string"
              },
              "operator": {
                "$ref": "#/components/schemas/ApiSecurityRiskConfidenceOperator"
              },
              "scope": {
                "enum": [
                  "API"
                ],
                "type": "string"
              },
              "values": {
                "items": {
                  "$ref": "#/components/schemas/ApiSecurityRiskConfidence"
                },
                "type": "array"
              }
            },
            "required": [
              "scope",
              "attribute",
              "operator"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecurityConditionApiRiskTrend": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSecurityPolicyCondition"
          },
          {
            "properties": {
              "attribute": {
                "enum": [
                  "RISK_TREND"
                ],
                "type": "string"
              },
              "operator": {
                "$ref": "#/components/schemas/ApiSecurityRiskTrendOperator"
              },
              "scope": {
                "enum": [
                  "API"
                ],
                "type": "string"
              },
              "values": {
                "items": {
                  "$ref": "#/components/schemas/ApiSecurityRiskTrend"
                },
                "type": "array"
              }
            },
            "required": [
              "scope",
              "attribute",
              "operator"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecurityConditionEndpointHostname": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSecurityPolicyCondition"
          },
          {
            "properties": {
              "attribute": {
                "enum": [
                  "HOSTNAME"
                ],
                "type": "string"
              },
              "operator": {
                "$ref": "#/components/schemas/ApiSecurityFqdnOperator"
              },
              "scope": {
                "enum": [
                  "ENDPOINT"
                ],
                "type": "string"
              },
              "values": {
                "items": {
                  "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.){2,}([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]){2,}$",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "scope",
              "attribute",
              "operator"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecurityConditionEndpointIpAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSecurityPolicyCondition"
          },
          {
            "properties": {
              "attribute": {
                "enum": [
                  "IP_ADDRESS"
                ],
                "type": "string"
              },
              "operator": {
                "enum": [
                  "BELONGS_TO"
                ],
                "type": "string"
              },
              "scope": {
                "enum": [
                  "ENDPOINT"
                ],
                "type": "string"
              },
              "values": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "scope",
              "attribute",
              "operator",
              "values"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecurityConditionEndpointLocation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSecurityPolicyCondition"
          },
          {
            "properties": {
              "attribute": {
                "enum": [
                  "LOCATION"
                ],
                "type": "string"
              },
              "operator": {
                "$ref": "#/components/schemas/ApiSecurityStringOperator"
              },
              "scope": {
                "enum": [
                  "ENDPOINT"
                ],
                "type": "string"
              },
              "values": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "scope",
              "attribute",
              "operator"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecurityConditionEndpointPort": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSecurityPolicyCondition"
          },
          {
            "properties": {
              "attribute": {
                "enum": [
                  "PORT"
                ],
                "type": "string"
              },
              "operator": {
                "enum": [
                  "EQUAL",
                  "NOT_EQUAL",
                  "LESS_THAN",
                  "LESS_THAN_EQUAL",
                  "GREATER_THAN",
                  "GREATER_THAN_EQUAL"
                ],
                "type": "string"
              },
              "scope": {
                "enum": [
                  "ENDPOINT"
                ],
                "type": "string"
              },
              "values": {
                "items": {
                  "format": "int32",
                  "maximum": 65535,
                  "minimum": 0,
                  "type": "integer"
                },
                "type": "array"
              }
            },
            "required": [
              "scope",
              "attribute",
              "operator",
              "values"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecurityConditionEndpointProtocol": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSecurityPolicyCondition"
          },
          {
            "properties": {
              "attribute": {
                "enum": [
                  "PROTOCOL"
                ],
                "type": "string"
              },
              "operator": {
                "enum": [
                  "EQUAL",
                  "NOT_EQUAL"
                ],
                "type": "string"
              },
              "scope": {
                "enum": [
                  "ENDPOINT"
                ],
                "type": "string"
              },
              "values": {
                "items": {
                  "$ref": "#/components/schemas/ApiSecurityProtocol"
                },
                "type": "array"
              }
            },
            "required": [
              "scope",
              "attribute",
              "operator",
              "values"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecurityConditionEndpointRisk": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSecurityPolicyCondition"
          },
          {
            "properties": {
              "attribute": {
                "enum": [
                  "RISK"
                ],
                "type": "string"
              },
              "operator": {
                "$ref": "#/components/schemas/ApiSecurityRiskOperator"
              },
              "scope": {
                "enum": [
                  "ENDPOINT"
                ],
                "type": "string"
              },
              "values": {
                "items": {
                  "$ref": "#/components/schemas/ApiSecurityRisk"
                },
                "type": "array"
              }
            },
            "required": [
              "scope",
              "attribute",
              "operator",
              "values"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecurityConditionEndpointRiskConfidence": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSecurityPolicyCondition"
          },
          {
            "properties": {
              "attribute": {
                "enum": [
                  "RISK_CONFIDENCE"
                ],
                "type": "string"
              },
              "operator": {
                "$ref": "#/components/schemas/ApiSecurityRiskConfidenceOperator"
              },
              "scope": {
                "enum": [
                  "ENDPOINT"
                ],
                "type": "string"
              },
              "values": {
                "items": {
                  "$ref": "#/components/schemas/ApiSecurityRiskConfidence"
                },
                "type": "array"
              }
            },
            "required": [
              "scope",
              "attribute",
              "operator"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecurityConditionEndpointRiskTrend": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSecurityPolicyCondition"
          },
          {
            "properties": {
              "attribute": {
                "enum": [
                  "RISK_TREND"
                ],
                "type": "string"
              },
              "operator": {
                "$ref": "#/components/schemas/ApiSecurityRiskTrendOperator",
                "type": "string"
              },
              "scope": {
                "enum": [
                  "ENDPOINT"
                ],
                "type": "string"
              },
              "values": {
                "items": {
                  "$ref": "#/components/schemas/ApiSecurityRiskTrend"
                },
                "type": "array"
              }
            },
            "required": [
              "scope",
              "attribute",
              "operator"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecurityConditionEndpointScheme": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSecurityPolicyCondition"
          },
          {
            "properties": {
              "attribute": {
                "enum": [
                  "SCHEME"
                ],
                "type": "string"
              },
              "operator": {
                "enum": [
                  "EQUAL",
                  "NOT_EQUAL",
                  "IS_NONE"
                ],
                "type": "string"
              },
              "scope": {
                "enum": [
                  "ENDPOINT"
                ],
                "type": "string"
              },
              "values": {
                "items": {
                  "$ref": "#/components/schemas/ApiSecurityScheme"
                },
                "type": "array"
              }
            },
            "required": [
              "scope",
              "attribute",
              "operator"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecurityConditionProviderAvgVulnerabilityDuration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSecurityPolicyCondition"
          },
          {
            "properties": {
              "attribute": {
                "enum": [
                  "AVG_VULNERABILITY_DURATION"
                ],
                "type": "string"
              },
              "operator": {
                "$ref": "#/components/schemas/ApiSecurityAvgVulnerabilityDurationOperator"
              },
              "scope": {
                "enum": [
                  "PROVIDER"
                ],
                "type": "string"
              },
              "values": {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              }
            },
            "required": [
              "scope",
              "attribute",
              "operator"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecurityConditionProviderIndustry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSecurityPolicyCondition"
          },
          {
            "properties": {
              "attribute": {
                "enum": [
                  "INDUSTRY"
                ],
                "type": "string"
              },
              "operator": {
                "$ref": "#/components/schemas/ApiSecurityStringOperator"
              },
              "scope": {
                "enum": [
                  "PROVIDER"
                ],
                "type": "string"
              },
              "values": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "scope",
              "attribute",
              "operator"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecurityConditionProviderLocation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSecurityPolicyCondition"
          },
          {
            "properties": {
              "attribute": {
                "enum": [
                  "LOCATION"
                ],
                "type": "string"
              },
              "operator": {
                "$ref": "#/components/schemas/ApiSecurityStringOperator"
              },
              "scope": {
                "enum": [
                  "PROVIDER"
                ],
                "type": "string"
              },
              "values": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "scope",
              "attribute",
              "operator"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecurityConditionProviderName": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSecurityPolicyCondition"
          },
          {
            "properties": {
              "attribute": {
                "enum": [
                  "NAME"
                ],
                "type": "string"
              },
              "operator": {
                "$ref": "#/components/schemas/ApiSecurityFqdnOperator"
              },
              "scope": {
                "enum": [
                  "PROVIDER"
                ],
                "type": "string"
              },
              "values": {
                "items": {
                  "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.){2,}([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]){2,}$",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "scope",
              "attribute",
              "operator",
              "values"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecurityConditionProviderRisk": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSecurityPolicyCondition"
          },
          {
            "properties": {
              "attribute": {
                "enum": [
                  "RISK"
                ],
                "type": "string"
              },
              "operator": {
                "$ref": "#/components/schemas/ApiSecurityRiskOperator"
              },
              "scope": {
                "enum": [
                  "PROVIDER"
                ],
                "type": "string"
              },
              "values": {
                "items": {
                  "$ref": "#/components/schemas/ApiSecurityRisk"
                },
                "type": "array"
              }
            },
            "required": [
              "scope",
              "attribute",
              "operator",
              "values"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecurityConditionProviderRiskConfidence": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSecurityPolicyCondition"
          },
          {
            "properties": {
              "attribute": {
                "enum": [
                  "RISK_CONFIDENCE"
                ],
                "type": "string"
              },
              "operator": {
                "$ref": "#/components/schemas/ApiSecurityRiskConfidenceOperator"
              },
              "scope": {
                "enum": [
                  "PROVIDER"
                ],
                "type": "string"
              },
              "values": {
                "items": {
                  "$ref": "#/components/schemas/ApiSecurityRiskConfidence"
                },
                "type": "array"
              }
            },
            "required": [
              "scope",
              "attribute",
              "operator"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecurityConditionProviderRiskTrend": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSecurityPolicyCondition"
          },
          {
            "properties": {
              "attribute": {
                "enum": [
                  "RISK_TREND"
                ],
                "type": "string"
              },
              "operator": {
                "$ref": "#/components/schemas/ApiSecurityRiskTrendOperator"
              },
              "scope": {
                "enum": [
                  "PROVIDER"
                ],
                "type": "string"
              },
              "values": {
                "items": {
                  "$ref": "#/components/schemas/ApiSecurityRiskTrend"
                },
                "type": "array"
              }
            },
            "required": [
              "scope",
              "attribute",
              "operator"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiSecurityFqdnOperator": {
        "enum": [
          "EQUAL",
          "NOT_EQUAL",
          "IN",
          "CONTAINS",
          "IS_NONE"
        ],
        "type": "string"
      },
      "ApiSecurityPolicy": {
        "properties": {
          "categoryConditions": {
            "$ref": "#/components/schemas/ApiSecurityPolicyCategoryConditions"
          },
          "description": {
            "type": "string"
          },
          "globalCondition": {
            "$ref": "#/components/schemas/ApiSecurityPolicyGlobalCondition"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ApiSecurityPolicyCategoryCondition": {
        "properties": {
          "category": {
            "type": "string"
          },
          "highestAcceptedSeverity": {
            "$ref": "#/components/schemas/ApiSecurityPolicyRiskSeverity"
          }
        },
        "required": [
          "category",
          "highestAcceptedSeverity"
        ],
        "type": "object"
      },
      "ApiSecurityPolicyCategoryConditions": {
        "properties": {
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/ApiSecurityPolicyCategoryCondition"
            },
            "type": "array"
          }
        },
        "required": [
          "conditions"
        ],
        "type": "object"
      },
      "ApiSecurityPolicyCondition": {
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "type": {
            "enum": [
              "ApiSecurityConditionApiRisk",
              "ApiSecurityConditionApiRiskTrend",
              "ApiSecurityConditionApiRiskConfidence",
              "ApiSecurityConditionApiName",
              "ApiSecurityConditionApiClassification",
              "ApiSecurityConditionApiAvgVulnerabilityDuration",
              "ApiSecurityConditionProviderRisk",
              "ApiSecurityConditionProviderRiskTrend",
              "ApiSecurityConditionProviderRiskConfidence",
              "ApiSecurityConditionProviderName",
              "ApiSecurityConditionProviderLocation",
              "ApiSecurityConditionProviderIndustry",
              "ApiSecurityConditionProviderAvgVulnerabilityDuration",
              "ApiSecurityConditionEndpointIpAddress",
              "ApiSecurityConditionEndpointProtocol",
              "ApiSecurityConditionEndpointPort",
              "ApiSecurityConditionEndpointScheme",
              "ApiSecurityConditionEndpointHostname",
              "ApiSecurityConditionEndpointLocation",
              "ApiSecurityConditionEndpointRisk",
              "ApiSecurityConditionEndpointRiskTrend",
              "ApiSecurityConditionEndpointRiskConfidence"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "ApiSecurityPolicyDeleteDependencies": {
        "properties": {
          "appRules": {
            "items": {
              "$ref": "#/components/schemas/deleteDependencyElement"
            },
            "type": "array"
          },
          "cdPolicy": {
            "items": {
              "$ref": "#/components/schemas/deleteDependencyElement"
            },
            "type": "array"
          },
          "connectionRules": {
            "items": {
              "$ref": "#/components/schemas/deleteDependencyElement"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiSecurityPolicyGlobalCondition": {
        "properties": {
          "highestAcceptedSeverity": {
            "$ref": "#/components/schemas/ApiSecurityPolicyRiskSeverity"
          }
        },
        "required": [
          "highestAcceptedSeverity"
        ],
        "type": "object"
      },
      "ApiSecurityPolicyGrade": {
        "enum": [
          "A",
          "B",
          "C",
          "D",
          "E",
          "F"
        ],
        "type": "string"
      },
      "ApiSecurityPolicyGradeParam": {
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/ApiSecurityPolicyNumericOperator"
          },
          "value": {
            "$ref": "#/components/schemas/ApiSecurityPolicyGrade"
          }
        },
        "required": [
          "operator",
          "value"
        ],
        "type": "object"
      },
      "ApiSecurityPolicyListOperator": {
        "enum": [
          "IN"
        ],
        "type": "string"
      },
      "ApiSecurityPolicyListParam": {
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/ApiSecurityPolicyListOperator"
          },
          "values": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "operator",
          "values"
        ],
        "type": "object"
      },
      "ApiSecurityPolicyNumericOperator": {
        "enum": [
          "EQUAL",
          "GREATER_THAN",
          "GREATER_EQUAL_THAN",
          "LESS_THAN",
          "LESS_EQUAL_THAN"
        ],
        "type": "string"
      },
      "ApiSecurityPolicyNumericParam": {
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/ApiSecurityPolicyNumericOperator"
          },
          "value": {
            "type": "integer"
          }
        },
        "required": [
          "operator",
          "value"
        ],
        "type": "object"
      },
      "ApiSecurityPolicyRiskSeverity": {
        "enum": [
          "NO_RISK",
          "LOW",
          "MEDIUM",
          "HIGH",
          "CRITICAL"
        ],
        "title": "ApiSecurityPolicyRiskSeverity",
        "type": "string"
      },
      "ApiSecurityProtocol": {
        "enum": [
          "TCP",
          "UDP"
        ],
        "type": "string"
      },
      "ApiSecurityRisk": {
        "enum": [
          "UNKNOWN",
          "NEUTRAL",
          "LOW",
          "MEDIUM",
          "HIGH",
          "CRITICAL",
          "NO_RISK"
        ],
        "type": "string"
      },
      "ApiSecurityRiskConfidence": {
        "enum": [
          "LOW",
          "MEDIUM",
          "HIGH"
        ],
        "type": "string"
      },
      "ApiSecurityRiskConfidenceOperator": {
        "enum": [
          "EQUAL",
          "NOT_EQUAL",
          "IS_NONE"
        ],
        "type": "string"
      },
      "ApiSecurityRiskOperator": {
        "enum": [
          "EQUAL",
          "NOT_EQUAL",
          "LESS_THAN",
          "LESS_THAN_EQUAL",
          "GREATER_THAN",
          "GREATER_THAN_EQUAL"
        ],
        "type": "string"
      },
      "ApiSecurityRiskSeverity": {
        "description": "An `enum`eration.",
        "enum": [
          "NO_RISK",
          "UNKNOWN",
          "NEUTRAL",
          "LOW",
          "MEDIUM",
          "HIGH",
          "CRITICAL"
        ],
        "title": "RiskSeverity",
        "type": "string"
      },
      "ApiSecurityRiskTrend": {
        "enum": [
          "DEGRADING",
          "STABLE",
          "IMPROVING"
        ],
        "type": "string"
      },
      "ApiSecurityRiskTrendOperator": {
        "enum": [
          "EQUAL",
          "NOT_EQUAL",
          "IS_NONE"
        ],
        "type": "string"
      },
      "ApiSecurityScheme": {
        "enum": [
          "HTTP",
          "HTTPS"
        ],
        "type": "string"
      },
      "ApiSecurityStringOperator": {
        "enum": [
          "EQUAL",
          "NOT_EQUAL",
          "IS_NONE"
        ],
        "type": "string"
      },
      "ApiSecurityValidation": {
        "description": "When the rule action is ALLOW, onViolationAction is mandatory",
        "properties": {
          "apiSecurityPolicyId": {
            "format": "uuid",
            "type": "string"
          },
          "onViolationAction": {
            "$ref": "#/components/schemas/OnViolationAction"
          }
        },
        "required": [
          "onViolationAction",
          "apiSecurityPolicyId"
        ],
        "type": "object"
      },
      "ApiServiceBase": {
        "properties": {
          "clientWorkloads": {
            "items": {
              "$ref": "#/components/schemas/ApiServiceClientWorkload"
            },
            "type": "array"
          },
          "compliance": {
            "$ref": "#/components/schemas/ApiServiceCompliance_Simple"
          },
          "creation_timestamp": {
            "format": "date-time",
            "title": "Timestamp",
            "type": "string"
          },
          "description": {
            "description": "Textual description of the Service",
            "title": "Description",
            "type": "string"
          },
          "gatewayInfo": {
            "$ref": "#/components/schemas/Gateway"
          },
          "identifier": {
            "description": "Unique identifier of the subject API as assigned by Crankshaft",
            "format": "uuid",
            "title": "Identifier",
            "type": "string"
          },
          "last_update": {
            "format": "date-time",
            "title": "Last Update",
            "type": "string"
          },
          "link_doc": {
            "description": "Location of the documentation. This can be an URL for example",
            "title": "Link Doc",
            "type": "string"
          },
          "name": {
            "description": "API name (for external) or destination workload (for internal)",
            "title": "Name",
            "type": "string"
          },
          "openapi_spec_availablity": {
            "$ref": "#/components/schemas/OpenApiSpecAvailability",
            "description": "Indicates specification status",
            "title": "Openapi Spec Avilability"
          },
          "risk": {
            "$ref": "#/components/schemas/ApiSecurityRiskSeverity"
          },
          "score": {
            "$ref": "#/components/schemas/ApiServiceScore"
          },
          "status": {
            "$ref": "#/components/schemas/ApiSecurityApiStatus"
          },
          "status_description": {
            "type": "string"
          },
          "vulnerabilitiesSummary": {
            "$ref": "#/components/schemas/VulnerabilitiesSummary"
          }
        },
        "required": [
          "identifier",
          "name"
        ],
        "title": "ApiServiceBase",
        "type": "object"
      },
      "ApiServiceBflaClientInfo": {
        "properties": {
          "external": {
            "default": false,
            "type": "boolean"
          },
          "identifier": {
            "format": "uuid",
            "type": "string"
          },
          "isLegitimate": {
            "default": false,
            "type": "boolean"
          },
          "lastObserved": {
            "format": "date-time",
            "type": "string"
          },
          "lastStatusCode": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "principles": {
            "items": {
              "$ref": "#/components/schemas/ApiServiceBflaPrincipleInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "isLegitimate"
        ],
        "type": "object"
      },
      "ApiServiceBflaInfo": {
        "properties": {
          "tags": {
            "items": {
              "$ref": "#/components/schemas/ApiServiceBflaTagInfo"
            },
            "type": "array"
          },
          "endTime": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ApiServiceBflaInfoStatus"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "ApiServiceBflaInfoStatus": {
        "enum": [
          "NO_SPEC",
          "READY",
          "IN_PROGRESS_LEARNING",
          "IN_PROGRESS_DETECTION"
        ],
        "title": "ApiServiceBflaInfoStatus",
        "type": "string"
      },
      "ApiServiceBflaPathInfo": {
        "properties": {
          "clients": {
            "items": {
              "$ref": "#/components/schemas/ApiServiceBflaClientInfo"
            },
            "type": "array"
          },
          "isLegitimate": {
            "default": false,
            "type": "boolean"
          },
          "method": {
            "$ref": "#/components/schemas/HttpMethod"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "path",
          "method",
          "isLegitimate"
        ],
        "type": "object"
      },
      "ApiServiceBflaPrincipleInfo": {
        "properties": {
          "ip": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "principleType": {
            "type": "string"
          }
        },
        "required": [
          "principleType",
          "name",
          "ip"
        ],
        "type": "object"
      },
      "ApiServiceBflaTagInfo": {
        "properties": {
          "paths": {
            "items": {
              "$ref": "#/components/schemas/ApiServiceBflaPathInfo"
            },
            "type": "array"
          },
          "isLegitimate": {
            "default": false,
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "isLegitimate",
          "paths"
        ],
        "type": "object"
      },
      "ApiServiceClientWorkload": {
        "properties": {
          "cluster": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "workloadName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiServiceCompliance": {
        "properties": {
          "compliant": {
            "title": "Compliant",
            "type": "boolean"
          }
        },
        "required": [
          "compliant"
        ],
        "title": "ApiServiceCompliance",
        "type": "object"
      },
      "ApiServiceCompliance_Simple": {
        "properties": {
          "compliant": {
            "title": "Compliant",
            "type": "boolean"
          },
          "profilescompliance": {
            "items": {
              "$ref": "#/components/schemas/ApiServiceProfileCompliance_Simple"
            },
            "title": "Profilescompliance",
            "type": "array"
          }
        },
        "required": [
          "compliant",
          "profilescompliance"
        ],
        "title": "ApiServiceCompliance_Simple",
        "type": "object"
      },
      "ApiServiceConnectionRulePart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectionRulePart"
          },
          {
            "properties": {
              "api": {
                "format": "uuid",
                "type": "string"
              },
              "type": {
                "$ref": "#/components/schemas/ApiServiceType"
              }
            },
            "required": [
              "type",
              "api"
            ],
            "type": "object"
          }
        ]
      },
      "ApiServiceDeleteDependencies": {
        "properties": {
          "connectionRules": {
            "items": {
              "$ref": "#/components/schemas/deleteDependencyElement"
            },
            "type": "array"
          },
          "tokens": {
            "items": {
              "$ref": "#/components/schemas/deleteDependencyElement"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiServiceDrillDownBase": {
        "properties": {
          "clientWorkloads": {
            "items": {
              "$ref": "#/components/schemas/ApiServiceClientWorkload"
            },
            "type": "array"
          },
          "compliance": {
            "$ref": "#/components/schemas/ApiServiceCompliance"
          },
          "creation_timestamp": {
            "format": "date-time",
            "title": "Timestamp",
            "type": "string"
          },
          "description": {
            "description": "Textual description of the Service",
            "title": "Description",
            "type": "string"
          },
          "identifier": {
            "description": "Unique identifier of the subject API as assigned by Crankshaft",
            "format": "uuid",
            "title": "Identifier",
            "type": "string"
          },
          "isApiTracingEnabled": {
            "type": "boolean"
          },
          "link_doc": {
            "description": "Location of the documentation. This can be an URL for example",
            "title": "Link Doc",
            "type": "string"
          },
          "name": {
            "description": "API name, usually an FQDN as determined by crankshaft, it can be logical or can correspond to one of the endpoints where the API is reachable, i.e. api.webex.com",
            "title": "Name",
            "type": "string"
          },
          "openapi_spec_availablity": {
            "$ref": "#/components/schemas/OpenApiSpecAvailability",
            "description": "Indicates specification status",
            "title": "Openapi Spec Avilability"
          },
          "risk": {
            "$ref": "#/components/schemas/ApiSecurityRiskSeverity"
          },
          "score": {
            "$ref": "#/components/schemas/ApiServiceScore"
          },
          "status": {
            "$ref": "#/components/schemas/ApiSecurityApiStatus"
          },
          "status_description": {
            "type": "string"
          }
        },
        "required": [
          "identifier",
          "name"
        ],
        "title": "ApiService",
        "type": "object"
      },
      "ApiServiceDrillDownExternal": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiServiceDrillDownBase"
          },
          {
            "properties": {
              "classification": {
                "description": "API classification label as determined by Crankshaft, e.g. ['meetings', 'messaging'] ",
                "items": {
                  "type": "string"
                },
                "title": "Classification",
                "type": "array"
              },
              "provider": {
                "$ref": "#/components/schemas/ApiProvider_Base"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiServiceDrillDownInternal": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiServiceDrillDownBase"
          },
          {
            "properties": {
              "cluster": {
                "type": "string"
              },
              "clusterId": {
                "format": "uuid",
                "type": "string"
              },
              "isFuzzable": {
                "type": "boolean"
              },
              "namespace": {
                "type": "string"
              },
              "port": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiServiceExternal": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiServiceBase"
          },
          {
            "properties": {
              "classification": {
                "description": "API classification label as determined by Crankshaft, e.g. ['meetings', 'messaging'] ",
                "items": {
                  "type": "string"
                },
                "title": "Classification",
                "type": "array"
              },
              "provider_id": {
                "description": "API provider id",
                "format": "uuid",
                "title": "Provider Id",
                "type": "string"
              },
              "provider_name": {
                "description": "Provider name if provider_id is set.",
                "title": "Provider Name",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiServiceFuzzingProgress": {
        "properties": {
          "fuzzingProgress": {
            "default": 0,
            "type": "integer"
          },
          "fuzzingStartTime": {
            "format": "date-time",
            "type": "string"
          },
          "fuzzingStatus": {
            "$ref": "#/components/schemas/FuzzingStatus"
          },
          "fuzzingStatusMessage": {
            "type": "string"
          },
          "testConfiguration": {
            "$ref": "#/components/schemas/ApiFuzzingTestConfiguration"
          },
          "testId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiServiceFuzzingTest": {
        "properties": {
          "tags": {
            "$ref": "#/components/schemas/FuzzingTestTags"
          },
          "testDetails": {
            "$ref": "#/components/schemas/ApiServiceFuzzingProgress"
          }
        },
        "type": "object"
      },
      "ApiServiceInternal": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiServiceBase"
          },
          {
            "properties": {
              "cluster": {
                "type": "string"
              },
              "fuzzingEndTime": {
                "format": "date-time",
                "type": "string"
              },
              "fuzzingStartTime": {
                "format": "date-time",
                "type": "string"
              },
              "fuzzingStatus": {
                "$ref": "#/components/schemas/FuzzingStatus"
              },
              "fuzzingStatusMessage": {
                "type": "string"
              },
              "namespace": {
                "type": "string"
              },
              "port": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApiServiceLayerPart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Layer7SettingsPart"
          },
          {
            "properties": {
              "headers": {
                "items": {
                  "$ref": "#/components/schemas/Layer7Attribute"
                },
                "type": "array"
              },
              "isIntercept": {
                "default": false,
                "type": "boolean"
              },
              "methods": {
                "items": {
                  "$ref": "#/components/schemas/ConnectionsPolicyApiMethod"
                },
                "type": "array"
              },
              "queryParameters": {
                "items": {
                  "$ref": "#/components/schemas/Layer7Attribute"
                },
                "type": "array"
              }
            },
            "required": [
              "methods"
            ],
            "type": "object"
          }
        ]
      },
      "ApiServiceListExternal": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ApiServiceExternal"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "title": "ApiServiceListExternal",
        "type": "object"
      },
      "ApiServiceListInternal": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ApiServiceInternal"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "title": "ApiServiceListInternal",
        "type": "object"
      },
      "ApiServiceMethod": {
        "properties": {
          "method": {
            "$ref": "#/components/schemas/HttpMethod"
          },
          "path": {
            "type": "string"
          },
          "risk": {
            "$ref": "#/components/schemas/ApiSecurityRiskSeverity"
          },
          "tag": {
            "type": "string"
          }
        },
        "required": [
          "path",
          "method",
          "risk",
          "tag"
        ],
        "type": "object"
      },
      "ApiServiceProfileCompliance": {
        "properties": {
          "api_id": {
            "description": "Api Service this compliance refers to",
            "format": "uuid",
            "title": "Api Id",
            "type": "string"
          },
          "compliant": {
            "description": "True if score is compliant with the profile. False otherwise.",
            "title": "Compliant",
            "type": "boolean"
          },
          "profile": {
            "$ref": "#/components/schemas/ApiPolicyProfile"
          },
          "score_id": {
            "description": "If existing, score used to compute the compliance",
            "format": "uuid",
            "title": "Score Id",
            "type": "string"
          },
          "violation": {
            "$ref": "#/components/schemas/ProfileViolation"
          }
        },
        "required": [
          "api_id",
          "compliant",
          "profile"
        ],
        "title": "ApiServiceProfileCompliance",
        "type": "object"
      },
      "ApiServiceProfileCompliance_Simple": {
        "properties": {
          "compliant": {
            "title": "Compliant",
            "type": "boolean"
          },
          "profile": {
            "title": "Profile",
            "type": "string"
          }
        },
        "required": [
          "profile",
          "compliant"
        ],
        "title": "ApiServiceProfileCompliance_Simple",
        "type": "object"
      },
      "ApiServiceScore": {
        "properties": {
          "api": {
            "$ref": "#/components/schemas/ApiServiceScoreGrade"
          },
          "identifier": {
            "format": "uuid",
            "title": "id",
            "type": "string"
          },
          "provider": {
            "$ref": "#/components/schemas/ApiProviderScoreGrade"
          },
          "status": {
            "$ref": "#/components/schemas/ScoreExitStatusEnum"
          },
          "timestamp": {
            "format": "date-time",
            "title": "Timestamp",
            "type": "string"
          }
        },
        "required": [
          "identifier",
          "status",
          "timestamp",
          "api",
          "provider"
        ],
        "title": "ApiServiceScore",
        "type": "object"
      },
      "ApiServiceScoreGrade": {
        "properties": {
          "additional_info": {
            "items": {
              "$ref": "#/components/schemas/AdditionalInfo"
            },
            "title": "Additional Info",
            "type": "array"
          },
          "api": {
            "$ref": "#/components/schemas/ApiService_Base"
          },
          "avg_vulnerability_duration": {
            "title": "Avg Vulnerability Duration",
            "type": "integer"
          },
          "categories": {
            "additionalProperties": {
              "$ref": "#/components/schemas/CategoryScoreGrade"
            },
            "title": "Categories",
            "type": "object"
          },
          "confidence": {
            "$ref": "#/components/schemas/RiskConfidenceEnum"
          },
          "counters_history": {
            "$ref": "#/components/schemas/CountersHistory"
          },
          "endpoints": {
            "items": {
              "$ref": "#/components/schemas/ApiEndpointScoreGrade"
            },
            "title": "Endpoints",
            "type": "array"
          },
          "last_finding_date": {
            "format": "date-time",
            "title": "Last Finding Date",
            "type": "string"
          },
          "last_vulnerability_date": {
            "format": "date-time",
            "title": "Last Vulnerability Date",
            "type": "string"
          },
          "risk": {
            "$ref": "#/components/schemas/ApiSecurityRiskSeverity"
          },
          "scorer_version": {
            "title": "Scorer Version",
            "type": "integer"
          },
          "trend": {
            "$ref": "#/components/schemas/RiskTrendEnum"
          }
        },
        "required": [
          "scorer_version",
          "risk",
          "categories",
          "api",
          "endpoints"
        ],
        "title": "ApiServiceScoreGrade",
        "type": "object"
      },
      "ApiServiceSpecPathHitCountGraph": {
        "description": "Return a list of total hit count per spec path",
        "items": {
          "$ref": "#/components/schemas/ApiServiceSpecPathHitCountGraphPoint"
        },
        "type": "array"
      },
      "ApiServiceSpecPathHitCountGraphPoint": {
        "properties": {
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "graph": {
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ApiServiceTags": {
        "properties": {
          "names": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "names"
        ],
        "type": "object"
      },
      "ApiServiceType": {
        "description": "An `enum`eration.",
        "enum": [
          "INTERNAL",
          "EXTERNAL"
        ],
        "type": "string"
      },
      "ApiService_Base": {
        "properties": {
          "classification": {
            "description": "API classification label as determined by Crankshaft, e.g. ['meetings', 'messaging'] ",
            "items": {
              "type": "string"
            },
            "title": "Classification",
            "type": "array"
          },
          "creation_timestamp": {
            "format": "date-time",
            "title": "Timestamp",
            "type": "string"
          },
          "description": {
            "description": "Textual description of the Service",
            "title": "Description",
            "type": "string"
          },
          "identifier": {
            "description": "Unique id of the subject API as assigned by Crankshaft",
            "format": "uuid",
            "title": "id",
            "type": "string"
          },
          "name": {
            "description": "API name, usually an FQDN as determined by crankshaft, it can be logical or can correspond to one of the endpoints where the API is reachable, i.e. api.webex.com",
            "title": "Name",
            "type": "string"
          },
          "provider_id": {
            "description": "API provider id",
            "format": "uuid",
            "title": "Provider Id",
            "type": "string"
          },
          "risk": {
            "$ref": "#/components/schemas/ApiSecurityRiskSeverity"
          },
          "status": {
            "$ref": "#/components/schemas/ApiSecurityApiStatus"
          },
          "status_description": {
            "type": "string"
          }
        },
        "required": [
          "identifier",
          "name"
        ],
        "title": "ApiService_Base",
        "type": "object"
      },
      "ApiTokenInfo": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "App": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProcessDesc"
          },
          {
            "properties": {
              "id": {
                "format": "uuid",
                "type": "string"
              },
              "labels": {
                "$ref": "#/components/schemas/AppLabels"
              },
              "name": {
                "description": "The unique name of the App (as it will appear in the Secure Application UI).",
                "example": "AccountingApp",
                "type": "string"
              },
              "type": {
                "description": "Type of the App.",
                "example": "frontend",
                "type": "string"
              }
            },
            "required": [
              "name",
              "type"
            ],
            "type": "object"
          }
        ]
      },
      "AppAnyConnectionRulePart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectionRulePart"
          },
          {
            "properties": {
              "environments": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "AppAnyWorkloadRuleType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkloadRuleType"
          }
        ]
      },
      "AppEnvInfo": {
        "properties": {
          "app": {
            "$ref": "#/components/schemas/AppProcessInfo"
          },
          "appRuntimeInfo": {
            "$ref": "#/components/schemas/AppRuntimeInfo"
          },
          "environment": {
            "properties": {
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "expansion": {
            "$ref": "#/components/schemas/ExpansionTelemetryInfo"
          },
          "fqdn": {
            "type": "string"
          },
          "instance": {
            "properties": {
              "agentId": {
                "type": "string"
              },
              "cloudAccountId": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "namespace": {
                "type": "string"
              },
              "namespaceId": {
                "format": "uuid",
                "type": "string"
              },
              "network": {
                "type": "string"
              },
              "networkName": {
                "type": "string"
              },
              "region": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "ip": {
            "type": "string"
          },
          "pod": {
            "$ref": "#/components/schemas/PodTelemetryInfo"
          },
          "podRuntimeInfo": {
            "$ref": "#/components/schemas/PodRuntimeInfo"
          },
          "workloadType": {
            "$ref": "#/components/schemas/WorkloadType"
          }
        },
        "type": "object"
      },
      "AppLabelConnectionRulePart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectionRulePart"
          },
          {
            "properties": {
              "environments": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "labels": {
                "$ref": "#/components/schemas/AppLabelsNotEmpty"
              }
            },
            "type": "object"
          }
        ]
      },
      "AppLabelWorkloadRuleType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkloadRuleType"
          },
          {
            "properties": {
              "labels": {
                "$ref": "#/components/schemas/AppLabelsNotEmpty"
              }
            },
            "type": "object"
          }
        ]
      },
      "AppLabels": {
        "description": "pods that match one of the given labels",
        "items": {
          "$ref": "#/components/schemas/Label"
        },
        "maxItems": 10,
        "type": "array",
        "x-uniqueField": "key"
      },
      "AppLabelsNotEmpty": {
        "description": "pods that match one of the given labels",
        "items": {
          "$ref": "#/components/schemas/Label"
        },
        "maxItems": 10,
        "minItems": 1,
        "type": "array",
        "x-uniqueField": "key"
      },
      "AppNameConnectionRulePart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectionRulePart"
          },
          {
            "properties": {
              "environments": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "names": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "AppNameWorkloadRuleType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkloadRuleType"
          },
          {
            "properties": {
              "names": {
                "description": "apps that match one of the given types",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "AppPolicy": {
        "properties": {
          "defaultRule": {
            "$ref": "#/components/schemas/DefaultRule"
          },
          "unidentifiedPodsRule": {
            "$ref": "#/components/schemas/UnidentifiedPodsRule"
          },
          "userRules": {
            "items": {
              "$ref": "#/components/schemas/AppRule"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AppPolicyHistory": {
        "properties": {
          "editor": {
            "type": "string"
          },
          "policy": {
            "$ref": "#/components/schemas/AppPolicy"
          },
          "updateTime": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AppProcessInfo": {
        "description": "app info and process info for connection and App telemetries",
        "properties": {
          "args": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "deleted": {
            "type": "boolean"
          },
          "executable": {
            "type": "string"
          },
          "executablePath": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AppRule": {
        "description": "A rule that states what Apps are allowed to run on what environments.",
        "properties": {
          "app": {
            "$ref": "#/components/schemas/WorkloadRuleType",
            "description": "A way to identify the workload. Only one of the below should be not null, and used.",
            "type": "object"
          },
          "groupName": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ruleOrigin": {
            "$ref": "#/components/schemas/AppRuleOrigin"
          },
          "ruleTypeProperties": {
            "$ref": "#/components/schemas/AppRuleType"
          },
          "scope": {
            "$ref": "#/components/schemas/WorkloadRuleScopeType",
            "description": "A way to identify the rule scope. Only one of the below should be not null, and used.",
            "type": "object"
          },
          "status": {
            "$ref": "#/components/schemas/AppRuleStatus"
          }
        },
        "required": [
          "name",
          "status",
          "ruleTypeProperties"
        ],
        "type": "object"
      },
      "AppRuleAction": {
        "description": "App rule action",
        "enum": [
          "DETECT",
          "ALLOW",
          "BLOCK"
        ],
        "type": "string"
      },
      "AppRuleOrigin": {
        "default": "USER",
        "enum": [
          "USER",
          "AUTOMATED_POLICY",
          "SYSTEM"
        ],
        "type": "string"
      },
      "AppRuleStatus": {
        "enum": [
          "ENABLED",
          "DISABLED",
          "DELETED"
        ],
        "type": "string"
      },
      "AppRuleType": {
        "description": "identify the app rule type. Only one of the below should be not null, and  used.",
        "discriminator": {
          "propertyName": "ruleType"
        },
        "properties": {
          "ruleType": {
            "enum": [
              "InjectionRuleType",
              "ViolationRuleType"
            ],
            "type": "string"
          }
        },
        "required": [
          "ruleType"
        ],
        "type": "object"
      },
      "AppRuntimeInfo": {
        "description": "runtime info of the App (if it is an App)",
        "properties": {
          "args": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "cwd": {
            "type": "string"
          },
          "executable": {
            "type": "string"
          },
          "executablePath": {
            "type": "string"
          },
          "processName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AppTelemetry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TelemetryAppEnvInfo"
          },
          {
            "properties": {
              "appRuntimeInfo": {
                "$ref": "#/components/schemas/AppRuntimeInfo"
              },
              "highestDockerfileScanResult": {
                "$ref": "#/components/schemas/DockerfileScanSeverity"
              },
              "highestSecurityContextRisk": {
                "$ref": "#/components/schemas/WorkloadRiskLevel"
              },
              "highestVulnerability": {
                "$ref": "#/components/schemas/VulnerabilitySeverity"
              },
              "id": {
                "format": "uuid",
                "type": "string"
              },
              "isPodProtected": {
                "default": false,
                "type": "boolean"
              },
              "isPublicFacing": {
                "type": "boolean"
              },
              "podIdentification": {
                "$ref": "#/components/schemas/PodIdentification"
              },
              "podRuntimeInfo": {
                "$ref": "#/components/schemas/PodRuntimeInfo"
              },
              "podSpecInfo": {
                "$ref": "#/components/schemas/PodSpecInfo"
              },
              "podsLicenses": {
                "description": "Licenses in use by the docker images. this field will be populated only in the drill down api",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "risk": {
                "$ref": "#/components/schemas/WorkloadRisk"
              },
              "state": {
                "$ref": "#/components/schemas/TelemetryState"
              },
              "telemetryUid": {
                "description": "the kubernetes uid",
                "type": "string"
              },
              "tokenInjectionStatus": {
                "$ref": "#/components/schemas/TokenInjectionStatus"
              },
              "unprotectedReasons": {
                "items": {
                  "$ref": "#/components/schemas/UnprotectedPodReason"
                },
                "type": "array"
              },
              "violation": {
                "$ref": "#/components/schemas/ViolationInfo"
              }
            },
            "type": "object"
          }
        ],
        "description": "Single telemetry entry",
        "type": "object"
      },
      "AppTypeConnectionRulePart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectionRulePart"
          },
          {
            "properties": {
              "environments": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "types": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "AppTypeWorkloadRuleType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkloadRuleType"
          },
          {
            "properties": {
              "types": {
                "description": "apps that match one of the given types",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "AssignedAccount": {
        "properties": {
          "assignedAccountId": {
            "description": "This is null if there is no assigned account.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "assignedAccountId"
        ],
        "type": "object"
      },
      "AssignedAccountResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AssignedAccount"
          },
          {
            "properties": {
              "accountTier": {
                "$ref": "#/components/schemas/AccountTier"
              },
              "apiSecurity": {
                "$ref": "#/components/schemas/ApiSecurity"
              },
              "permissionsMode": {
                "$ref": "#/components/schemas/PermissionsMode",
                "default": "NORMAL"
              },
              "pricingUnitType": {
                "$ref": "#/components/schemas/pricingUnitType"
              },
              "serverlessSecurity": {
                "$ref": "#/components/schemas/ServerlessSecurity"
              },
              "usageStatus": {
                "$ref": "#/components/schemas/UsageStatus"
              }
            },
            "required": [
              "permissionsMode",
              "accountTier",
              "apiSecurity",
              "pricingUnitType",
              "serverlessSecurity"
            ],
            "type": "object"
          }
        ]
      },
      "AttackVector": {
        "enum": [
          "NETWORK",
          "ADJACENT_NETWORK",
          "LOCAL",
          "PHYSICAL"
        ],
        "type": "string"
      },
      "AuditLog": {
        "description": "Single telemetry entry",
        "properties": {
          "action": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "objectName": {
            "type": "string"
          },
          "objectType": {
            "type": "string"
          },
          "time": {
            "format": "date-time",
            "type": "string"
          },
          "user": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuthorizationScheme": {
        "discriminator": {
          "propertyName": "authorizationSchemeType"
        },
        "properties": {
          "authorizationSchemeType": {
            "enum": [
              "AuthorizationSchemeBasicAuth",
              "AuthorizationSchemeApiToken",
              "AuthorizationSchemeBearerToken",
              "AuthorizationSchemeNone"
            ],
            "type": "string"
          }
        },
        "required": [
          "authorizationSchemeType"
        ],
        "type": "object"
      },
      "AuthorizationSchemeApiToken": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthorizationScheme"
          },
          {
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "required": [
              "key",
              "value"
            ],
            "type": "object"
          }
        ]
      },
      "AuthorizationSchemeBasicAuth": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthorizationScheme"
          },
          {
            "properties": {
              "password": {
                "type": "string"
              },
              "username": {
                "type": "string"
              }
            },
            "required": [
              "username",
              "password"
            ],
            "type": "object"
          }
        ]
      },
      "AuthorizationSchemeBearerToken": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthorizationScheme"
          },
          {
            "properties": {
              "token": {
                "type": "string"
              }
            },
            "required": [
              "token"
            ],
            "type": "object"
          }
        ]
      },
      "AuthorizationSchemeNone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthorizationScheme"
          },
          {
            "type": "object"
          }
        ]
      },
      "AverageResponseTimeGraph": {
        "description": "Return a list of average response time in milliseconds per connection",
        "items": {
          "$ref": "#/components/schemas/PerformanceMetricsGraphPoint"
        },
        "type": "array"
      },
      "AwsEnvironment": {
        "properties": {
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "maxItems": 50,
            "type": "array"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "vpc": {
            "$ref": "#/components/schemas/VPCDescription"
          }
        },
        "required": [
          "vpc"
        ],
        "type": "object"
      },
      "AwsRegion": {
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AwsRegistryCredentials": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RegistryCredentials"
          },
          {
            "properties": {
              "accessKeyId": {
                "type": "string"
              },
              "region": {
                "type": "string"
              },
              "secretAccessKey": {
                "type": "string"
              }
            },
            "required": [
              "accessKeyId",
              "region"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "BackgroundJobResponse": {
        "properties": {
          "expiry": {
            "type": "number"
          },
          "path": {
            "type": "string"
          },
          "progress": {
            "type": "string"
          },
          "requestId": {
            "format": "uuid",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/BackgroundJobState"
          }
        },
        "type": "object"
      },
      "BackgroundJobState": {
        "enum": [
          "NEW",
          "PROCESSING",
          "DONE",
          "FAILED",
          "NONE"
        ],
        "type": "string"
      },
      "BflaDurationConfiguration": {
        "properties": {
          "duration": {
            "format": "iso8601",
            "type": "string"
          }
        },
        "required": [
          "duration"
        ],
        "type": "object"
      },
      "ByDaysPeriodicJobExpression": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PeriodicJobExpression"
          },
          {
            "properties": {
              "daysInterval": {
                "default": 1,
                "minimum": 1,
                "type": "integer"
              },
              "timeOfDay": {
                "$ref": "#/components/schemas/TimeOfDay"
              }
            },
            "type": "object"
          }
        ]
      },
      "ByHoursPeriodicJobExpression": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PeriodicJobExpression"
          },
          {
            "properties": {
              "hoursInterval": {
                "default": 1,
                "minimum": 1,
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "CAClusterIdAndName": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CDDeploymentInfo": {
        "properties": {
          "deploymentName": {
            "type": "string"
          },
          "deploymentSource": {
            "$ref": "#/components/schemas/DeploymentSource"
          },
          "deploymentVersion": {
            "type": "string"
          },
          "policyId": {
            "format": "uuid",
            "type": "string"
          },
          "policyName": {
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/CDResult"
          },
          "securityFinding": {
            "items": {
              "$ref": "#/components/schemas/CDPipelineSecurityFinding"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/CDPipelineResultStatus"
          },
          "time": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CDDeploymentResource": {
        "properties": {
          "reasons": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "resourceName": {
            "type": "string"
          },
          "risk": {
            "$ref": "#/components/schemas/CDPipelineFindingRisk"
          },
          "type": {
            "$ref": "#/components/schemas/CDPipelineFindingType"
          }
        },
        "type": "object"
      },
      "CDPipelineFindingRisk": {
        "enum": [
          "NO_RISK",
          "MEDIUM",
          "HIGH"
        ],
        "type": "string"
      },
      "CDPipelineFindingType": {
        "enum": [
          "PERMISSIONS",
          "SECURITY_CONTEXT",
          "SECRETS"
        ],
        "type": "string"
      },
      "CDPipelineResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CDDeploymentInfo"
          },
          {
            "properties": {
              "id": {
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "description": "Pipeline result for a scanned CD resource"
      },
      "CDPipelineResultStatus": {
        "enum": [
          "SUCCESS",
          "FAILURE"
        ],
        "type": "string"
      },
      "CDPipelineSecretsFindingRisk": {
        "enum": [
          "NO_KNOWN_RISK",
          "RISK_IDENTIFIED"
        ],
        "type": "string"
      },
      "CDPipelineSecurityFinding": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CDPipelineFindingType"
          },
          "value": {
            "$ref": "#/components/schemas/CDPipelineSecurityFindingValue"
          }
        },
        "type": "object"
      },
      "CDPipelineSecurityFindingValue": {
        "properties": {
          "count": {
            "type": "integer"
          },
          "risk": {
            "$ref": "#/components/schemas/CDPipelineFindingRisk"
          }
        },
        "type": "object"
      },
      "CDResult": {
        "enum": [
          "ALLOW",
          "DETECT",
          "BLOCK"
        ],
        "type": "string"
      },
      "CaIntegrationRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CaIntegrationResponse"
          },
          {
            "type": "object"
          }
        ],
        "properties": {
          "clusters": {
            "items": {
              "$ref": "#/components/schemas/CAClusterIdAndName"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CaIntegrationResponse": {
        "properties": {
          "certificate": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "issuerName": {
            "type": "string"
          },
          "issuerNamespace": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "issuerName",
          "certificate"
        ],
        "type": "object"
      },
      "CaIntegrationResponseWithClusters": {
        "properties": {
          "certificate": {
            "type": "string"
          },
          "clusters": {
            "items": {
              "$ref": "#/components/schemas/CAClusterIdAndName"
            },
            "type": "array"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "issuerName": {
            "type": "string"
          },
          "issuerNamespace": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "issuerName",
          "certificate"
        ],
        "type": "object"
      },
      "CategoryScoreGrade": {
        "properties": {
          "additional_info": {
            "items": {
              "$ref": "#/components/schemas/AdditionalInfo"
            },
            "title": "Additional Info",
            "type": "array"
          },
          "confidence": {
            "$ref": "#/components/schemas/RiskConfidenceEnum"
          },
          "counters_history": {
            "$ref": "#/components/schemas/CountersHistory"
          },
          "critical": {
            "$ref": "#/components/schemas/ScoreFindingGroup"
          },
          "high": {
            "$ref": "#/components/schemas/ScoreFindingGroup"
          },
          "low": {
            "$ref": "#/components/schemas/ScoreFindingGroup"
          },
          "medium": {
            "$ref": "#/components/schemas/ScoreFindingGroup"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "risk": {
            "$ref": "#/components/schemas/ApiSecurityRiskSeverity"
          },
          "scorer_version": {
            "title": "Scorer Version",
            "type": "integer"
          },
          "trend": {
            "$ref": "#/components/schemas/RiskTrendEnum"
          },
          "unclassified": {
            "$ref": "#/components/schemas/ScoreFindingGroup"
          }
        },
        "required": [
          "scorer_version",
          "risk",
          "name",
          "critical",
          "high",
          "medium",
          "low",
          "unclassified"
        ],
        "title": "CategoryScoreGrade",
        "type": "object"
      },
      "CategoryScoreGradeNoFindings": {
        "properties": {
          "additional_info": {
            "items": {
              "$ref": "#/components/schemas/AdditionalInfo"
            },
            "title": "Additional Info",
            "type": "array"
          },
          "confidence": {
            "$ref": "#/components/schemas/RiskConfidenceEnum"
          },
          "critical": {
            "title": "Critical",
            "type": "integer"
          },
          "high": {
            "title": "High",
            "type": "integer"
          },
          "low": {
            "title": "Low",
            "type": "integer"
          },
          "medium": {
            "title": "Medium",
            "type": "integer"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "risk": {
            "$ref": "#/components/schemas/ApiSecurityRiskSeverity"
          },
          "scorer_version": {
            "title": "Scorer Version",
            "type": "integer"
          },
          "trend": {
            "$ref": "#/components/schemas/RiskTrendEnum"
          },
          "unclassified": {
            "title": "Unclassified",
            "type": "integer"
          }
        },
        "required": [
          "scorer_version",
          "risk",
          "name",
          "critical",
          "high",
          "medium",
          "low",
          "unclassified"
        ],
        "title": "CategoryScoreGradeNoFindings",
        "type": "object"
      },
      "CdConnectionRule": {
        "description": "A rule that states what apps are allowed to communicate with each other.",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ConnectionRuleAction"
          },
          "destination": {
            "$ref": "#/components/schemas/ConnectionRulePart"
          },
          "groupName": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/ConnectionRulePart"
          },
          "status": {
            "enum": [
              "ENABLED",
              "DISABLED",
              "DELETED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "CdPipelineResourceResult": {
        "description": "CD resource results",
        "properties": {
          "deploymentInfo": {
            "$ref": "#/components/schemas/CDDeploymentInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/CDDeploymentResource"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CdPolicy": {
        "properties": {
          "apiSecurityCdPolicy": {
            "$ref": "#/components/schemas/ApiSecurityCdPolicyElement"
          },
          "deployers": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 10,
            "minItems": 1,
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "permissionCDPolicy": {
            "$ref": "#/components/schemas/CdPolicyElement"
          },
          "secretCDPolicy": {
            "$ref": "#/components/schemas/SecretsCdPolicyElement"
          },
          "securityContextCDPolicy": {
            "$ref": "#/components/schemas/CdPolicyElement"
          }
        },
        "required": [
          "name",
          "deployers"
        ],
        "type": "object"
      },
      "CdPolicyElement": {
        "properties": {
          "enforcementOption": {
            "$ref": "#/components/schemas/EnforcementOption",
            "description": "The action that should be taken on the pipeline"
          },
          "permissibleVulnerabilityLevel": {
            "$ref": "#/components/schemas/CDPipelineFindingRisk",
            "description": "The permissible vulnerability level in the pipeline"
          }
        },
        "required": [
          "permissibleVulnerabilityLevel",
          "enforcementOption"
        ],
        "type": "object"
      },
      "CdSection": {
        "properties": {
          "isIdentified": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "CdServerlessRule": {
        "description": "A CD rule that states what serverless function are allowed and where.",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ServerlessRuleAction"
          },
          "groupName": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "rule": {
            "$ref": "#/components/schemas/ServerlessRuleType"
          },
          "scope": {
            "items": {
              "$ref": "#/components/schemas/ServerlessRuleScope"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/ServerlessRuleStatus"
          }
        },
        "required": [
          "name",
          "status",
          "action",
          "rule"
        ],
        "type": "object"
      },
      "CertificateResponse": {
        "properties": {
          "certificateJwtStr": {
            "format": "jwt",
            "type": "string"
          },
          "rootCaPublicKey": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChallengeRequest": {
        "properties": {
          "ChallengeName": {
            "enum": [
              "GOOGLE_LOGIN"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChangePasswordInfo": {
        "description": "an object that contains a change password request data",
        "properties": {
          "newPassword": {
            "type": "string"
          },
          "oldPassword": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CiPolicy": {
        "properties": {
          "description": {
            "type": "string"
          },
          "dockerfileScanCiPolicy": {
            "$ref": "#/components/schemas/DockerfileScanCiPolicy"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "vulnerabilityCiPolicy": {
            "$ref": "#/components/schemas/VulnerabilityCiPolicy"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "CiSection": {
        "properties": {
          "isIdentified": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "CloudAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudAccountBase"
          },
          {
            "properties": {
              "installationStatus": {
                "enum": [
                  "INSTALLED",
                  "PENDING_INSTALLATION",
                  "FAILED"
                ],
                "readOnly": true,
                "type": "string"
              },
              "periodicJobExpression": {
                "$ref": "#/components/schemas/ServerlessPeriodicJobExpression"
              },
              "securityThreats": {
                "$ref": "#/components/schemas/CloudAccountSecurityThreats",
                "readOnly": true
              },
              "vulnerabilitiesSummary": {
                "$ref": "#/components/schemas/VulnerabilitiesSummary",
                "readOnly": true
              }
            },
            "required": [
              "periodicJobExpression"
            ],
            "type": "object"
          }
        ]
      },
      "CloudAccountBase": {
        "description": "represent cloud account object",
        "properties": {
          "cloudAccountId": {
            "description": "the identifier id from the cloud account provider. account ID for AWS and subscription ID in Azure",
            "readOnly": true,
            "type": "string"
          },
          "cloudProvider": {
            "$ref": "#/components/schemas/CloudProviderType"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "installVulnerabilityScanner": {
            "default": false,
            "type": "boolean"
          },
          "lastScanned": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "regions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "validateFunction": {
            "enum": [
              "HASH_VALIDATION",
              "SIGNATURE_VALIDATION",
              "NONE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "CloudAccountDeleteDependencies": {
        "properties": {
          "rules": {
            "items": {
              "$ref": "#/components/schemas/deleteDependencyElement"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CloudAccountSecurityThreats": {
        "properties": {
          "dataAccessRisk": {
            "$ref": "#/components/schemas/ServerlessDataAccessRisk"
          },
          "dataAccessRiskCount": {
            "format": "int64",
            "type": "integer"
          },
          "isUnusedFunction": {
            "type": "boolean"
          },
          "policyRisk": {
            "$ref": "#/components/schemas/ServerlessPolicyRisk"
          },
          "policyRiskCount": {
            "format": "int64",
            "type": "integer"
          },
          "publiclyAccessibleRisk": {
            "$ref": "#/components/schemas/ServerlessPubliclyAccessibleRisk"
          },
          "publiclyAccessibleRiskCount": {
            "format": "int64",
            "type": "integer"
          },
          "secretsRisk": {
            "$ref": "#/components/schemas/ServerlessSecretsRisk"
          },
          "secretsRiskCount": {
            "format": "int64",
            "type": "integer"
          },
          "unusedFunctionCount": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CloudProviderType": {
        "enum": [
          "AWS",
          "AZURE"
        ],
        "type": "string"
      },
      "ClusterDetails": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClusterEventRuleRecommendation": {
        "properties": {
          "clusterEventRule": {
            "$ref": "#/components/schemas/KubernetesApiRule"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "numberOfAffectedEvents": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ClusterEventRuleRecommendationPeriod": {
        "properties": {
          "clusterEventRuleRecommendations": {
            "items": {
              "$ref": "#/components/schemas/ClusterEventRuleRecommendation"
            },
            "type": "array"
          },
          "timePeriod": {
            "$ref": "#/components/schemas/RecommendationTimePeriod"
          },
          "totalEvents": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ClusterIgnoredRisk": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IgnoredRisk"
          },
          {
            "properties": {
              "clusterIds": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "clusterIds"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ClusterNameRuleType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkloadRuleScopeType"
          },
          {
            "properties": {
              "names": {
                "description": "clusters that match one of the given names",
                "items": {
                  "type": "string"
                },
                "minItems": 1,
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "ClusterPermission": {
        "properties": {
          "cluster": {
            "type": "string"
          },
          "clusterId": {
            "format": "uuid",
            "type": "string"
          },
          "permissionInfo": {
            "items": {
              "$ref": "#/components/schemas/PermissionInfo"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ClusterPodDefinitionSource": {
        "default": "KUBERNETES",
        "description": "The source type of the pod definitions of the cluster",
        "enum": [
          "KUBERNETES",
          "CD"
        ],
        "type": "string"
      },
      "ClustersDetails": {
        "items": {
          "$ref": "#/components/schemas/ClusterDetails"
        },
        "type": "array"
      },
      "ConditionEnumComparator": {
        "description": "An enumeration.",
        "enum": [
          "=",
          "!="
        ],
        "title": "ConditionEnumComparator",
        "type": "string"
      },
      "ConditionListComparison": {
        "description": "An enumeration.",
        "enum": [
          "=",
          "!=",
          "contains",
          "in"
        ],
        "title": "ConditionListComparison",
        "type": "string"
      },
      "ConditionNumberComparison": {
        "description": "An enumeration.",
        "enum": [
          "=",
          "!=",
          "<",
          "<=",
          ">",
          ">="
        ],
        "title": "ConditionNumberComparison",
        "type": "string"
      },
      "ConnectionPolicyHistory": {
        "properties": {
          "editor": {
            "type": "string"
          },
          "policy": {
            "$ref": "#/components/schemas/ConnectionsPolicy"
          },
          "updateTime": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConnectionRuleAction": {
        "description": "ENCRYPT is not allowed in default rule",
        "enum": [
          "DETECT",
          "BLOCK",
          "ALLOW",
          "ENCRYPT",
          "ENCRYPT_DIRECT"
        ],
        "type": "string"
      },
      "ConnectionRuleBasic": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ConnectionRuleAction"
          },
          "groupName": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isRuleActive": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "ruleOrigin": {
            "$ref": "#/components/schemas/ConnectionRuleOrigin"
          },
          "ruleType": {
            "$ref": "#/components/schemas/NetworkConnectionRuleType"
          }
        },
        "required": [
          "name",
          "action"
        ],
        "type": "object"
      },
      "ConnectionRuleOrigin": {
        "default": "USER",
        "enum": [
          "USER",
          "AUTOMATED_POLICY",
          "SYSTEM"
        ],
        "type": "string"
      },
      "ConnectionRulePart": {
        "discriminator": {
          "propertyName": "connectionRulePartType"
        },
        "properties": {
          "connectionRulePartType": {
            "enum": [
              "AppNameConnectionRulePart",
              "AppTypeConnectionRulePart",
              "AppLabelConnectionRulePart",
              "AppAnyConnectionRulePart",
              "PodNameConnectionRulePart",
              "PodLablesConnectionRulePart",
              "PodAnyConnectionRulePart",
              "EnvironmentNameConnectionRulePart",
              "EnvironmentAnyConnectionRulePart",
              "IpRangeConnectionRulePart",
              "ExternalConnectionRulePart",
              "FqdnConnectionRulePart",
              "ServiceNameConnectionRulePart",
              "AnyConnectionRulePart",
              "ExpansionNameConnectionRulePart",
              "ExpansionLabelsConnectionRulePart",
              "ExpansionAnyConnectionRulePart",
              "KafkaConnectionRulePart",
              "ApiServiceConnectionRulePart"
            ],
            "type": "string"
          }
        },
        "required": [
          "connectionRulePartType"
        ],
        "type": "object"
      },
      "ConnectionTelemetriesWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TimeBasedWidget"
          }
        ],
        "properties": {
          "encryptedGraphs": {
            "$ref": "#/components/schemas/DashboardTimeBasedGraphs",
            "description": "all the graphs (all time periods) of encrypted connection telemetries",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "ConnectionTelemetry": {
        "properties": {
          "apiTokens": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/AppEnvInfo"
          },
          "state": {
            "properties": {
              "count": {
                "type": "integer"
              },
              "isOpen": {
                "type": "boolean"
              },
              "lastSeen": {
                "format": "date-time",
                "type": "string"
              },
              "layer7Attributes": {
                "items": {
                  "$ref": "#/components/schemas/Layer7Attribute"
                },
                "type": "array"
              },
              "protocol": {
                "type": "string"
              },
              "startTime": {
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "target": {
            "$ref": "#/components/schemas/AppEnvInfo"
          },
          "violation": {
            "$ref": "#/components/schemas/ConnectionViolation"
          }
        },
        "type": "object"
      },
      "ConnectionViolation": {
        "description": "If there is a connection violation according to the policy - this object will hold the violation info",
        "properties": {
          "defaultRule": {
            "$ref": "#/components/schemas/DefaultConnectionRule"
          },
          "directPodRule": {
            "$ref": "#/components/schemas/DirectPodIpConnectionRule"
          },
          "encryptRule": {
            "$ref": "#/components/schemas/ConnectionsRule"
          },
          "encryptionReason": {
            "$ref": "#/components/schemas/EncryptionReason"
          },
          "interceptionRule": {
            "format": "uuid",
            "type": "string"
          },
          "lastViolation": {
            "format": "date-time",
            "type": "string"
          },
          "userRule": {
            "$ref": "#/components/schemas/ConnectionsRule"
          }
        },
        "type": "object"
      },
      "ConnectionsPolicy": {
        "properties": {
          "defaultRule": {
            "$ref": "#/components/schemas/DefaultConnectionRule"
          },
          "directPodRule": {
            "$ref": "#/components/schemas/DirectPodIpConnectionRule"
          },
          "userRules": {
            "items": {
              "$ref": "#/components/schemas/ConnectionsRule"
            },
            "type": "array"
          }
        },
        "required": [
          "directPodRule"
        ],
        "type": "object"
      },
      "ConnectionsPolicyApiMethod": {
        "properties": {
          "method": {
            "$ref": "#/components/schemas/HttpMethod"
          },
          "path": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          }
        },
        "required": [
          "path",
          "method",
          "tag"
        ],
        "type": "object"
      },
      "ConnectionsRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectionRuleBasic"
          },
          {
            "properties": {
              "destination": {
                "$ref": "#/components/schemas/ConnectionRulePart"
              },
              "layer7Settings": {
                "$ref": "#/components/schemas/Layer7SettingsPart"
              },
              "source": {
                "$ref": "#/components/schemas/ConnectionRulePart"
              },
              "status": {
                "enum": [
                  "ENABLED",
                  "DISABLED",
                  "DELETED"
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "description": "A rule that states what Apps are allowed to communicate with each other."
      },
      "ConnectionsRuleRecommendation": {
        "properties": {
          "connectionRule": {
            "$ref": "#/components/schemas/RecommendationConnectionRule"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "numberOfAffectedConnections": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ConnectionsRuleRecommendationPeriod": {
        "properties": {
          "connectionsRuleRecommendations": {
            "$ref": "#/components/schemas/ConnectionsRuleRecommendations"
          },
          "timePeriod": {
            "$ref": "#/components/schemas/RecommendationTimePeriod"
          },
          "totalConnections": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ConnectionsRuleRecommendations": {
        "items": {
          "$ref": "#/components/schemas/ConnectionsRuleRecommendation"
        },
        "type": "array"
      },
      "Container": {
        "properties": {
          "image": {
            "$ref": "#/components/schemas/Image"
          }
        },
        "type": "object"
      },
      "ContainerSecurityContext": {
        "properties": {
          "allowPrivilegeEscalation": {
            "type": "boolean"
          },
          "capabilitiesAdd": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "capabilitiesDrop": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "privileged": {
            "type": "boolean"
          },
          "procMount": {
            "type": "string"
          },
          "readOnlyRootFilesystem": {
            "type": "boolean"
          },
          "runAsGroup": {
            "type": "integer"
          },
          "runAsNonRoot": {
            "type": "boolean"
          },
          "runAsUser": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ControllerDataResponse": {
        "properties": {
          "agentId": {
            "format": "uuid",
            "type": "string"
          },
          "sharedKey": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CountersHistory": {
        "properties": {
          "critical": {
            "items": {
              "type": "integer"
            },
            "title": "Critical",
            "type": "array"
          },
          "high": {
            "items": {
              "type": "integer"
            },
            "title": "High",
            "type": "array"
          },
          "low": {
            "items": {
              "type": "integer"
            },
            "title": "Low",
            "type": "array"
          },
          "medium": {
            "items": {
              "type": "integer"
            },
            "title": "Medium",
            "type": "array"
          },
          "timestamp": {
            "items": {
              "type": "string"
            },
            "title": "Timestamp",
            "type": "array"
          },
          "unclassified": {
            "items": {
              "type": "integer"
            },
            "title": "Unclassified",
            "type": "array"
          }
        },
        "title": "History Counters",
        "type": "object"
      },
      "Cvss": {
        "properties": {
          "attackComplexity": {
            "$ref": "#/components/schemas/CvssRiskLevel"
          },
          "attackVector": {
            "$ref": "#/components/schemas/AttackVector"
          },
          "availabilityImpact": {
            "$ref": "#/components/schemas/CvssRiskLevel"
          },
          "confidentialityImpact": {
            "$ref": "#/components/schemas/CvssRiskLevel"
          },
          "integrityImpact": {
            "$ref": "#/components/schemas/CvssRiskLevel"
          },
          "privilegesRequired": {
            "$ref": "#/components/schemas/CvssRiskLevel"
          },
          "scope": {
            "$ref": "#/components/schemas/Scope"
          },
          "score": {
            "format": "float",
            "maximum": 10,
            "minimum": 0,
            "type": "number"
          },
          "userInteraction": {
            "$ref": "#/components/schemas/UserInteraction"
          }
        },
        "type": "object"
      },
      "CvssRiskLevel": {
        "enum": [
          "CRITICAL",
          "HIGH",
          "MEDIUM",
          "LOW",
          "NONE"
        ],
        "type": "string"
      },
      "DashboardTimeBasedGraph": {
        "properties": {
          "info": {
            "$ref": "#/components/schemas/DashboardTimeBasedGraphInfo"
          },
          "graph": {
            "description": "the graph points",
            "items": {
              "$ref": "#/components/schemas/GraphNumberPoint"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DashboardTimeBasedGraphInfo": {
        "properties": {
          "policyUpdateTimes": {
            "items": {
              "format": "date-time",
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "DashboardTimeBasedGraphs": {
        "properties": {
          "lastDay": {
            "$ref": "#/components/schemas/DashboardTimeBasedGraph",
            "description": "the graph of last day's data",
            "readOnly": true
          },
          "lastHour": {
            "$ref": "#/components/schemas/DashboardTimeBasedGraph",
            "description": "the graph of last hour's data",
            "readOnly": true
          },
          "lastMonth": {
            "$ref": "#/components/schemas/DashboardTimeBasedGraph",
            "description": "the graph of last month's data",
            "readOnly": true
          },
          "lastWeek": {
            "$ref": "#/components/schemas/DashboardTimeBasedGraph",
            "description": "the graph of last week's data",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "DefaultConnectionRule": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ConnectionRuleAction"
          },
          "type": {
            "enum": [
              "ALLOW_ALL",
              "ENVIRONMENT_ONLY",
              "DENY_ALL"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "DefaultKubernetesApiRule": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/KubernetesApiRuleAction"
          }
        },
        "type": "object"
      },
      "DefaultRule": {
        "enum": [
          "ALLOW_ALL",
          "DETECT_ALL",
          "BLOCK_ALL"
        ],
        "type": "string"
      },
      "DeleteDependencyDeployerElement": {
        "properties": {
          "cdPolicies": {
            "items": {
              "$ref": "#/components/schemas/deleteDependencyElement"
            },
            "type": "array"
          },
          "deployers": {
            "items": {
              "$ref": "#/components/schemas/deleteDependencyElement"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeleteDependencyElementEnvironments": {
        "properties": {
          "clusterEventRules": {
            "items": {
              "$ref": "#/components/schemas/deleteDependencyEnvironmentRuleElement"
            },
            "type": "array"
          },
          "connectionRules": {
            "items": {
              "$ref": "#/components/schemas/deleteDependencyEnvironmentRuleElement"
            },
            "type": "array"
          },
          "deploymentRules": {
            "items": {
              "$ref": "#/components/schemas/deleteDependencyEnvironmentRuleElement"
            },
            "type": "array"
          },
          "environments": {
            "items": {
              "$ref": "#/components/schemas/deleteDependencyElement"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeleteDependencyElementUser": {
        "properties": {
          "deployers": {
            "$ref": "#/components/schemas/DeleteDependencyDeployerElement"
          }
        },
        "type": "object"
      },
      "DeployedImage": {
        "properties": {
          "apiExternal": {
            "items": {
              "$ref": "#/components/schemas/ApiServiceExternal"
            },
            "type": "array"
          },
          "apiInternal": {
            "items": {
              "$ref": "#/components/schemas/ApiServiceInternal"
            },
            "type": "array"
          },
          "componentPath": {
            "type": "string"
          },
          "imageInfo": {
            "$ref": "#/components/schemas/ImageDefGet"
          },
          "lastCommit": {
            "type": "string"
          }
        },
        "required": [
          "lastCommit",
          "imageInfo"
        ],
        "type": "object"
      },
      "Deployer": {
        "description": "represent deployer object",
        "discriminator": {
          "propertyName": "deployerType"
        },
        "properties": {
          "deployer": {
            "type": "string"
          },
          "deployerId": {
            "format": "uuid",
            "type": "string"
          },
          "deployerType": {
            "enum": [
              "OperatorDeployer",
              "SecureCnDeployer"
            ],
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "deployerType",
          "deployerId"
        ],
        "type": "object"
      },
      "DeployerDeleteDependencies": {
        "properties": {
          "cdPolicies": {
            "items": {
              "$ref": "#/components/schemas/deleteDependencyElement"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeploymentSource": {
        "enum": [
          "HELM",
          "DEPLOYER"
        ],
        "type": "string"
      },
      "DiffDetectionStatus": {
        "description": "diff detection status. in case of in progress, will reveal the detection end time",
        "properties": {
          "endtime": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "enum": [
              "READY",
              "IN_PROGRESS"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "DiffSection": {
        "properties": {
          "diffs": {
            "items": {
              "$ref": "#/components/schemas/PodTemplateDiff"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DirectPodIpConnectionRule": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/DirectPodIpConnectionRuleAction"
          },
          "isDisabled": {
            "default": false,
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "action"
        ],
        "type": "object"
      },
      "DirectPodIpConnectionRuleAction": {
        "enum": [
          "DETECT",
          "BLOCK"
        ],
        "type": "string"
      },
      "DockerPushInfo": {
        "properties": {
          "command": {
            "description": "the docker push command",
            "type": "string"
          },
          "commandOutput": {
            "description": "the docker push command output",
            "type": "string"
          }
        },
        "required": [
          "command",
          "commandOutput"
        ],
        "type": "object"
      },
      "DockerfileScanCiPolicy": {
        "properties": {
          "enforcementOption": {
            "$ref": "#/components/schemas/EnforcementOption",
            "description": "The action that should be taken on the pipeline"
          },
          "permissibleDockerfileScanSeverity": {
            "$ref": "#/components/schemas/DockerfileScanSeverity",
            "description": "The permissible dockerfile scan severity in the pipeline"
          }
        },
        "required": [
          "permissibleDockerfileScanSeverity",
          "enforcementOption"
        ],
        "type": "object"
      },
      "DockerfileScanResult": {
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "severity": {
            "$ref": "#/components/schemas/DockerfileScanSeverity"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DockerfileScanResultsSummary": {
        "description": "dockerfile scan results summary by severity",
        "properties": {
          "info": {
            "minimum": 0,
            "readOnly": true,
            "type": "integer"
          },
          "fatal": {
            "minimum": 0,
            "readOnly": true,
            "type": "integer"
          },
          "total": {
            "minimum": 0,
            "readOnly": true,
            "type": "integer"
          },
          "warn": {
            "minimum": 0,
            "readOnly": true,
            "type": "integer"
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "DockerfileScanSeverity": {
        "enum": [
          "INFO",
          "WARN",
          "FATAL"
        ],
        "type": "string"
      },
      "EditUser": {
        "properties": {
          "accountId": {
            "description": "The Secure Application account ID to which the user belongs",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "id": {
            "description": "ID of the user as created by Secure Application management.",
            "format": "uuid",
            "type": "string"
          },
          "lastLogin": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "status": {
            "enum": [
              "ENABLED",
              "DISABLED"
            ],
            "type": "string"
          }
        },
        "required": [
          "fullName",
          "status"
        ],
        "type": "object"
      },
      "EncryptionReason": {
        "enum": [
          "POLICY",
          "CLUSTER_OUTBOUND"
        ],
        "type": "string"
      },
      "EndpointHostV4": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EndpointOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/IpAddressComparison"
              },
              "value": {
                "format": "ipv4network",
                "title": "Value",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "EndpointHostV6": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EndpointOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/IpAddressComparison"
              },
              "value": {
                "format": "ipv6network",
                "title": "Value",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "EndpointHostname": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EndpointOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/ConditionListComparison"
              },
              "value": {
                "title": "Value",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "EndpointHostnameIsNone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EndpointOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "EndpointLocation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EndpointOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/ConditionListComparison"
              },
              "value": {
                "title": "Value",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "EndpointLocationIsNone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EndpointOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "EndpointOrConditionsBase": {
        "discriminator": {
          "propertyName": "attribute"
        },
        "properties": {
          "attribute": {
            "enum": [
              "EndpointRisk",
              "EndpointRiskTrend",
              "EndpointRiskTrendIsNone",
              "EndpointRiskConfidence",
              "EndpointRiskConfidenceIsNone",
              "EndpointLocation",
              "EndpointLocationIsNone",
              "EndpointHostV4",
              "EndpointHostV6",
              "EndpointHostname",
              "EndpointHostnameIsNone",
              "EndpointScheme",
              "EndpointSchemeIsNone",
              "EndpointProtocol",
              "EndpointPort"
            ],
            "type": "string"
          }
        },
        "required": [
          "attribute"
        ],
        "type": "object"
      },
      "EndpointPort": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EndpointOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/ConditionNumberComparison"
              },
              "value": {
                "title": "Value",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "EndpointProtocol": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EndpointOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/ConditionEnumComparator"
              },
              "value": {
                "$ref": "#/components/schemas/IpProtoEnum"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "EndpointRisk": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EndpointOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/ConditionNumberComparison"
              },
              "value": {
                "$ref": "#/components/schemas/RiskSeverity"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "EndpointRiskConfidence": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EndpointOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/ConditionEnumComparator"
              },
              "value": {
                "$ref": "#/components/schemas/RiskConfidenceEnum"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "EndpointRiskConfidenceIsNone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EndpointOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "EndpointRiskTrend": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EndpointOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/ConditionEnumComparator"
              },
              "value": {
                "$ref": "#/components/schemas/RiskTrendEnum"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "EndpointRiskTrendIsNone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EndpointOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "EndpointScheme": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EndpointOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/ConditionEnumComparator"
              },
              "value": {
                "$ref": "#/components/schemas/UrlSchemeEnum"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "EndpointSchemeIsNone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EndpointOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "EnforcementOption": {
        "enum": [
          "FAIL",
          "IGNORE"
        ],
        "type": "string"
      },
      "EnvPolicyFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyFilter"
          }
        ]
      },
      "Environment": {
        "description": "Secure Application environment definition. #also must be included for at least one of the env details but Swagger does not support parameter dependencies and mutually exclusive parameters.",
        "properties": {
          "awsEnvironments": {
            "items": {
              "$ref": "#/components/schemas/AwsEnvironment"
            },
            "type": "array"
          },
          "description": {
            "description": "The environment description.",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isSystemEnv": {
            "description": "indicates if this environment represents system namespaces that usually will be filtered out from some screens",
            "type": "boolean"
          },
          "kubernetesEnvironments": {
            "items": {
              "$ref": "#/components/schemas/KubernetesEnvironment"
            },
            "type": "array"
          },
          "name": {
            "description": "Environment name. Must be unique.",
            "example": "Prod",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "EnvironmentAnyConnectionRulePart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectionRulePart"
          }
        ]
      },
      "EnvironmentIgnoredRisk": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IgnoredRisk"
          },
          {
            "properties": {
              "environmentIds": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "environmentIds"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "EnvironmentNameConnectionRulePart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectionRulePart"
          },
          {
            "properties": {
              "environments": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "EnvironmentNameRuleType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkloadRuleScopeType"
          },
          {
            "properties": {
              "names": {
                "description": "envs that match one of the given names",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "EnvironmentRecommendation": {
        "properties": {
          "environemnt": {
            "$ref": "#/components/schemas/Environment"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "numberOfAffectedWorkloads": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EnvironmentRecommendationPeriod": {
        "properties": {
          "environmentRecommendations": {
            "$ref": "#/components/schemas/EnvironmentRecommendations"
          },
          "timePeriod": {
            "$ref": "#/components/schemas/RecommendationTimePeriod"
          },
          "totalWorkloads": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EnvironmentRecommendations": {
        "items": {
          "$ref": "#/components/schemas/EnvironmentRecommendation"
        },
        "type": "array"
      },
      "EnvironmentRuleBasic": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/AppRuleAction"
          },
          "comment": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isRuleActive": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "ruleType": {
            "$ref": "#/components/schemas/NetworkAppRuleType"
          },
          "violationReasons": {
            "items": {
              "$ref": "#/components/schemas/ViolationReason"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EnvironmentRuleRecommendation": {
        "properties": {
          "environemntRule": {
            "$ref": "#/components/schemas/AppRule"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "numberOfAffectedWorkloads": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EnvironmentRuleType": {
        "description": "identify the environment type. Only one of the below should be not null, and  used.",
        "discriminator": {
          "propertyName": "environmentRuleType"
        },
        "properties": {
          "environmentRuleType": {
            "$ref": "#/components/schemas/EnvironmentRuleTypeEnum"
          }
        },
        "required": [
          "environmentRuleType"
        ],
        "type": "object"
      },
      "EnvironmentRuleTypeEnum": {
        "enum": [
          "AnyEnvironmentRuleType",
          "NameEnvironmentRuleType"
        ],
        "type": "string"
      },
      "EnvironmentRulesRecommendationPeriod": {
        "properties": {
          "environmentRulesRecommendations": {
            "$ref": "#/components/schemas/EnvironmentRulesRecommendations"
          },
          "timePeriod": {
            "$ref": "#/components/schemas/RecommendationTimePeriod"
          },
          "totalWorkloads": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EnvironmentRulesRecommendations": {
        "items": {
          "$ref": "#/components/schemas/EnvironmentRuleRecommendation"
        },
        "type": "array"
      },
      "ErrorRateGraph": {
        "description": "Return a list of the percentage of an errors out of the total connections",
        "items": {
          "$ref": "#/components/schemas/PerformanceMetricsGraphPoint"
        },
        "type": "array"
      },
      "EventsForwardingDetails": {
        "discriminator": {
          "propertyName": "eventsForwardingDetailsType"
        },
        "properties": {
          "eventsForwardingDetailsType": {
            "$ref": "#/components/schemas/EventsForwardingDetailsTypeEnum"
          },
          "eventsToForward": {
            "items": {
              "$ref": "#/components/schemas/eventsToForward"
            },
            "type": "array"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "format": "uri",
            "type": "string"
          }
        },
        "required": [
          "eventsForwardingDetailsType",
          "name",
          "eventsToForward"
        ],
        "type": "object"
      },
      "EventsForwardingDetailsList": {
        "properties": {
          "details": {
            "items": {
              "$ref": "#/components/schemas/EventsForwardingDetails"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EventsForwardingDetailsTypeEnum": {
        "enum": [
          "SplunkEventsForwardingDetails",
          "OpsGenieEventsForwardingDetails",
          "SlackEventsForwardingDetails",
          "SlackVulnerabilityEventsForwardingDetails",
          "SumoLogicEventsForwardingDetails",
          "SumoLogicVulnerabilityEventsForwardingDetails",
          "WebexEventsForwardingDetails",
          "WebexVulnerabilityEventsForwardingDetails",
          "SecureXEventsForwardingDetails",
          "SecureXVulnerabilityEventsForwardingDetails"
        ],
        "type": "string"
      },
      "Expansion": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ExpansionPut"
          },
          {
            "properties": {
              "accountName": {
                "readOnly": true,
                "type": "string"
              },
              "clusterId": {
                "format": "uuid",
                "type": "string"
              },
              "clusterName": {
                "readOnly": true,
                "type": "string"
              },
              "controllerEnabled": {
                "readOnly": true,
                "type": "boolean"
              },
              "controllerId": {
                "readOnly": true,
                "type": "string"
              },
              "controllerIsUpdateEnabled": {
                "readOnly": true,
                "type": "boolean"
              },
              "controllerLastActive": {
                "description": "The last time that the agent sent telemetries",
                "format": "date-time",
                "type": "string"
              },
              "controllerStatus": {
                "readOnly": true,
                "type": "string"
              },
              "controllerVersion": {
                "readOnly": true,
                "type": "string"
              },
              "id": {
                "description": "unique Id",
                "format": "uuid",
                "readOnly": true,
                "type": "string"
              },
              "instanceId": {
                "readOnly": true,
                "type": "string"
              },
              "namespaceId": {
                "format": "uuid",
                "type": "string"
              },
              "shouldSendMetrics": {
                "type": "boolean"
              }
            },
            "required": [
              "clusterId",
              "namespaceId"
            ],
            "type": "object"
          }
        ],
        "description": "represent expansion object",
        "type": "object"
      },
      "ExpansionAnyConnectionRulePart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectionRulePart"
          },
          {
            "properties": {
              "environments": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "ExpansionLabelsConnectionRulePart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectionRulePart"
          },
          {
            "properties": {
              "environments": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "labels": {
                "items": {
                  "$ref": "#/components/schemas/Label"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "ExpansionNameConnectionRulePart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectionRulePart"
          },
          {
            "properties": {
              "environments": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "names": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "ExpansionPut": {
        "description": "represent expansion object used in put method",
        "properties": {
          "labels": {
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "type": "array"
          },
          "name": {
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
            "type": "string"
          },
          "workloadAddresses": {
            "items": {
              "$ref": "#/components/schemas/WorkloadAddress"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "name",
          "workloadAddresses"
        ],
        "type": "object"
      },
      "ExpansionTelemetryInfo": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isIdentified": {
            "type": "boolean"
          },
          "isProtected": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExternalCaDetails": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExternalConnectionRulePart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectionRulePart"
          }
        ],
        "description": "object to identify external connections. Does not need to have any properties"
      },
      "FqdnConnectionRulePart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectionRulePart"
          },
          {
            "properties": {
              "fqdnAddresses": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "FunctionAnyServerlessRuleType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerlessRuleType"
          }
        ]
      },
      "FunctionArnServerlessRuleType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerlessRuleType"
          },
          {
            "properties": {
              "arns": {
                "description": "function that match one of the given arns",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "FunctionNameServerlessRuleType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerlessRuleType"
          },
          {
            "properties": {
              "names": {
                "description": "functions that match one of the given ARNs",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "FuzzingMethod": {
        "properties": {
          "findings": {
            "$ref": "#/components/schemas/FuzzingScoreFindings"
          },
          "method": {
            "$ref": "#/components/schemas/HttpMethod"
          },
          "path": {
            "type": "string"
          },
          "requestCount": {
            "type": "integer"
          },
          "severity": {
            "$ref": "#/components/schemas/ApiSecurityRiskSeverity"
          }
        },
        "type": "object"
      },
      "FuzzingScoreElementFinding": {
        "properties": {
          "additionalInfo": {
            "additionalProperties": {
              "type": "string"
            },
            "title": "Dictionary entries",
            "type": "object"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "specPath": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "FuzzingScoreFindings": {
        "properties": {
          "critical": {
            "$ref": "#/components/schemas/FuzzingScoreFindingsList"
          },
          "high": {
            "$ref": "#/components/schemas/FuzzingScoreFindingsList"
          },
          "low": {
            "$ref": "#/components/schemas/FuzzingScoreFindingsList"
          },
          "medium": {
            "$ref": "#/components/schemas/FuzzingScoreFindingsList"
          },
          "unclassified": {
            "$ref": "#/components/schemas/FuzzingScoreFindingsList"
          }
        },
        "type": "object"
      },
      "FuzzingScoreFindingsList": {
        "properties": {
          "count": {
            "type": "integer"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/FuzzingScoreElementFinding"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FuzzingStatus": {
        "description": "An enumeration.",
        "enum": [
          "READY",
          "IN_PROGRESS",
          "DONE",
          "ERROR",
          "UNFUZZABLE",
          "STOP_IN_PROGRESS",
          "CANCELLED"
        ],
        "title": "FuzzingStatus",
        "type": "string"
      },
      "FuzzingTestTag": {
        "properties": {
          "methods": {
            "items": {
              "$ref": "#/components/schemas/FuzzingMethod"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "severity": {
            "$ref": "#/components/schemas/ApiSecurityRiskSeverity"
          }
        },
        "type": "object"
      },
      "FuzzingTestTags": {
        "properties": {
          "elements": {
            "items": {
              "$ref": "#/components/schemas/FuzzingTestTag"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/ApiSecurityRiskSeverity"
          }
        },
        "type": "object"
      },
      "Gateway": {
        "properties": {
          "clusterName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/GatewayType"
          }
        },
        "required": [
          "name",
          "clusterName",
          "type"
        ],
        "type": "object"
      },
      "GatewayClusterInfo": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isEligible": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "isEligible"
        ],
        "type": "object"
      },
      "GatewayStatus": {
        "enum": [
          "ENABLED",
          "DELETED",
          "PENDING_INSTALL"
        ],
        "type": "string"
      },
      "GatewayType": {
        "enum": [
          "APIGEE_X",
          "KONG_INTERNAL",
          "TYK_INTERNAL",
          "F5_BIG_IP"
        ],
        "type": "string"
      },
      "GatherInfoOption": {
        "properties": {
          "optionName": {
            "type": "string"
          },
          "prefixes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GatherInformationResponse": {
        "properties": {
          "state": {
            "$ref": "#/components/schemas/BackgroundJobState"
          }
        },
        "type": "object"
      },
      "GraphNumberPoint": {
        "properties": {
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "graph": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "GroupIdentifier": {
        "properties": {
          "groupId": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "HostPortRange": {
        "properties": {
          "max": {
            "format": "int32",
            "maximum": 65535,
            "minimum": 0,
            "type": "integer"
          },
          "min": {
            "format": "int32",
            "maximum": 65535,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "HttpLayer7Part": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Layer7SettingsPart"
          },
          {
            "properties": {
              "paths": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "headers": {
                "items": {
                  "$ref": "#/components/schemas/Layer7Attribute"
                },
                "type": "array"
              },
              "isIntercept": {
                "default": false,
                "type": "boolean"
              },
              "methods": {
                "items": {
                  "$ref": "#/components/schemas/HttpMethod"
                },
                "type": "array"
              },
              "queryParameters": {
                "items": {
                  "$ref": "#/components/schemas/Layer7Attribute"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "HttpMethod": {
        "enum": [
          "GET",
          "POST",
          "PUT",
          "DELETE",
          "HEAD",
          "CONNECT",
          "OPTIONS",
          "TRACE",
          "PATCH"
        ],
        "type": "string"
      },
      "HttpPerformanceMetrics": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PerformanceMetrics"
          },
          {
            "properties": {
              "averageResponseTime": {
                "$ref": "#/components/schemas/AverageResponseTimeGraph"
              },
              "errorRate": {
                "$ref": "#/components/schemas/ErrorRateGraph"
              },
              "ops": {
                "$ref": "#/components/schemas/OpsGraph"
              }
            },
            "type": "object"
          }
        ]
      },
      "IDRange": {
        "properties": {
          "max": {
            "format": "int64",
            "maximum": 65535,
            "type": "integer"
          },
          "min": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "IdentifierArray": {
        "items": {
          "format": "uuid",
          "type": "string"
        },
        "type": "array"
      },
      "IdentityVerBeta": {
        "properties": {
          "agentId": {
            "pattern": "^([0-9a-f]{2}:){31}[0-9a-f]{2}$",
            "type": "string"
          },
          "processId": {
            "type": "integer"
          },
          "timestamp": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "agentId",
          "processId",
          "timestamp"
        ],
        "type": "object"
      },
      "IdentityVerGamma": {
        "discriminator": {
          "propertyName": "identityType"
        },
        "properties": {
          "identityType": {
            "enum": [
              "ProcessIdentityVerGamma",
              "PodIdentityVerGamma"
            ],
            "type": "string"
          }
        },
        "required": [
          "identityType"
        ],
        "type": "object"
      },
      "IgnoredRisk": {
        "description": "represent ignore risk object",
        "discriminator": {
          "propertyName": "ignoredRiskType"
        },
        "properties": {
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "ignoredRiskType": {
            "enum": [
              "ClusterIgnoredRisk",
              "AnyClusterIgnoredRisk",
              "AnyEnvironmentIgnoredRisk",
              "EnvironmentIgnoredRisk",
              "WorkloadIgnoredRisk"
            ],
            "type": "string"
          },
          "workloadRisksType": {
            "items": {
              "$ref": "#/components/schemas/WorkloadRiskReasonType"
            },
            "type": "array"
          }
        },
        "required": [
          "workloadRisksType",
          "ignoredRiskType"
        ],
        "type": "object"
      },
      "Image": {
        "properties": {
          "dockerfileScanSeverity": {
            "$ref": "#/components/schemas/DockerfileScanSeverity"
          },
          "hash": {
            "type": "string"
          },
          "repository": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "vulnerabilitySeverityLevel": {
            "$ref": "#/components/schemas/VulnerabilitySeverity"
          }
        },
        "type": "object"
      },
      "ImageDef": {
        "description": "Authorized image hash",
        "properties": {
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "imageHash": {
            "description": "Valid hash for the image. * will authorize image name without validating hash",
            "type": "string"
          },
          "imageName": {
            "type": "string"
          },
          "imageTags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "timeAdded": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ImageDefGet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ImageDef"
          },
          {
            "properties": {
              "dockerfileScanResultsSummary": {
                "$ref": "#/components/schemas/DockerfileScanResultsSummary"
              },
              "imageSourceType": {
                "$ref": "#/components/schemas/ImageSourceType"
              },
              "isIdentified": {
                "description": "Specify if the image is identified",
                "type": "boolean"
              },
              "isScanned": {
                "description": "Specify if the image has been scanned during CI",
                "type": "boolean"
              },
              "licenses": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "vulnerabilitiesSummary": {
                "$ref": "#/components/schemas/VulnerabilitiesSummary"
              }
            },
            "type": "object"
          }
        ]
      },
      "ImageDefPostForAdmin": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ImageDefGet"
          },
          {
            "properties": {
              "highestSeverity": {
                "$ref": "#/components/schemas/VulnerabilitySeverity",
                "description": "Highest severity detected on image"
              },
              "numOfVulnerabilities": {
                "description": "num of vulnerabilities detected on image",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "ImageDefPut": {
        "properties": {
          "imageHash": {
            "description": "image hash",
            "type": "string"
          }
        },
        "required": [
          "imageHash"
        ],
        "type": "object"
      },
      "ImageLayer": {
        "description": "image layer",
        "properties": {
          "command": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "vulnerabilities": {
            "items": {
              "$ref": "#/components/schemas/Vulnerability"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ImageLayers": {
        "description": "image layers",
        "properties": {
          "safeLayers": {
            "items": {
              "$ref": "#/components/schemas/ImageLayer"
            },
            "type": "array"
          },
          "vulnerableLayers": {
            "items": {
              "$ref": "#/components/schemas/ImageLayer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ImageSourceType": {
        "default": "DOCKER_PLUGIN_CI",
        "enum": [
          "JENKINS_PLUGIN_CI",
          "DOCKER_PLUGIN_CI",
          "RISK_ASSESSMENT",
          "JFROG_XRAY",
          "RUNTIME"
        ],
        "type": "string"
      },
      "ImagesWithLicenses": {
        "properties": {
          "imageId": {
            "format": "uuid",
            "type": "string"
          },
          "imageName": {
            "type": "string"
          },
          "licenses": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "InjectedSidecar": {
        "properties": {
          "isAllowed": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "InjectedSidecarSection": {
        "properties": {
          "injectedSidecars": {
            "items": {
              "$ref": "#/components/schemas/InjectedSidecar"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "InjectionRuleType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AppRuleType"
          },
          {
            "properties": {
              "tokens": {
                "items": {
                  "$ref": "#/components/schemas/TokenDetails"
                },
                "type": "array"
              }
            },
            "required": [
              "tokens"
            ],
            "type": "object"
          }
        ]
      },
      "InstanceState": {
        "properties": {
          "code": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "IpAddressComparison": {
        "description": "An enumeration.",
        "enum": [
          "belongs_to"
        ],
        "title": "IpAddressComparison",
        "type": "string"
      },
      "IpAndPort": {
        "description": "An object contains ip and port",
        "properties": {
          "ip": {
            "type": "string"
          },
          "port": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "IpPermission": {
        "properties": {
          "fromPort": {
            "type": "integer"
          },
          "ipProtocol": {
            "type": "string"
          },
          "ipv4Ranges": {
            "items": {
              "$ref": "#/components/schemas/IpRange"
            },
            "type": "array"
          },
          "ipv6Ranges": {
            "items": {
              "$ref": "#/components/schemas/Ipv6Range"
            },
            "type": "array"
          },
          "prefixListIds": {
            "items": {
              "$ref": "#/components/schemas/PrefixListId"
            },
            "type": "array"
          },
          "toPort": {
            "type": "integer"
          },
          "userIdGroupPairs": {
            "items": {
              "$ref": "#/components/schemas/UserIdGroupPair"
            },
            "type": "array"
          },
          "vpcId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "IpProtoEnum": {
        "description": "An enumeration.",
        "enum": [
          "TCP",
          "UDP"
        ],
        "title": "IpProtoEnum",
        "type": "string"
      },
      "IpRange": {
        "properties": {
          "cidrIp": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "IpRangeConnectionRulePart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectionRulePart"
          },
          {
            "properties": {
              "networks": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "Ipv6Range": {
        "properties": {
          "cidrIp": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "IstioInstallationParameters": {
        "description": "istio related information",
        "properties": {
          "isIstioAlreadyInstalled": {
            "default": false,
            "description": "indicates whether Istio is already installed on this cluster (which means Secure Application should not install it)",
            "type": "boolean"
          },
          "istioVersion": {
            "description": "when istio already installed, choose the version from supported istio versions list: /istio/supportedVersions",
            "type": "string"
          }
        },
        "type": "object"
      },
      "JfrogRegistryCredentials": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StandardRegistryCredentials"
          },
          {
            "properties": {
              "xrayToken": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "K8sCISBenchmarkAccountSummary": {
        "properties": {
          "compliance": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "numberOfClusters": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "numberOfClustersWithActionItems": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "numberOfScannedClusters": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "K8sCISBenchmarkClusterSummary": {
        "properties": {
          "compliance": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "entries": {
            "items": {
              "$ref": "#/components/schemas/K8sCISBenchmarkResultGroup"
            },
            "type": "array"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "incompleteTests": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "nodesWithErrors": {
            "items": {
              "$ref": "#/components/schemas/K8sCISBenchmarkNodeWithError"
            },
            "type": "array"
          },
          "numberOfActionItems": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "numberOfInfoItems": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "numberOfItemsFailed": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "numberOfItemsPassed": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "orchestration": {
            "type": "string"
          },
          "scanTime": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "K8sCISBenchmarkClustersSummary": {
        "properties": {
          "compliance": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "numberOfActionItems": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "numberOfInfoItems": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "numberOfItemsFailed": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "numberOfItemsPassed": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "numberOfNodes": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "numberOfScannedNodes": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "orchestration": {
            "type": "string"
          },
          "scanState": {
            "$ref": "#/components/schemas/K8sCisBenchmarkScanState",
            "type": "object"
          },
          "scanTime": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "K8sCISBenchmarkNodeWithError": {
        "properties": {
          "error": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "K8sCISBenchmarkResultGroup": {
        "properties": {
          "compliance": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "index": {
            "type": "string"
          },
          "numberOfActionItems": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "numberOfInfoItems": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "numberOfItemsFailed": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "numberOfItemsPassed": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "subGroups": {
            "items": {
              "$ref": "#/components/schemas/K8sCISBenchmarkResultGroup"
            },
            "type": "array"
          },
          "tests": {
            "items": {
              "$ref": "#/components/schemas/K8sCISBenchmarkResultTest"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "K8sCISBenchmarkResultTest": {
        "properties": {
          "compliance": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "index": {
            "type": "string"
          },
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/K8sCISBenchmarkResultTestNode"
            },
            "type": "array"
          },
          "remediation": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/K8sCisBenchmarkTestStatus"
          },
          "type": {
            "enum": [
              "Automated",
              "Manual",
              "NA"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "K8sCISBenchmarkResultTestNode": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/K8sCisBenchmarkTestStatus"
          }
        },
        "type": "object"
      },
      "K8sCISBenchmarkUpdateNode": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "K8sCISBenchmarkUpdateNodeStatus": {
        "enum": [
          "FAIL",
          "PASS"
        ],
        "type": "string"
      },
      "K8sCISBenchmarkUpdateNodes": {
        "properties": {
          "clusterId": {
            "format": "uuid",
            "type": "string"
          },
          "index": {
            "type": "string"
          },
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/K8sCISBenchmarkUpdateNode"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/K8sCISBenchmarkUpdateNodeStatus"
          }
        },
        "required": [
          "clusterId",
          "index",
          "status",
          "nodes"
        ],
        "type": "object"
      },
      "K8sCisBenchmarkScanState": {
        "enum": [
          "READY",
          "IN_PROGRESS",
          "STARTING",
          "ERROR"
        ],
        "type": "string"
      },
      "K8sCisBenchmarkTestStatus": {
        "enum": [
          "FAIL",
          "PASS",
          "WARN",
          "INFO"
        ],
        "type": "string"
      },
      "KafkaAction": {
        "enum": [
          "Write",
          "Read"
        ],
        "type": "string"
      },
      "KafkaConnectionRulePart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectionRulePart"
          },
          {
            "properties": {
              "brokers": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "clusterId": {
                "format": "uuid",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "KafkaLayerPart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Layer7SettingsPart"
          },
          {
            "properties": {
              "actions": {
                "items": {
                  "$ref": "#/components/schemas/KafkaAction"
                },
                "type": "array"
              },
              "topics": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "KreRequest": {
        "properties": {
          "accountId": {
            "type": "string"
          },
          "command": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "KreResponse": {
        "properties": {
          "command": {
            "type": "string"
          },
          "commandId": {
            "type": "string"
          },
          "response": {
            "format": "binary",
            "type": "string"
          },
          "status": {
            "enum": [
              "PENDING_AGENT",
              "PENDING_AGENT_RESPONSE",
              "RESPONSE_RECEIVED"
            ],
            "type": "string"
          },
          "time": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "KubernetesAnnotation": {
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "KubernetesApiClustersScope": {
        "allOf": [
          {
            "$ref": "#/components/schemas/KubernetesApiRuleScope"
          },
          {
            "properties": {
              "clusters": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "clusters"
            ],
            "type": "object"
          }
        ]
      },
      "KubernetesApiCustomRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/KubernetesApiRule"
          },
          {
            "properties": {
              "action": {
                "$ref": "#/components/schemas/KubernetesApiRuleAction"
              },
              "apiActions": {
                "items": {
                  "$ref": "#/components/schemas/KubernetesAuditLogAction"
                },
                "type": "array"
              },
              "groupName": {
                "type": "string"
              },
              "id": {
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "resources": {
                "items": {
                  "$ref": "#/components/schemas/KubernetesApiResources"
                },
                "type": "array"
              },
              "ruleScope": {
                "$ref": "#/components/schemas/KubernetesApiRuleScope",
                "type": "object"
              },
              "status": {
                "$ref": "#/components/schemas/KubernetesApiRuleStatus"
              },
              "users": {
                "items": {
                  "$ref": "#/components/schemas/KubernetesApiRuleUser"
                },
                "type": "array"
              }
            },
            "required": [
              "action",
              "status",
              "ruleScope",
              "name"
            ],
            "type": "object"
          }
        ]
      },
      "KubernetesApiEnvironmentScope": {
        "allOf": [
          {
            "$ref": "#/components/schemas/KubernetesApiRuleScope"
          },
          {
            "type": "object"
          },
          {
            "properties": {
              "environment": {
                "$ref": "#/components/schemas/EnvironmentRuleType"
              }
            },
            "required": [
              "environment"
            ],
            "type": "object"
          }
        ]
      },
      "KubernetesApiPolicy": {
        "properties": {
          "defaultRule": {
            "$ref": "#/components/schemas/DefaultKubernetesApiRule"
          },
          "userRules": {
            "items": {
              "$ref": "#/components/schemas/KubernetesApiRule"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "KubernetesApiPolicyHistory": {
        "properties": {
          "editor": {
            "type": "string"
          },
          "policy": {
            "$ref": "#/components/schemas/KubernetesApiPolicy"
          },
          "updateTime": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "KubernetesApiRecommendedRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/KubernetesApiRule"
          },
          {
            "properties": {
              "action": {
                "$ref": "#/components/schemas/KubernetesApiRuleAction"
              },
              "excludedUsers": {
                "items": {
                  "$ref": "#/components/schemas/KubernetesApiRuleUser"
                },
                "type": "array"
              },
              "groupName": {
                "type": "string"
              },
              "id": {
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "recommendedRuleId": {
                "format": "uuid",
                "type": "string"
              },
              "ruleScope": {
                "$ref": "#/components/schemas/KubernetesApiRuleScope",
                "type": "object"
              },
              "status": {
                "$ref": "#/components/schemas/KubernetesApiRuleStatus"
              }
            },
            "required": [
              "action",
              "status",
              "ruleScope",
              "recommendedRuleId",
              "name"
            ],
            "type": "object"
          }
        ]
      },
      "KubernetesApiResources": {
        "properties": {
          "group": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "KubernetesApiRule": {
        "discriminator": {
          "propertyName": "kubernetesApiRuleType"
        },
        "properties": {
          "kubernetesApiRuleType": {
            "enum": [
              "KubernetesApiCustomRule",
              "KubernetesApiRecommendedRule"
            ],
            "type": "string"
          },
          "ruleOrigin": {
            "$ref": "#/components/schemas/KubernetesApiRuleOrigin"
          }
        },
        "required": [
          "kubernetesApiRuleType"
        ],
        "type": "object"
      },
      "KubernetesApiRuleAction": {
        "enum": [
          "ALLOW",
          "DETECT",
          "BLOCK",
          "IGNORE"
        ],
        "type": "string"
      },
      "KubernetesApiRuleOrigin": {
        "default": "USER",
        "enum": [
          "USER",
          "AUTOMATED_POLICY",
          "SYSTEM"
        ],
        "type": "string"
      },
      "KubernetesApiRuleScope": {
        "discriminator": {
          "propertyName": "scopePartType"
        },
        "properties": {
          "scopePartType": {
            "enum": [
              "KubernetesApiEnvironmentScope",
              "KubernetesApiClustersScope"
            ],
            "type": "string"
          }
        },
        "required": [
          "scopePartType"
        ],
        "type": "object"
      },
      "KubernetesApiRuleStatus": {
        "enum": [
          "ENABLED",
          "DISABLED",
          "DELETED"
        ],
        "type": "string"
      },
      "KubernetesApiRuleUser": {
        "properties": {
          "userName": {
            "type": "string"
          },
          "userType": {
            "$ref": "#/components/schemas/KubernetesAuditLogUserType"
          }
        },
        "type": "object"
      },
      "KubernetesApiViolation": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/KubernetesApiRuleAction"
          },
          "isDefaultRule": {
            "type": "boolean"
          },
          "matchedRecommendedRule": {
            "$ref": "#/components/schemas/MatchedRecommendedRule"
          },
          "userRule": {
            "$ref": "#/components/schemas/KubernetesApiViolationUserRule"
          }
        },
        "type": "object"
      },
      "KubernetesApiViolationUserRule": {
        "properties": {
          "isDeleted": {
            "type": "boolean"
          },
          "ruleId": {
            "format": "uuid",
            "type": "string"
          },
          "ruleName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "KubernetesAuditLog": {
        "description": "Single kubernetes audit log",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/KubernetesAuditLogAction"
          },
          "clusterId": {
            "format": "uuid",
            "type": "string"
          },
          "clusterName": {
            "type": "string"
          },
          "environmentId": {
            "format": "uuid",
            "type": "string"
          },
          "environmentName": {
            "type": "string"
          },
          "firstSeen": {
            "format": "date-time",
            "type": "string"
          },
          "lastSeen": {
            "format": "date-time",
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "resourceGroup": {
            "type": "string"
          },
          "resourceKind": {
            "type": "string"
          },
          "resourceName": {
            "type": "string"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          },
          "user": {
            "type": "string"
          },
          "userGroups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "userNamespace": {
            "type": "string"
          },
          "userType": {
            "$ref": "#/components/schemas/KubernetesAuditLogUserType"
          },
          "violation": {
            "$ref": "#/components/schemas/KubernetesApiViolation"
          }
        },
        "type": "object"
      },
      "KubernetesAuditLogAction": {
        "enum": [
          "CREATE",
          "UPDATE",
          "DELETE",
          "CONNECT"
        ],
        "type": "string"
      },
      "KubernetesAuditLogUserType": {
        "enum": [
          "USER",
          "SERVICEACCOUNT",
          "GROUP"
        ],
        "type": "string"
      },
      "KubernetesCluster": {
        "properties": {
          "accountName": {
            "type": "string"
          },
          "agentFailClose": {
            "default": false,
            "description": "indicates fail close behavior on Secure Application agent failure",
            "type": "boolean"
          },
          "apiIntelligenceDAST": {
            "default": false,
            "description": "indicates whether apiIntelligenceDAST is enabled",
            "type": "boolean"
          },
          "autoLabelEnabled": {
            "default": false,
            "description": "indicates whether auto label is enabled",
            "type": "boolean"
          },
          "autoUpdateEnabled": {
            "default": true,
            "description": "indicates whether auto cluster is enabled",
            "type": "boolean"
          },
          "automatedPolicyRequiresDeployer": {
            "default": false,
            "description": "indicates whether deployer is required for the automated policy",
            "type": "boolean"
          },
          "ciImageSignatureValidation": {
            "default": false,
            "description": "Enable pod template images signature validation",
            "type": "boolean"
          },
          "ciImageValidation": {
            "default": false,
            "description": "Enable pod template images validation",
            "type": "boolean"
          },
          "clusterPodDefinitionSource": {
            "$ref": "#/components/schemas/ClusterPodDefinitionSource"
          },
          "enableConnectionsControl": {
            "default": true,
            "description": "indicates whether Secure Application allows connections actions and detections",
            "type": "boolean"
          },
          "id": {
            "description": "Id of the cluster.",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "installEnvoyTracingSupport": {
            "default": false,
            "description": "indicates whether envoy/istio will be used as a trace source",
            "type": "boolean"
          },
          "installTracingSupport": {
            "default": false,
            "description": "indicates whether to install tracing support, enable for apiSecurity accounts",
            "type": "boolean"
          },
          "installationSource": {
            "$ref": "#/components/schemas/installationSource"
          },
          "internalRegistryParameters": {
            "$ref": "#/components/schemas/internalRegistryParameters"
          },
          "isHoldApplicationUntilProxyStarts": {
            "default": false,
            "description": "indicates whether the controller should hold the application until the proxy starts",
            "type": "boolean"
          },
          "isIstioIngressEnabled": {
            "default": false,
            "description": "indicates whether Istio ingress is enabled",
            "type": "boolean"
          },
          "isMultiCluster": {
            "default": false,
            "description": "indicates whether this cluster should support multi-cluster communication",
            "type": "boolean"
          },
          "isPersistent": {
            "default": false,
            "description": "indicates whether the agent should run in persistent mode",
            "type": "boolean"
          },
          "istioIngressAnnotations": {
            "description": "annotations for load balancers",
            "items": {
              "$ref": "#/components/schemas/KubernetesAnnotation"
            },
            "type": "array"
          },
          "istioInstallationParameters": {
            "$ref": "#/components/schemas/IstioInstallationParameters"
          },
          "kubernetesSecurity": {
            "default": true,
            "description": "indicates whether kubernetes security is enabled",
            "type": "boolean"
          },
          "minimalNumberOfControllerReplicas": {
            "default": 1,
            "maximum": 5,
            "minimum": 1,
            "type": "integer"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "orchestrationType": {
            "default": "GKE",
            "enum": [
              "GKE",
              "OPENSHIFT",
              "RANCHER",
              "AKS",
              "EKS",
              "KUBERNETES",
              "IKS"
            ],
            "type": "string"
          },
          "preserveOriginalSourceIp": {
            "default": false,
            "description": "indicates whether the agent should preserve the original source ip",
            "type": "boolean"
          },
          "proxyConfiguration": {
            "$ref": "#/components/schemas/ProxyConfiguration",
            "description": "indicates whether this cluster should use a proxy server"
          },
          "restrictRegistires": {
            "default": false,
            "description": "indicates whether the agent validate the images origin",
            "type": "boolean"
          },
          "serviceDiscoveryIsolationEnabled": {
            "default": false,
            "description": "indicates whether the service discovery isolation is enabled",
            "type": "boolean"
          },
          "sidecarsResources": {
            "$ref": "#/components/schemas/sidecarsResource"
          },
          "supportExternalTraceSource": {
            "default": false,
            "description": "indicates whether external trace sources are supported",
            "type": "boolean"
          },
          "tlsInspectionEnabled": {
            "default": true,
            "description": "indicates whether TLS inspection is enabled",
            "type": "boolean"
          },
          "tokenInjectionEnabled": {
            "default": false,
            "description": "indicates whether token injection is enabled",
            "type": "boolean"
          },
          "useExternalCA": {
            "default": false,
            "description": "indicates whether kubernetes should use external CA",
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "orchestrationType"
        ],
        "type": "object"
      },
      "KubernetesClusterController": {
        "properties": {
          "Agent": {
            "$ref": "#/components/schemas/Agent"
          },
          "KubernetesCluster": {
            "$ref": "#/components/schemas/KubernetesCluster"
          },
          "shouldSendMetrics": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "KubernetesClusterDeleteDependencies": {
        "properties": {
          "clusterEventRules": {
            "items": {
              "$ref": "#/components/schemas/deleteDependencyElement"
            },
            "type": "array"
          },
          "connectionRules": {
            "items": {
              "$ref": "#/components/schemas/deleteDependencyElement"
            },
            "type": "array"
          },
          "deployers": {
            "items": {
              "$ref": "#/components/schemas/deleteDependencyElement"
            },
            "type": "array"
          },
          "deploymentRules": {
            "items": {
              "$ref": "#/components/schemas/deleteDependencyElement"
            },
            "type": "array"
          },
          "environments": {
            "$ref": "#/components/schemas/DeleteDependencyElementEnvironments"
          },
          "expansions": {
            "items": {
              "$ref": "#/components/schemas/deleteDependencyElement"
            },
            "type": "array"
          },
          "gateways": {
            "items": {
              "$ref": "#/components/schemas/deleteDependencyElement"
            },
            "type": "array"
          },
          "registries": {
            "items": {
              "$ref": "#/components/schemas/deleteDependencyElement"
            },
            "type": "array"
          },
          "trustedSigners": {
            "items": {
              "$ref": "#/components/schemas/deleteDependencyElement"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "KubernetesEnvironment": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "kubernetesCluster": {
            "format": "uuid",
            "type": "string"
          },
          "kubernetesClusterName": {
            "type": "string"
          },
          "namespaceLabels": {
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "type": "array"
          },
          "namespaces": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "preserveOriginalSourceIp": {
            "readOnly": true,
            "type": "boolean"
          }
        },
        "required": [
          "kubernetesCluster"
        ],
        "type": "object"
      },
      "KubernetesNamespace": {
        "properties": {
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "labels": {
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "uid": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "KubernetesNamespaceResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/KubernetesNamespace"
          }
        ],
        "description": "Single telemetry entry",
        "type": "object"
      },
      "KubernetesResource": {
        "properties": {
          "groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "kind": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "KubernetesService": {
        "properties": {
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/KubernetesNamespaceResponse"
          }
        },
        "type": "object"
      },
      "KubernetesUserDetails": {
        "properties": {
          "userName": {
            "type": "string"
          },
          "userNamespace": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "KubernetesUsersByType": {
        "properties": {
          "userType": {
            "$ref": "#/components/schemas/KubernetesAuditLogUserType"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/KubernetesUserDetails"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Label": {
        "properties": {
          "key": {
            "pattern": "[^:]*",
            "type": "string"
          },
          "value": {
            "pattern": "[^:]*",
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "Layer7Attribute": {
        "description": "Collection of layer 7 attributes",
        "properties": {
          "key": {
            "type": "string"
          },
          "values": {
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "key",
          "values"
        ],
        "type": "object"
      },
      "Layer7SettingsPart": {
        "discriminator": {
          "propertyName": "layer7Protocol"
        },
        "properties": {
          "layer7Protocol": {
            "enum": [
              "HttpLayer7Part",
              "KafkaLayerPart",
              "ApiServiceLayerPart"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "LeanKubernetesCluster": {
        "properties": {
          "clusterPodDefinitionSource": {
            "$ref": "#/components/schemas/ClusterPodDefinitionSource"
          },
          "id": {
            "description": "Id of the cluster.",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "installTracingSupport": {
            "default": false,
            "description": "indicates whether to install tracing support, enable for apiSecurity accounts",
            "type": "boolean"
          },
          "kubernetesSecurity": {
            "default": true,
            "description": "indicates whether kubernetes security is enabled",
            "type": "boolean"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "useExternalCA": {
            "default": false,
            "description": "indicates whether kubernetes should use external CA",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "LicensingDashboard": {
        "properties": {
          "stats": {
            "$ref": "#/components/schemas/StatsSection"
          },
          "usageAndPricing": {
            "$ref": "#/components/schemas/UsageAndPricingSection"
          }
        },
        "type": "object"
      },
      "ManagementParameters": {
        "properties": {
          "authServer": {
            "type": "string"
          },
          "captchaSiteKey": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "iamUrl": {
            "type": "string"
          },
          "latestAgentVersion": {
            "type": "string"
          },
          "latestIstioVersion": {
            "type": "string"
          },
          "segmentFrontendWriteKey": {
            "type": "string"
          },
          "upgradeUrl": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MatchedRecommendedRule": {
        "description": "recommended rule that might reduce potential risk",
        "properties": {
          "potentialRiskDescription": {
            "type": "string"
          },
          "ruleId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MitreDashboard": {
        "properties": {
          "lastUpdate": {
            "format": "date-time",
            "type": "string"
          },
          "namespaces": {
            "items": {
              "$ref": "#/components/schemas/MitreDashboardNamespace"
            },
            "type": "array"
          },
          "table": {
            "$ref": "#/components/schemas/MitreTable"
          }
        },
        "type": "object"
      },
      "MitreDashboardNamespace": {
        "properties": {
          "isCompromised": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MitreTable": {
        "properties": {
          "credentialsAccess": {
            "items": {
              "$ref": "#/components/schemas/MitreTechnique"
            },
            "type": "array"
          },
          "defenseEvasion": {
            "items": {
              "$ref": "#/components/schemas/MitreTechnique"
            },
            "type": "array"
          },
          "discovery": {
            "items": {
              "$ref": "#/components/schemas/MitreTechnique"
            },
            "type": "array"
          },
          "execution": {
            "items": {
              "$ref": "#/components/schemas/MitreTechnique"
            },
            "type": "array"
          },
          "impact": {
            "items": {
              "$ref": "#/components/schemas/MitreTechnique"
            },
            "type": "array"
          },
          "initialAccess": {
            "items": {
              "$ref": "#/components/schemas/MitreTechnique"
            },
            "type": "array"
          },
          "lateralMovement": {
            "items": {
              "$ref": "#/components/schemas/MitreTechnique"
            },
            "type": "array"
          },
          "persistence": {
            "items": {
              "$ref": "#/components/schemas/MitreTechnique"
            },
            "type": "array"
          },
          "privilegeEscalation": {
            "items": {
              "$ref": "#/components/schemas/MitreTechnique"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MitreTechnique": {
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/MitreTechniqueStatus"
          },
          "type": {
            "$ref": "#/components/schemas/MitreTechniqueType"
          }
        },
        "type": "object"
      },
      "MitreTechniqueAffectedCluster": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MitreTechniqueAffectedElement"
          },
          {
            "properties": {
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "MitreTechniqueAffectedElement": {
        "discriminator": {
          "propertyName": "MitreTechniqueAffectedElementType"
        },
        "properties": {
          "MitreTechniqueAffectedElementType": {
            "enum": [
              "MitreTechniqueAffectedOwner",
              "MitreTechniqueAffectedWorkload",
              "MitreTechniqueAffectedNamespace",
              "MitreTechniqueAffectedCluster"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MitreTechniqueAffectedNamespace": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MitreTechniqueAffectedElement"
          },
          {
            "properties": {
              "cluster": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "MitreTechniqueAffectedOwner": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MitreTechniqueAffectedElement"
          },
          {
            "properties": {
              "cluster": {
                "type": "string"
              },
              "isApproved": {
                "type": "boolean"
              },
              "name": {
                "type": "string"
              },
              "namespaces": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "type": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "MitreTechniqueAffectedWorkload": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MitreTechniqueAffectedElement"
          },
          {
            "properties": {
              "cluster": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "namespaces": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "type": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "MitreTechniqueFixInfo": {
        "properties": {
          "affectedElements": {
            "items": {
              "$ref": "#/components/schemas/MitreTechniqueAffectedElement"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MitreTechniqueInfo": {
        "properties": {
          "affectedElements": {
            "items": {
              "$ref": "#/components/schemas/MitreTechniqueAffectedElement"
            },
            "type": "array"
          },
          "affectedTechniques": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "explanation": {
            "type": "string"
          },
          "fixDescription": {
            "type": "string"
          },
          "howToFix": {
            "type": "string"
          },
          "isFixAvilable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "MitreTechniqueStatus": {
        "enum": [
          "SUCCESS",
          "WARNING",
          "ERROR"
        ],
        "type": "string"
      },
      "MitreTechniqueType": {
        "enum": [
          "COMPROMISED_IMAGES",
          "UNAUTHORISED_REGISTRIES_USAGE",
          "SUSPICIOUS_DEPLOYMENT",
          "VULNERABLE_APPLICATION",
          "EXPOSED_K8S_DASHBOARD",
          "EXPLOIT_PUBLIC_FACING_APPLICATION",
          "CONTAINER_SERVICE",
          "DEPLOY_CONTAINER",
          "SSH_CONNECTION",
          "WRITEABLE_HOST_PATH",
          "CRON_JOBS",
          "PRIVILEGED_OR_ROOT_CONTAINER",
          "PRIVILEGE_ESCALATION_ENABLED",
          "CLUSTER_ADMIN_BINDING",
          "UNAUTHORIZED_CLUSTER_ADMIN_BINDING",
          "ACCESS_CLUSTER_RESOURCES",
          "CLEAR_CONTAINER_LOGS",
          "CLEAR_K8S_EVENTS",
          "LIST_SECRETS",
          "SERVICE_ACCOUNT_ACCESS",
          "CONTAINER_RESOURCE_DISCOVERY",
          "CLUSTER_INTERNAL_NETWORKING",
          "TILLER_ENDPOINT_ACCESS",
          "DATA_DESTRUCTION",
          "CORE_DNS_POISONING"
        ],
        "type": "string"
      },
      "NameEnvironmentRuleType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EnvironmentRuleType"
          },
          {
            "properties": {
              "names": {
                "description": "envs that match one of the given names",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "Namespace": {
        "allOf": [
          {
            "$ref": "#/components/schemas/KubernetesNamespace"
          },
          {
            "properties": {
              "clusterName": {
                "type": "string"
              },
              "protectionStatus": {
                "$ref": "#/components/schemas/NamespaceProtectionStatus"
              },
              "runningPods": {
                "type": "integer"
              },
              "systemNamespace": {
                "readOnly": true,
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "clusterName",
              "labels",
              "runningPods"
            ],
            "type": "object"
          }
        ]
      },
      "NamespaceFilter": {
        "properties": {
          "clusterId": {
            "format": "uuid",
            "type": "string"
          },
          "namespaceIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "clusterId"
        ],
        "type": "object"
      },
      "NamespaceProtectionStatus": {
        "enum": [
          "FULL",
          "DEPLOYMENT_ONLY",
          "CONNECTION_ONLY",
          "DISABLED"
        ],
        "type": "string"
      },
      "NetworkApiSecurityService": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "risk": {
            "$ref": "#/components/schemas/RiskSeverity"
          }
        },
        "type": "object"
      },
      "NetworkApp": {
        "properties": {
          "apiSecurity": {
            "$ref": "#/components/schemas/NetworkApiSecurityService"
          },
          "appId": {
            "format": "uuid",
            "type": "string"
          },
          "appRisk": {
            "$ref": "#/components/schemas/RiskSeverity"
          },
          "args": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "cwd": {
            "type": "string"
          },
          "environmentId": {
            "format": "uuid",
            "type": "string"
          },
          "executablePath": {
            "type": "string"
          },
          "expansion": {
            "$ref": "#/components/schemas/NetworkExpansion"
          },
          "hostsId": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "hostsIp": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "hostsName": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "labels": {
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "maxItems": 10,
            "type": "array"
          },
          "lastSeen": {
            "format": "date-time",
            "type": "string"
          },
          "lastViolation": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pod": {
            "$ref": "#/components/schemas/NetworkPod"
          },
          "port": {
            "type": "string"
          },
          "processName": {
            "type": "string"
          },
          "rule": {
            "$ref": "#/components/schemas/EnvironmentRuleBasic"
          },
          "startTime": {
            "format": "date-time",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/TelemetryAvailabilityState"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "NetworkAppRuleType": {
        "enum": [
          "USER_RULE",
          "DEFAULT_RULE",
          "UNIDENTIFIED_PODS_RULE"
        ],
        "type": "string"
      },
      "NetworkConnection": {
        "properties": {
          "destinationId": {
            "description": "Destination App id",
            "format": "uuid",
            "type": "string"
          },
          "destinationPortNumber": {
            "type": "integer"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "numberOfConnections": {
            "type": "integer"
          },
          "protocol": {
            "type": "string"
          },
          "sourceId": {
            "description": "Source App id",
            "format": "uuid",
            "type": "string"
          },
          "startTime": {
            "format": "date-time",
            "type": "string"
          },
          "violation": {
            "properties": {
              "encryptRule": {
                "$ref": "#/components/schemas/ConnectionRuleBasic"
              },
              "encryptionReason": {
                "$ref": "#/components/schemas/EncryptionReason"
              },
              "lastViolation": {
                "format": "date-time",
                "type": "string"
              },
              "rule": {
                "$ref": "#/components/schemas/ConnectionRuleBasic"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "NetworkConnectionRuleType": {
        "enum": [
          "USER_RULE",
          "DEFAULT_RULE",
          "DIRECT_POD_RULE"
        ],
        "type": "string"
      },
      "NetworkContainer": {
        "properties": {
          "image": {
            "$ref": "#/components/schemas/NetworkImage"
          }
        },
        "type": "object"
      },
      "NetworkEnvironment": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "NetworkExpansion": {
        "properties": {
          "cluster": {
            "type": "string"
          },
          "ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "instanceId": {
            "type": "string"
          },
          "labels": {
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "namespaceId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NetworkImage": {
        "properties": {
          "jfrogProperties": {
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "type": "array"
          },
          "repository": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "vulnerabilitySeverityLevel": {
            "$ref": "#/components/schemas/VulnerabilitySeverity"
          }
        },
        "type": "object"
      },
      "NetworkMap": {
        "properties": {
          "apps": {
            "items": {
              "$ref": "#/components/schemas/NetworkApp"
            },
            "type": "array"
          },
          "connections": {
            "items": {
              "$ref": "#/components/schemas/NetworkConnection"
            },
            "type": "array"
          },
          "environments": {
            "items": {
              "$ref": "#/components/schemas/NetworkEnvironment"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "NetworkPod": {
        "properties": {
          "cluster": {
            "type": "string"
          },
          "clusterId": {
            "format": "uuid",
            "type": "string"
          },
          "containers": {
            "items": {
              "$ref": "#/components/schemas/NetworkContainer"
            },
            "type": "array"
          },
          "highestVulnerabilitySeverityLevel": {
            "$ref": "#/components/schemas/VulnerabilitySeverity"
          },
          "hosts": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "isIdentified": {
            "type": "boolean"
          },
          "kind": {
            "$ref": "#/components/schemas/PodTemplateKind"
          },
          "labels": {
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "type": "array"
          },
          "name": {
            "description": "in pod template, this is the normalized name (for example, get it from pod -> replicaset -> deployment).\n",
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "namespaceId": {
            "format": "uuid",
            "type": "string"
          },
          "podTemplateId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NetworkProtocol": {
        "default": "TCP",
        "enum": [
          "TCP",
          "HTTP"
        ],
        "type": "string"
      },
      "NonPeriodicJobExpression": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PeriodicJobExpression"
          }
        ]
      },
      "OAPIV3Components": {
        "properties": {
          "elements": {
            "items": {
              "$ref": "#/components/schemas/OpenApiSpecScoreComponentsV3ElementsList"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/ApiSecurityRiskSeverity"
          }
        },
        "type": "object"
      },
      "OASVersion": {
        "description": "OpenAPI specification version",
        "enum": [
          "OASv2.0",
          "OASv3.0"
        ],
        "type": "string"
      },
      "OnViolationAction": {
        "enum": [
          "DETECT",
          "BLOCK"
        ],
        "type": "string"
      },
      "OpenApiSpec": {
        "properties": {
          "preview": {
            "$ref": "#/components/schemas/OpenApiSpecPreview"
          },
          "scoreElements": {
            "$ref": "#/components/schemas/OpenApiSpecScoreBase"
          }
        },
        "type": "object"
      },
      "OpenApiSpecAvailability": {
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/OpenApiSpecAvailabilityStatus"
          }
        },
        "type": "object"
      },
      "OpenApiSpecAvailabilityStatus": {
        "enum": [
          "NOT_AVAILABLE",
          "AVAILABLE",
          "COLLECTING_DATA",
          "REVIEW_REQUIRED",
          "APPROVING",
          "ABORTING",
          "ERROR"
        ],
        "type": "string"
      },
      "OpenApiSpecPreview": {
        "properties": {
          "basePath": {
            "type": "string"
          },
          "contactMail": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "licenseName": {
            "type": "string"
          },
          "licenseUrl": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "termsOfService": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "OpenApiSpecScoreBase": {
        "discriminator": {
          "propertyName": "oapIVersion"
        },
        "properties": {
          "security": {
            "$ref": "#/components/schemas/OpenApiSpecScoreElementsList"
          },
          "tags": {
            "$ref": "#/components/schemas/OpenApiSpecTags"
          },
          "general": {
            "$ref": "#/components/schemas/OpenApiSpecScoreElementsList"
          },
          "oapIVersion": {
            "enum": [
              "OpenApiSpecScoreV2",
              "OpenApiSpecScoreV3"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "OpenApiSpecScoreComponentsV3ElementsList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenApiSpecScoreElementsList"
          },
          {
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "OpenApiSpecScoreElement": {
        "properties": {
          "findings": {
            "$ref": "#/components/schemas/SpecScoreFindings"
          },
          "name": {
            "description": "Name of the Object",
            "title": "Name",
            "type": "string"
          },
          "severity": {
            "$ref": "#/components/schemas/ApiSecurityRiskSeverity"
          },
          "specPath": {
            "type": "string"
          },
          "vulnerabilitiesSummary": {
            "$ref": "#/components/schemas/VulnerabilitiesSummary"
          }
        },
        "type": "object"
      },
      "OpenApiSpecScoreElementsList": {
        "properties": {
          "elements": {
            "items": {
              "$ref": "#/components/schemas/OpenApiSpecScoreElement"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/ApiSecurityRiskSeverity"
          },
          "vulnerabilitiesSummary": {
            "$ref": "#/components/schemas/VulnerabilitiesSummary"
          }
        },
        "type": "object"
      },
      "OpenApiSpecScoreStatus": {
        "enum": [
          "SCORED",
          "NOT_SCORED"
        ],
        "title": "OpenApiSpecScoreStatus",
        "type": "string"
      },
      "OpenApiSpecScoreV2": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenApiSpecScoreBase"
          },
          {
            "properties": {
              "definitions": {
                "$ref": "#/components/schemas/OpenApiSpecScoreElementsList"
              },
              "parameters": {
                "$ref": "#/components/schemas/OpenApiSpecScoreElementsList"
              },
              "responses": {
                "$ref": "#/components/schemas/OpenApiSpecScoreElementsList"
              },
              "securityDefinitions": {
                "$ref": "#/components/schemas/OpenApiSpecScoreElementsList"
              }
            },
            "type": "object"
          }
        ]
      },
      "OpenApiSpecScoreV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OpenApiSpecScoreBase"
          },
          {
            "properties": {
              "servers": {
                "$ref": "#/components/schemas/OpenApiSpecScoreElementsList"
              },
              "components": {
                "$ref": "#/components/schemas/OAPIV3Components"
              }
            },
            "type": "object"
          }
        ]
      },
      "OpenApiSpecTag": {
        "properties": {
          "hasDiffs": {
            "type": "boolean"
          },
          "methods": {
            "items": {
              "$ref": "#/components/schemas/SpecMethod"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "severity": {
            "$ref": "#/components/schemas/ApiSecurityRiskSeverity"
          },
          "vulnerabilitiesSummary": {
            "$ref": "#/components/schemas/VulnerabilitiesSummary"
          }
        },
        "type": "object"
      },
      "OpenApiSpecTags": {
        "properties": {
          "elements": {
            "items": {
              "$ref": "#/components/schemas/OpenApiSpecTag"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/ApiSecurityRiskSeverity"
          },
          "vulnerabilitiesSummary": {
            "$ref": "#/components/schemas/VulnerabilitiesSummary"
          }
        },
        "type": "object"
      },
      "OperationalBar": {
        "properties": {
          "expantionSection": {
            "$ref": "#/components/schemas/OperationalBarSection"
          },
          "namespaceSection": {
            "$ref": "#/components/schemas/OperationalBarSection"
          },
          "podSection": {
            "$ref": "#/components/schemas/OperationalBarSection"
          }
        },
        "type": "object"
      },
      "OperationalBarSection": {
        "properties": {
          "protected": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "OperationsDiffsDonutPieChart": {
        "properties": {
          "generalDiffs": {
            "type": "integer"
          },
          "operationsWithoutDiffs": {
            "type": "integer"
          },
          "shadowDiffs": {
            "type": "integer"
          },
          "totalOperations": {
            "type": "integer"
          },
          "zombieDiffs": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "OperatorDeployer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Deployer"
          },
          {
            "properties": {
              "cluster": {
                "readOnly": true,
                "type": "string"
              },
              "clusterId": {
                "format": "uuid",
                "type": "string"
              },
              "namespace": {
                "readOnly": true,
                "type": "string"
              },
              "namespaceId": {
                "format": "uuid",
                "type": "string"
              },
              "ruleCreation": {
                "default": true,
                "type": "boolean"
              },
              "securityCheck": {
                "default": true,
                "type": "boolean"
              }
            },
            "required": [
              "namespaceId",
              "clusterId"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "OpsGenieEventsForwardingDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventsForwardingDetails"
          },
          {
            "type": "object"
          },
          {
            "properties": {
              "token": {
                "type": "string"
              }
            },
            "required": [
              "token"
            ],
            "type": "object"
          }
        ]
      },
      "OpsGraph": {
        "description": "Return a list of operation per second per connection",
        "items": {
          "$ref": "#/components/schemas/PerformanceMetricsGraphPoint"
        },
        "type": "array"
      },
      "Owner": {
        "properties": {
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "ownerType": {
            "$ref": "#/components/schemas/PermissionOwnerType"
          },
          "permissionInfo": {
            "items": {
              "$ref": "#/components/schemas/PermissionInfo"
            },
            "type": "array"
          },
          "systemDefaultOwnerType": {
            "$ref": "#/components/schemas/SystemDefaultOwnerType"
          }
        },
        "type": "object"
      },
      "OwnerResponse": {
        "properties": {
          "clusterName": {
            "type": "string"
          },
          "owners": {
            "items": {
              "$ref": "#/components/schemas/Owner"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PSPVolumeTypes": {
        "enum": [
          "awsElasticBlockStore",
          "azureDisk",
          "azureFile",
          "cephfs",
          "cinder",
          "configMap",
          "csi",
          "downwardAPI",
          "emptyDir",
          "fc",
          "flexVolume",
          "flocker",
          "gcePersistentDisk",
          "glusterfs",
          "hostPath",
          "iscsi",
          "local",
          "nfs",
          "persistentVolumeClaim",
          "projected",
          "portworxVolume",
          "quobyte",
          "rbd",
          "scaleIO",
          "secret",
          "storageos",
          "vsphereVolume",
          "all"
        ],
        "type": "string"
      },
      "PerformanceMetrics": {
        "discriminator": {
          "propertyName": "connectionProtocol"
        },
        "properties": {
          "connectionProtocol": {
            "enum": [
              "TcpPerformanceMetrics",
              "HttpPerformanceMetrics"
            ],
            "type": "string"
          },
          "totalReceivedBytes": {
            "$ref": "#/components/schemas/TotalReceivedBytesGraph"
          },
          "totalSentBytes": {
            "$ref": "#/components/schemas/TotalSentBytesGraph"
          }
        },
        "type": "object"
      },
      "PerformanceMetricsGraphPoint": {
        "properties": {
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "graph": {
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "PeriodicJobExpression": {
        "discriminator": {
          "propertyName": "PeriodicJobType"
        },
        "properties": {
          "PeriodicJobType": {
            "enum": [
              "NonPeriodicJobExpression",
              "SinglePeriodicJobExpression",
              "ByHoursPeriodicJobExpression",
              "ByDaysPeriodicJobExpression",
              "WeeklyPeriodicJobExpression"
            ],
            "type": "string"
          }
        },
        "required": [
          "PeriodicJobType"
        ],
        "type": "object"
      },
      "PermissionInfo": {
        "properties": {
          "count": {
            "type": "integer"
          },
          "risk": {
            "$ref": "#/components/schemas/PermissionRisk"
          }
        },
        "type": "object"
      },
      "PermissionOwner": {
        "properties": {
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "isApproved": {
            "type": "boolean"
          },
          "isSystemPermission": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "risk": {
            "$ref": "#/components/schemas/PermissionRisk"
          },
          "scope": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PermissionOwnerType": {
        "enum": [
          "USER",
          "GROUP",
          "SERVICEACCOUNT"
        ],
        "type": "string"
      },
      "PermissionResponse": {
        "properties": {
          "clusterName": {
            "type": "string"
          },
          "ownerName": {
            "type": "string"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/PermissionOwner"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PermissionRisk": {
        "enum": [
          "NO_RISK",
          "MEDIUM",
          "HIGH",
          "APPROVED"
        ],
        "type": "string"
      },
      "PermissionRoleResources": {
        "properties": {
          "apiGroups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "resourceNames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "risk": {
            "$ref": "#/components/schemas/PermissionRisk"
          },
          "riskReason": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "verbs": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PermissionRoleResponse": {
        "properties": {
          "clusterName": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "ownerName": {
            "type": "string"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/PermissionRoleResources"
            },
            "type": "array"
          },
          "roleName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PermissionsBar": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SingleBar"
          }
        ],
        "properties": {
          "onwers": {
            "type": "integer"
          },
          "risk": {
            "$ref": "#/components/schemas/PermissionRisk"
          }
        },
        "type": "object"
      },
      "PermissionsMode": {
        "default": "NORMAL",
        "enum": [
          "NORMAL",
          "STRICT",
          "MANAGED"
        ],
        "type": "string"
      },
      "PermissionsWidget": {
        "properties": {
          "bars": {
            "items": {
              "$ref": "#/components/schemas/PermissionsBar"
            },
            "type": "array"
          },
          "totalOwners": {
            "type": "integer"
          },
          "totalPermissions": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PodAnyConnectionRulePart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectionRulePart"
          },
          {
            "properties": {
              "apiSecurityProfile": {
                "type": "string"
              },
              "environments": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "vulnerabilitySeverityLevel": {
                "$ref": "#/components/schemas/VulnerabilitySeverity"
              }
            },
            "type": "object"
          }
        ]
      },
      "PodAnyWorkloadRuleType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkloadRuleType"
          },
          {
            "properties": {
              "podValidation": {
                "$ref": "#/components/schemas/PodValidation"
              }
            },
            "type": "object"
          }
        ]
      },
      "PodDefinition": {
        "properties": {
          "clusterId": {
            "format": "uuid",
            "type": "string"
          },
          "containers": {
            "items": {
              "$ref": "#/components/schemas/Container"
            },
            "type": "array"
          },
          "createdAt": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "unique Id",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "initContainers": {
            "items": {
              "$ref": "#/components/schemas/Container"
            },
            "type": "array"
          },
          "kind": {
            "$ref": "#/components/schemas/PodTemplateKind"
          },
          "labels": {
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "type": "array"
          },
          "name": {
            "description": "in pod template, this is the normalized name (for example, get it from pod -> replicaset -> deployment).\n",
            "type": "string"
          },
          "podDefinitionSource": {
            "$ref": "#/components/schemas/PodDefinitionSource"
          }
        },
        "required": [
          "name",
          "containers",
          "clusterId"
        ],
        "type": "object"
      },
      "PodDefinitionSource": {
        "description": "The source type of the pod definition",
        "enum": [
          "KUBERNETES",
          "HELM",
          "MANUAL",
          "CLI"
        ],
        "type": "string"
      },
      "PodIdentification": {
        "properties": {
          "cdSection": {
            "$ref": "#/components/schemas/CdSection"
          },
          "ciSection": {
            "$ref": "#/components/schemas/CiSection"
          },
          "diffSection": {
            "$ref": "#/components/schemas/DiffSection"
          },
          "injectedSidecarSection": {
            "$ref": "#/components/schemas/InjectedSidecarSection"
          },
          "registrySection": {
            "$ref": "#/components/schemas/registrySection"
          }
        },
        "type": "object"
      },
      "PodIdentityVerGamma": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentityVerGamma"
          },
          {
            "properties": {
              "agentId": {
                "format": "uuid",
                "type": "string"
              },
              "podId": {
                "description": "'The k8s uid of the pod. We dont write uuid since the doc does not specifically states that the uid is UUID4'\n",
                "type": "string"
              }
            },
            "required": [
              "agentId",
              "podId"
            ],
            "type": "object"
          }
        ]
      },
      "PodLabelWorkloadRuleType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkloadRuleType"
          },
          {
            "properties": {
              "labels": {
                "description": "pods that match one of the given labels",
                "items": {
                  "$ref": "#/components/schemas/Label"
                },
                "type": "array"
              },
              "podValidation": {
                "$ref": "#/components/schemas/PodValidation"
              }
            },
            "type": "object"
          }
        ]
      },
      "PodLablesConnectionRulePart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectionRulePart"
          },
          {
            "properties": {
              "apiSecurityProfile": {
                "type": "string"
              },
              "environments": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "labels": {
                "items": {
                  "$ref": "#/components/schemas/Label"
                },
                "type": "array"
              },
              "vulnerabilitySeverityLevel": {
                "$ref": "#/components/schemas/VulnerabilitySeverity"
              }
            },
            "type": "object"
          }
        ]
      },
      "PodNameConnectionRulePart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectionRulePart"
          },
          {
            "properties": {
              "apiSecurityProfile": {
                "type": "string"
              },
              "environments": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "names": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "vulnerabilitySeverityLevel": {
                "$ref": "#/components/schemas/VulnerabilitySeverity"
              }
            },
            "type": "object"
          }
        ]
      },
      "PodNameWorkloadRuleType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkloadRuleType"
          },
          {
            "properties": {
              "names": {
                "description": "pods that match one of the given names",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "podValidation": {
                "$ref": "#/components/schemas/PodValidation"
              }
            },
            "type": "object"
          }
        ]
      },
      "PodPolicyFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyFilter"
          },
          {
            "type": "object"
          },
          {
            "properties": {
              "labels": {
                "items": {
                  "$ref": "#/components/schemas/Label"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "PodRuntimeInfo": {
        "description": "runtime info of the pod (if is a pod)",
        "properties": {
          "containers": {
            "description": "runtime pod containers",
            "items": {
              "$ref": "#/components/schemas/Container"
            },
            "type": "array"
          },
          "initContainers": {
            "description": "runtime pod init containers",
            "items": {
              "$ref": "#/components/schemas/Container"
            },
            "type": "array"
          },
          "labels": {
            "description": "runtime pod labels",
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PodSecurityContext": {
        "properties": {
          "fsGroup": {
            "type": "integer"
          },
          "runAsGroup": {
            "type": "integer"
          },
          "runAsNonRoot": {
            "type": "boolean"
          },
          "runAsUser": {
            "type": "integer"
          },
          "supplementalGroups": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PodSecurityPolicy": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PodSecurityPolicyInfo"
          },
          {
            "properties": {
              "description": {
                "type": "string"
              },
              "id": {
                "format": "uuid",
                "type": "string"
              },
              "isSecurecnDefaultProfile": {
                "type": "boolean"
              },
              "name": {
                "type": "string"
              },
              "seccompProfile": {
                "format": "uuid",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "PodSecurityPolicyInfo": {
        "properties": {
          "allowPrivilegeEscalation": {
            "type": "boolean"
          },
          "allowedCapabilities": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "allowedHostPaths": {
            "items": {
              "$ref": "#/components/schemas/AllowedHostPath"
            },
            "type": "array"
          },
          "allowedProcMountTypes": {
            "items": {
              "$ref": "#/components/schemas/AllowedProcMountType"
            },
            "type": "array"
          },
          "allowedUnsafeSysctls": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "defaultAllowPrivilegeEscalation": {
            "type": "boolean"
          },
          "forbiddenSysctls": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fsGroup": {
            "$ref": "#/components/schemas/RunAsGroupStrategyOptions"
          },
          "hostIPC": {
            "type": "boolean"
          },
          "hostNetwork": {
            "type": "boolean"
          },
          "hostPID": {
            "type": "boolean"
          },
          "hostPorts": {
            "items": {
              "$ref": "#/components/schemas/HostPortRange"
            },
            "type": "array"
          },
          "privileged": {
            "type": "boolean"
          },
          "readOnlyRootFileSystem": {
            "type": "boolean"
          },
          "requiredDropCapabilities": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "runAsGroup": {
            "$ref": "#/components/schemas/RunAsGroupStrategyOptions"
          },
          "runAsUser": {
            "$ref": "#/components/schemas/RunAsUserStrategyOptions"
          },
          "supplementalGroups": {
            "$ref": "#/components/schemas/RunAsGroupStrategyOptions"
          },
          "volumes": {
            "items": {
              "$ref": "#/components/schemas/PSPVolumeTypes"
            },
            "type": "array"
          }
        },
        "required": [
          "runAsUser",
          "fsGroup",
          "supplementalGroups"
        ],
        "type": "object"
      },
      "PodSecurityPolicyRecommendation": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "numberOfAffectedWorkloads": {
            "type": "integer"
          },
          "podSecurityPolicy": {
            "$ref": "#/components/schemas/PodSecurityPolicy"
          }
        },
        "type": "object"
      },
      "PodSecurityPolicyRecommendationPeriod": {
        "properties": {
          "podSecurityPolicyRecommendations": {
            "$ref": "#/components/schemas/PodSecurityPolicyRecommendations"
          },
          "timePeriod": {
            "$ref": "#/components/schemas/RecommendationTimePeriod"
          },
          "totalWorkloads": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PodSecurityPolicyRecommendations": {
        "items": {
          "$ref": "#/components/schemas/PodSecurityPolicyRecommendation"
        },
        "type": "array"
      },
      "PodSecurityPolicyValidation": {
        "description": "When the rule action is ALLOW, onViolationAction is mandatory",
        "properties": {
          "onViolationAction": {
            "$ref": "#/components/schemas/OnViolationAction"
          },
          "podSecurityPolicyId": {
            "format": "uuid",
            "type": "string"
          },
          "shouldMutate": {
            "default": false,
            "type": "boolean"
          }
        },
        "required": [
          "podSecurityPolicyId",
          "onViolationAction"
        ],
        "type": "object"
      },
      "PodSpecInfo": {
        "description": "pod spec attributes which are potentially risky ",
        "properties": {
          "containers": {
            "items": {
              "$ref": "#/components/schemas/ContainerSecurityContext"
            },
            "type": "array"
          },
          "hostIPC": {
            "type": "boolean"
          },
          "hostNetwork": {
            "type": "boolean"
          },
          "hostPID": {
            "type": "boolean"
          },
          "initContainers": {
            "items": {
              "$ref": "#/components/schemas/ContainerSecurityContext"
            },
            "type": "array"
          },
          "podSecurityContext": {
            "$ref": "#/components/schemas/PodSecurityContext"
          },
          "shareProcessNamespace": {
            "type": "boolean"
          },
          "volumes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PodTelemetriesWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TimeBasedWidget"
          }
        ],
        "properties": {
          "unidentifiedGraphs": {
            "$ref": "#/components/schemas/DashboardTimeBasedGraphs",
            "description": "all the graphs (all time periods) of unidentified pod telemetries",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "PodTelemetryInfo": {
        "properties": {
          "containers": {
            "items": {
              "$ref": "#/components/schemas/Container"
            },
            "type": "array"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "initContainers": {
            "items": {
              "$ref": "#/components/schemas/Container"
            },
            "type": "array"
          },
          "isIdentified": {
            "type": "boolean"
          },
          "isProtected": {
            "type": "boolean"
          },
          "kind": {
            "$ref": "#/components/schemas/PodTemplateKind"
          },
          "labels": {
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "permissionOwnerName": {
            "type": "string"
          },
          "podDefinitionSource": {
            "$ref": "#/components/schemas/PodDefinitionSource"
          }
        },
        "type": "object"
      },
      "PodTemplateDiff": {
        "properties": {
          "diffType": {
            "$ref": "#/components/schemas/PodTemplateDiffType",
            "description": "The type of the diff"
          },
          "oldValue": {
            "description": "The old value in the path. Will only be populated with MODIFIED type",
            "type": "string"
          },
          "path": {
            "description": "The path of the added/deleted/modified object in the pod (example: spec.volumes.0.name)",
            "type": "string"
          },
          "value": {
            "description": "The current value in the path",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PodTemplateDiffType": {
        "enum": [
          "ADDED",
          "DELETED",
          "MODIFIED"
        ],
        "type": "string"
      },
      "PodTemplateKind": {
        "enum": [
          "ReplicaSet",
          "Deployment",
          "Job",
          "CronJob",
          "DaemonSet",
          "StatefulSet",
          "Pod",
          "Other"
        ],
        "type": "string"
      },
      "PodValidation": {
        "properties": {
          "allowedInjectedSidecars": {
            "$ref": "#/components/schemas/AllowedInjectedSidecars"
          },
          "apiSecurityPolicy": {
            "$ref": "#/components/schemas/ApiSecurityValidation"
          },
          "podSecurityPolicy": {
            "$ref": "#/components/schemas/PodSecurityPolicyValidation"
          },
          "vulnerability": {
            "$ref": "#/components/schemas/VulnerabilityValidation"
          }
        },
        "type": "object"
      },
      "PolicyAdvisorState": {
        "enum": [
          "RUNNING",
          "STOPPED"
        ],
        "type": "string"
      },
      "PolicyFilter": {
        "discriminator": {
          "propertyName": "filterType"
        },
        "properties": {
          "filterType": {
            "enum": [
              "EnvPolicyFilter",
              "PodPolicyFilter"
            ],
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "filterType"
        ],
        "type": "object"
      },
      "PolicyFilterSearchResponse": {
        "properties": {
          "envs": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "pods": {
            "items": {
              "$ref": "#/components/schemas/PolicyFilterSearchResponsePod"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PolicyFilterSearchResponsePod": {
        "properties": {
          "labels": {
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PortshiftAwsSecurityGroupEntity": {
        "properties": {
          "description": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "ipPermissions": {
            "items": {
              "$ref": "#/components/schemas/IpPermission"
            },
            "type": "array"
          },
          "ipPermissionsEgress": {
            "items": {
              "$ref": "#/components/schemas/IpPermission"
            },
            "type": "array"
          },
          "ownerId": {
            "type": "string"
          },
          "vpcId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PortshiftAwsSubnet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ViolationsMapNodeEntity"
          },
          {
            "properties": {
              "cidrBlock": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "subnetId": {
                "type": "string"
              },
              "vpcId": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "PrefixListId": {
        "properties": {
          "description": {
            "type": "string"
          },
          "prefixListId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PricingData": {
        "properties": {
          "contractStartDate": {
            "format": "date-time",
            "type": "string"
          },
          "minimumPricePerMonth": {
            "minimum": 0,
            "type": "integer"
          },
          "numOfUnitsPerMonth": {
            "type": "integer"
          },
          "pricePerMonth": {
            "minimum": 0,
            "type": "integer"
          },
          "pricingUnitType": {
            "$ref": "#/components/schemas/pricingUnitType"
          }
        },
        "required": [
          "pricingUnitType",
          "numOfUnitsPerMonth",
          "pricePerMonth",
          "minimumPricePerMonth",
          "contractStartDate"
        ],
        "type": "object"
      },
      "PricingDetails": {
        "properties": {
          "averageNumOfUnit": {
            "type": "integer"
          },
          "budget": {
            "type": "integer"
          },
          "estimatedNumOfUnit": {
            "type": "integer"
          },
          "price": {
            "type": "integer"
          },
          "typeOfUnit": {
            "$ref": "#/components/schemas/pricingUnitType",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProcessDesc": {
        "properties": {
          "args": {
            "description": "The command line arguments of the executable.",
            "example": [
              "-cp",
              "-jar",
              "./*"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "cwd": {
            "description": "The working directory of the executable.",
            "example": "/usr/local/bin/corp",
            "type": "string"
          },
          "executable": {
            "description": "The name of the executable.",
            "example": "java",
            "pattern": "[^/]*",
            "type": "string"
          },
          "executablePath": {
            "description": "The directory of the executable.",
            "example": "/usr/bin",
            "type": "string"
          },
          "processName": {
            "description": "The process name.",
            "example": "accounting_app",
            "type": "string"
          }
        },
        "required": [
          "executable"
        ],
        "type": "object"
      },
      "ProcessIdentityVerGamma": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentityVerGamma"
          },
          {
            "properties": {
              "agentId": {
                "pattern": "^([0-9a-f]{2}:){31}[0-9a-f]{2}$",
                "type": "string"
              },
              "processId": {
                "type": "integer"
              },
              "timestamp": {
                "format": "int64",
                "type": "integer"
              }
            },
            "required": [
              "agentId",
              "processId",
              "timestamp"
            ],
            "type": "object"
          }
        ]
      },
      "ProfileViolation": {
        "properties": {
          "condition_index": {
            "description": "Index of the condition violated in the API Policy Profile",
            "title": "Condition Index",
            "type": "integer"
          },
          "description": {
            "description": "Human readable description of the violation",
            "title": "Description",
            "type": "string"
          }
        },
        "required": [
          "condition_index",
          "description"
        ],
        "title": "ProfileViolation",
        "type": "object"
      },
      "Property": {
        "properties": {
          "key": {
            "type": "string"
          },
          "values": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProviderAvgVulnerabilityDuration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProviderOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/ConditionNumberComparison"
              },
              "value": {
                "title": "Value",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ProviderAvgVulnerabilityDurationIsNone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProviderOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ProviderIndustry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProviderOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/ConditionListComparison"
              },
              "value": {
                "title": "Value",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ProviderIndustryIsNone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProviderOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ProviderLocation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProviderOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/ConditionListComparison"
              },
              "value": {
                "title": "Value",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ProviderLocationIsNone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProviderOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ProviderName": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProviderOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/ConditionListComparison"
              },
              "value": {
                "title": "Value",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ProviderOrConditionsBase": {
        "discriminator": {
          "propertyName": "attribute"
        },
        "properties": {
          "attribute": {
            "enum": [
              "ProviderRisk",
              "ProviderRiskTrend",
              "ProviderRiskTrendIsNone",
              "ProviderRiskConfidence",
              "ProviderRiskConfidenceIsNone",
              "ProviderAvgVulnerabilityDuration",
              "ProviderAvgVulnerabilityDurationIsNone",
              "ProviderName",
              "ProviderLocation",
              "ProviderLocationIsNone",
              "ProviderIndustry",
              "ProviderIndustryIsNone"
            ],
            "type": "string"
          }
        },
        "required": [
          "attribute"
        ],
        "type": "object"
      },
      "ProviderRisk": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProviderOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/ConditionNumberComparison"
              },
              "value": {
                "$ref": "#/components/schemas/RiskSeverity"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ProviderRiskConfidence": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProviderOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/ConditionEnumComparator"
              },
              "value": {
                "$ref": "#/components/schemas/RiskConfidenceEnum"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ProviderRiskConfidenceIsNone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProviderOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ProviderRiskTrend": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProviderOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              },
              "operator": {
                "$ref": "#/components/schemas/ConditionEnumComparator"
              },
              "value": {
                "$ref": "#/components/schemas/RiskTrendEnum"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ProviderRiskTrendIsNone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProviderOrConditionsBase"
          },
          {
            "properties": {
              "not_": {
                "title": "Not ",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ProxyConfiguration": {
        "properties": {
          "enableProxy": {
            "default": false,
            "description": "Specifies if the proxy configuration should be used",
            "type": "boolean"
          },
          "httpsProxy": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RecommendationConnectionRule": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ConnectionRuleAction"
          },
          "destination": {
            "$ref": "#/components/schemas/ConnectionRulePart"
          },
          "name": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/ConnectionRulePart"
          }
        },
        "type": "object"
      },
      "RecommendationTimePeriod": {
        "enum": [
          "LAST_DAY",
          "LAST_WEEK"
        ],
        "type": "string"
      },
      "RecommendedKubernetesApiRule": {
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isClusterScopeOnly": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Registry": {
        "description": "image registry",
        "properties": {
          "clusterIds": {
            "items": {
              "format": "uuid",
              "maximum": 10,
              "minimum": 1,
              "type": "string"
            },
            "type": "array"
          },
          "credentials": {
            "$ref": "#/components/schemas/RegistryCredentials"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "enum": [
              "AWS",
              "GCP",
              "AZURE",
              "JFROG",
              "OTHER"
            ],
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "type"
        ],
        "type": "object"
      },
      "RegistryCredentials": {
        "discriminator": {
          "propertyName": "registryCredentialsType"
        },
        "properties": {
          "registryCredentialsType": {
            "enum": [
              "AwsRegistryCredentials",
              "StandardRegistryCredentials",
              "JfrogRegistryCredentials"
            ],
            "type": "string"
          }
        },
        "required": [
          "registryCredentialsType"
        ],
        "type": "object"
      },
      "RepoToApiAssociation": {
        "properties": {
          "deployedImages": {
            "items": {
              "$ref": "#/components/schemas/DeployedImage"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ReportStatus": {
        "properties": {
          "status": {
            "enum": [
              "IN_PROGRESS",
              "READY",
              "FAILED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReviewPathItem": {
        "properties": {
          "apiEventsPaths": {
            "description": "Group of api event paths (original) that suggestedPath is representing",
            "items": {
              "$ref": "#/components/schemas/ApiEventPathAndMethods"
            },
            "type": "array"
          },
          "suggestedPath": {
            "description": "Represents the parameterized path suggested by the engine",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Risk": {
        "description": "The attack risk level of the environment",
        "enum": [
          "LOW",
          "MEDIUM",
          "HIGH"
        ],
        "type": "string"
      },
      "RiskAssessmentCluster": {
        "description": "Single cluster risk assessment",
        "properties": {
          "clusterId": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "clusterName": {
            "readOnly": true,
            "type": "string"
          },
          "dockerfileScanResultsSummary": {
            "$ref": "#/components/schemas/DockerfileScanResultsSummary"
          },
          "hasFailed": {
            "default": false,
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "scanConfig": {
            "$ref": "#/components/schemas/RiskAssessmentClusterScanConfig"
          },
          "scanned": {
            "minimum": 0,
            "readOnly": true,
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/RiskAssessmentScanStatus"
          },
          "time": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "minimum": 0,
            "readOnly": true,
            "type": "integer"
          },
          "vulnerabilitiesSummary": {
            "$ref": "#/components/schemas/VulnerabilitiesSummary"
          }
        },
        "type": "object"
      },
      "RiskAssessmentClusterScanConfig": {
        "description": "Single cluster risk assessment scan config",
        "properties": {
          "maxParallelism": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer"
          },
          "minimumSeverity": {
            "$ref": "#/components/schemas/VulnerabilitySeverity"
          },
          "namespaces": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "periodicJobExpression": {
            "$ref": "#/components/schemas/PeriodicJobExpression"
          },
          "runDockerfileScan": {
            "default": false,
            "type": "boolean"
          }
        },
        "readOnly": true,
        "required": [
          "maxParallelism",
          "minimumSeverity"
        ],
        "type": "object"
      },
      "RiskAssessmentImage": {
        "description": "Single image risk assessment",
        "properties": {
          "failures": {
            "$ref": "#/components/schemas/RiskAssessmentScanFailures"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "success": {
            "readOnly": true,
            "type": "boolean"
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "RiskAssessmentPod": {
        "description": "Single pod risk assessment",
        "properties": {
          "dockerfileScanResultsSummary": {
            "$ref": "#/components/schemas/DockerfileScanResultsSummary"
          },
          "id": {
            "description": "kubernetes pod uid",
            "readOnly": true,
            "type": "string"
          },
          "images": {
            "items": {
              "$ref": "#/components/schemas/RiskAssessmentImage"
            },
            "readOnly": true,
            "type": "array"
          },
          "labels": {
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "readOnly": true,
            "type": "array"
          },
          "name": {
            "readOnly": true,
            "type": "string"
          },
          "namespace": {
            "readOnly": true,
            "type": "string"
          },
          "vulnerabilitiesSummary": {
            "$ref": "#/components/schemas/VulnerabilitiesSummary"
          }
        },
        "type": "object"
      },
      "RiskAssessmentScanFailure": {
        "properties": {
          "message": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/RiskAssessmentScanFailureSource"
          },
          "type": {
            "$ref": "#/components/schemas/RiskAssessmentScanFailureType"
          }
        },
        "type": "object"
      },
      "RiskAssessmentScanFailureSource": {
        "enum": [
          "JOB_TIMEOUT",
          "JOB_CREATION",
          "UNAUTHORIZED",
          "CLAIR_SERVER_INTERNAL",
          "ANALYZE"
        ],
        "type": "string"
      },
      "RiskAssessmentScanFailureType": {
        "enum": [
          "DOCKERFILE_SCAN",
          "VULNERABILITIES_SCAN",
          "INITIALIZE_SCAN"
        ],
        "type": "string"
      },
      "RiskAssessmentScanFailures": {
        "properties": {
          "failures": {
            "items": {
              "$ref": "#/components/schemas/RiskAssessmentScanFailure"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RiskAssessmentScanStatus": {
        "description": "Status of a risk assessment scan",
        "enum": [
          "AGENT_NOT_READY",
          "NOT_SCANNED",
          "IN_PROGRESS",
          "DONE"
        ],
        "readOnly": true,
        "type": "string"
      },
      "RiskAssessmentVulnerability": {
        "description": "Single risk assessment vulnerability",
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "severity": {
            "$ref": "#/components/schemas/VulnerabilitySeverity"
          }
        },
        "type": "object"
      },
      "RiskConfidenceEnum": {
        "description": "An enumeration.",
        "enum": [
          "HIGH",
          "MEDIUM",
          "LOW"
        ],
        "title": "RiskConfidenceEnum",
        "type": "string"
      },
      "RiskFinding": {
        "properties": {
          "affectedElements": {
            "$ref": "#/components/schemas/RiskFindingAffectedElements"
          },
          "category": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "mitigation": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "risk": {
            "$ref": "#/components/schemas/ApiSecurityRisk"
          },
          "source": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiskFindingAffectedElementObject": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RiskFindingAffectedElementType": {
        "items": {
          "$ref": "#/components/schemas/RiskFindingAffectedElementObject"
        },
        "type": "array"
      },
      "RiskFindingAffectedElements": {
        "properties": {
          "externalElements": {
            "$ref": "#/components/schemas/RiskFindingAffectedElementType"
          },
          "internalElements": {
            "$ref": "#/components/schemas/RiskFindingAffectedElementType"
          }
        },
        "type": "object"
      },
      "RiskFindings": {
        "properties": {
          "riskFindings": {
            "items": {
              "$ref": "#/components/schemas/RiskFinding"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RiskSeverity": {
        "description": "An enumeration.",
        "enum": [
          "LOW",
          "MEDIUM",
          "HIGH",
          "CRITICAL",
          "NEUTRAL",
          "UNKNOWN",
          "NO_RISK"
        ],
        "title": "RiskSeverity",
        "type": "string"
      },
      "RiskTrendEnum": {
        "description": "An enumeration.",
        "enum": [
          "IMPROVING",
          "STABLE",
          "DEGRADING"
        ],
        "title": "RiskTrendEnum",
        "type": "string"
      },
      "Role": {
        "description": "The role of the user",
        "enum": [
          "CISCO_SUBSCRIBER",
          "SELF_PROVISIONING",
          "CI_CD_SCANNER",
          "PORTSHIFT_ADMIN",
          "PORTSHIFT_AUDITOR",
          "ACCOUNT_ADMIN",
          "SERVICE",
          "ACCOUNT_AUDITOR"
        ],
        "type": "string"
      },
      "RuleRange": {
        "properties": {
          "isCulprit": {
            "type": "boolean"
          },
          "range": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RunAsGroupStrategy": {
        "enum": [
          "MustRunAs",
          "MayRunAs",
          "RunAsAny"
        ],
        "type": "string"
      },
      "RunAsGroupStrategyOptions": {
        "properties": {
          "ranges": {
            "items": {
              "$ref": "#/components/schemas/IDRange"
            },
            "type": "array"
          },
          "rule": {
            "$ref": "#/components/schemas/RunAsGroupStrategy"
          }
        },
        "type": "object"
      },
      "RunAsUserStrategy": {
        "enum": [
          "MustRunAs",
          "MustRunAsNonRoot",
          "RunAsAny"
        ],
        "type": "string"
      },
      "RunAsUserStrategyOptions": {
        "properties": {
          "ranges": {
            "items": {
              "$ref": "#/components/schemas/IDRange"
            },
            "type": "array"
          },
          "rule": {
            "$ref": "#/components/schemas/RunAsUserStrategy"
          }
        },
        "type": "object"
      },
      "Scope": {
        "enum": [
          "UNCHANGED",
          "CHANGED"
        ],
        "type": "string"
      },
      "ScoreExitStatusEnum": {
        "description": "An enumeration.",
        "enum": [
          "SUCCESS",
          "NETWORK_FAILURE",
          "TOO_LONG",
          "PARSE_ERROR",
          "GENERIC_FAILURE"
        ],
        "title": "ScoreExitStatusEnum",
        "type": "string"
      },
      "ScoreFinding": {
        "properties": {
          "additional_info": {
            "description": "Finding instance additional attributes",
            "items": {
              "$ref": "#/components/schemas/AdditionalInfo"
            },
            "title": "Additional Info",
            "type": "array"
          },
          "data": {
            "description": "Raw data filled in only for unclassified findings, when allowed",
            "items": {
              "type": "object"
            },
            "title": "Data",
            "type": "array"
          },
          "description": {
            "description": "Finding description if finding has been classified, None otherwise",
            "title": "Description",
            "type": "string"
          },
          "mitigation": {
            "description": "Finding mitigation if finding has been classified, None otherwise",
            "title": "Mitigation",
            "type": "string"
          },
          "name": {
            "description": "Finding name",
            "title": "Name",
            "type": "string"
          },
          "occurrences": {
            "description": "Number of findings of the same type",
            "title": "Occurrences",
            "type": "integer"
          },
          "raw_finding_id": {
            "description": "Identifier of the raw finding if available",
            "format": "uuid",
            "title": "Raw Finding Id",
            "type": "string"
          },
          "source": {
            "description": "Finding source or filled in with 'Undisclosed' if source cannot be revealed",
            "title": "Source",
            "type": "string"
          },
          "type_id": {
            "description": "Finding type identifier if finding has been classified, None otherwise",
            "format": "uuid",
            "title": "Type Id",
            "type": "string"
          }
        },
        "required": [
          "name",
          "source"
        ],
        "title": "ScoreFinding",
        "type": "object"
      },
      "ScoreFindingGroup": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "findings": {
            "items": {
              "$ref": "#/components/schemas/ScoreFinding"
            },
            "title": "Findings",
            "type": "array"
          }
        },
        "required": [
          "count",
          "findings"
        ],
        "title": "ScoreFindingGroup",
        "type": "object"
      },
      "SeccompProfile": {
        "properties": {
          "data": {
            "format": "json",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "pattern": "^([a-z_\\d]){1,64}$",
            "type": "string"
          },
          "podSecurityPolicies": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SeccompProfileData": {
        "properties": {
          "data": {
            "format": "json",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretsCdPolicyElement": {
        "properties": {
          "enforcementOption": {
            "$ref": "#/components/schemas/EnforcementOption",
            "description": "The action that should be taken on the pipeline"
          },
          "permissibleVulnerabilityLevel": {
            "$ref": "#/components/schemas/CDPipelineSecretsFindingRisk",
            "description": "The permissible risk level in the pipeline"
          }
        },
        "required": [
          "permissibleVulnerabilityLevel",
          "enforcementOption"
        ],
        "type": "object"
      },
      "SecureAppExpirationInfo": {
        "description": "info for provisioning a subscription in SecureApp",
        "properties": {
          "cancelEffectiveDate": {
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "subscriptionNumber": {
            "type": "string"
          },
          "tenantId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "tenantId",
          "email",
          "subscriptionNumber"
        ],
        "type": "object"
      },
      "SecureAppProvisionInfo": {
        "description": "info for provisioning a subscription in SecureApp",
        "properties": {
          "accountNumber": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "sku": {
            "items": {
              "$ref": "#/components/schemas/SecureAppProvisionSku"
            },
            "type": "array"
          },
          "subscriptionNumber": {
            "type": "string"
          },
          "tenantId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "tenantId",
          "email",
          "accountNumber",
          "subscriptionNumber",
          "sku"
        ],
        "type": "object"
      },
      "SecureAppProvisionSku": {
        "description": "secureapp provisioning info",
        "properties": {
          "quantity": {
            "minimum": 1,
            "type": "integer"
          },
          "sku": {
            "type": "string"
          }
        },
        "required": [
          "sku",
          "quantity"
        ],
        "type": "object"
      },
      "SecureCnDeployer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Deployer"
          },
          {
            "type": "object"
          }
        ],
        "type": "object"
      },
      "SecureXEventsForwardingDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventsForwardingDetails"
          },
          {
            "type": "object"
          }
        ]
      },
      "SecureXVulnerabilityEventsForwardingDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SecureXEventsForwardingDetails"
          },
          {
            "type": "object"
          },
          {
            "properties": {
              "vulnerabilitySeverity": {
                "$ref": "#/components/schemas/VulnerabilitySeverity"
              }
            },
            "required": [
              "vulnerabilitySeverity"
            ],
            "type": "object"
          }
        ]
      },
      "SecurityContextBar": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SingleBar"
          }
        ],
        "properties": {
          "risk": {
            "$ref": "#/components/schemas/SecurityContextRisk"
          },
          "vulnerablePods": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SecurityContextRisk": {
        "enum": [
          "LOW",
          "MEDIUM",
          "HIGH"
        ],
        "type": "string"
      },
      "SecurityContextWidget": {
        "properties": {
          "bars": {
            "items": {
              "$ref": "#/components/schemas/SecurityContextBar"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ServerlessAzureInstallationDetails": {
        "properties": {
          "accessKey": {
            "format": "uuid",
            "type": "string"
          },
          "secretAccessKey": {
            "type": "string"
          },
          "serviceAccountId": {
            "type": "string"
          },
          "templateUrl": {
            "type": "string"
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "ServerlessByDaysPeriodicJobExpression": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerlessPeriodicJobExpression"
          },
          {
            "properties": {
              "daysInterval": {
                "default": 1,
                "minimum": 1,
                "type": "integer"
              },
              "timeOfDay": {
                "$ref": "#/components/schemas/TimeOfDay"
              }
            },
            "required": [
              "daysInterval",
              "timeOfDay"
            ],
            "type": "object"
          }
        ]
      },
      "ServerlessByHoursPeriodicJobExpression": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerlessPeriodicJobExpression"
          },
          {
            "properties": {
              "hoursInterval": {
                "default": 1,
                "minimum": 1,
                "type": "integer"
              }
            },
            "required": [
              "hoursInterval"
            ],
            "type": "object"
          }
        ]
      },
      "ServerlessDataAccessRisk": {
        "enum": [
          "NO_RISK",
          "LOW",
          "MEDIUM"
        ],
        "type": "string"
      },
      "ServerlessDefaultRule": {
        "enum": [
          "ALLOW_ALL",
          "DETECT_ALL",
          "BLOCK_ALL"
        ],
        "type": "string"
      },
      "ServerlessFunction": {
        "description": "Single serverless function",
        "properties": {
          "arn": {
            "type": "string"
          },
          "cloudAccount": {
            "$ref": "#/components/schemas/CloudAccountBase"
          },
          "dataAccessRisk": {
            "$ref": "#/components/schemas/ServerlessDataAccessRisk"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "isUnusedFunction": {
            "type": "boolean"
          },
          "name": {
            "description": "name with version",
            "type": "string"
          },
          "policyRisk": {
            "$ref": "#/components/schemas/ServerlessPolicyRisk"
          },
          "publiclyAccessibleRisk": {
            "$ref": "#/components/schemas/ServerlessPubliclyAccessibleRisk"
          },
          "region": {
            "type": "string"
          },
          "risk": {
            "$ref": "#/components/schemas/ServerlessFunctionRisk"
          },
          "roleDetails": {
            "$ref": "#/components/schemas/ServerlessRoleDetails"
          },
          "runtime": {
            "type": "string"
          },
          "secretsRisk": {
            "$ref": "#/components/schemas/ServerlessSecretsRisk"
          },
          "version": {
            "type": "string"
          },
          "violation": {
            "$ref": "#/components/schemas/ServerlessViolationInfo"
          },
          "vulnerabilitiesSummary": {
            "$ref": "#/components/schemas/VulnerabilitiesSummary"
          }
        },
        "type": "object"
      },
      "ServerlessFunctionArns": {
        "properties": {
          "arns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ServerlessFunctionNames": {
        "properties": {
          "names": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ServerlessFunctionReason": {
        "properties": {
          "level": {
            "$ref": "#/components/schemas/ServerlessFunctionRiskLevel"
          },
          "text": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ServerlessFunctionReasonType"
          }
        },
        "type": "object"
      },
      "ServerlessFunctionReasonType": {
        "enum": [
          "SECRETS",
          "POLICY",
          "VULNERABILITIES",
          "PUBLICLY_ACCESSIBLE",
          "UNUSED_FUNCTION",
          "DATA_ACCESS",
          "UNIDENTIFIED"
        ],
        "type": "string"
      },
      "ServerlessFunctionRisk": {
        "properties": {
          "functionRisk": {
            "$ref": "#/components/schemas/ServerlessFunctionRiskLevel"
          },
          "reasons": {
            "items": {
              "$ref": "#/components/schemas/ServerlessFunctionReason"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ServerlessFunctionRiskLevel": {
        "enum": [
          "NO_RISK",
          "LOW",
          "MEDIUM",
          "HIGH",
          "CRITICAL"
        ],
        "type": "string"
      },
      "ServerlessFunctionSecretIssue": {
        "properties": {
          "name": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "reason"
        ],
        "type": "object"
      },
      "ServerlessFunctionValidation": {
        "properties": {
          "dataAccessRisk": {
            "$ref": "#/components/schemas/ServerlessDataAccessRisk"
          },
          "functionPermissionRisk": {
            "$ref": "#/components/schemas/ServerlessPolicyRisk"
          },
          "isUnusedFunction": {
            "type": "boolean"
          },
          "publiclyAccessibleRisk": {
            "$ref": "#/components/schemas/ServerlessPubliclyAccessibleRisk"
          },
          "risk": {
            "$ref": "#/components/schemas/ServerlessFunctionRiskLevel"
          },
          "secretsRisk": {
            "$ref": "#/components/schemas/ServerlessSecretsRisk"
          },
          "vulnerability": {
            "$ref": "#/components/schemas/VulnerabilitySeverity"
          }
        },
        "type": "object"
      },
      "ServerlessInstallationDetails": {
        "properties": {
          "externalId": {
            "format": "uuid",
            "type": "string"
          },
          "installationUrl": {
            "type": "string"
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "ServerlessPeriodicJobExpression": {
        "discriminator": {
          "propertyName": "PeriodicJobType"
        },
        "properties": {
          "PeriodicJobType": {
            "enum": [
              "ServerlessByHoursPeriodicJobExpression",
              "ServerlessByDaysPeriodicJobExpression"
            ],
            "type": "string"
          }
        },
        "required": [
          "PeriodicJobType"
        ],
        "type": "object"
      },
      "ServerlessPolicy": {
        "properties": {
          "defaultRule": {
            "$ref": "#/components/schemas/ServerlessDefaultRule"
          },
          "unidentifiedServerlessRule": {
            "$ref": "#/components/schemas/UnidentifiedServerlessRule"
          },
          "userRules": {
            "items": {
              "$ref": "#/components/schemas/ServerlessRule"
            },
            "type": "array"
          }
        },
        "required": [
          "defaultRule",
          "unidentifiedServerlessRule"
        ],
        "type": "object"
      },
      "ServerlessPolicyHistory": {
        "properties": {
          "editor": {
            "type": "string"
          },
          "policy": {
            "$ref": "#/components/schemas/ServerlessPolicy"
          },
          "updateTime": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServerlessPolicyRisk": {
        "enum": [
          "NO_RISK",
          "LOW",
          "MEDIUM",
          "HIGH",
          "CRITICAL"
        ],
        "type": "string"
      },
      "ServerlessPolicyRiskReasons": {
        "properties": {
          "reason": {
            "type": "string"
          },
          "risk": {
            "$ref": "#/components/schemas/ServerlessPolicyRisk"
          }
        },
        "type": "object"
      },
      "ServerlessPubliclyAccessibleRisk": {
        "enum": [
          "NO_RISK",
          "LOW",
          "MEDIUM"
        ],
        "type": "string"
      },
      "ServerlessRoleDetails": {
        "properties": {
          "policies": {
            "items": {
              "$ref": "#/components/schemas/ServerlessRolePolicy"
            },
            "type": "array"
          },
          "roleArn": {
            "type": "string"
          },
          "roleName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServerlessRolePolicy": {
        "properties": {
          "policyArn": {
            "type": "string"
          },
          "policyName": {
            "type": "string"
          },
          "policyRisk": {
            "$ref": "#/components/schemas/ServerlessPolicyRisk"
          },
          "riskReasons": {
            "items": {
              "$ref": "#/components/schemas/ServerlessPolicyRiskReasons"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ServerlessRule": {
        "description": "A rule that states what serverless function are allowed and where.",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ServerlessRuleAction"
          },
          "groupName": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "rule": {
            "$ref": "#/components/schemas/ServerlessRuleType"
          },
          "ruleOrigin": {
            "$ref": "#/components/schemas/ServerlessRuleOrigin"
          },
          "scope": {
            "items": {
              "$ref": "#/components/schemas/ServerlessRuleScope"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/ServerlessRuleStatus"
          }
        },
        "required": [
          "name",
          "status",
          "action",
          "rule"
        ],
        "type": "object"
      },
      "ServerlessRuleAction": {
        "description": "serverless rule action",
        "enum": [
          "DETECT",
          "ALLOW",
          "BLOCK"
        ],
        "type": "string"
      },
      "ServerlessRuleOrigin": {
        "default": "USER",
        "enum": [
          "USER",
          "AUTOMATED_POLICY",
          "SYSTEM"
        ],
        "type": "string"
      },
      "ServerlessRuleScope": {
        "properties": {
          "cloudAccount": {
            "description": "cloud account name",
            "type": "string"
          },
          "regions": {
            "description": "empty for any",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "cloudAccount"
        ],
        "type": "object"
      },
      "ServerlessRuleStatus": {
        "enum": [
          "ENABLED",
          "DISABLED",
          "DELETED"
        ],
        "type": "string"
      },
      "ServerlessRuleType": {
        "description": "identify the serverless functions matching type. Only one of the below should be not null, and  used.",
        "discriminator": {
          "propertyName": "serverlessRuleType"
        },
        "properties": {
          "serverlessFunctionValidation": {
            "$ref": "#/components/schemas/ServerlessFunctionValidation"
          },
          "serverlessRuleType": {
            "enum": [
              "FunctionAnyServerlessRuleType",
              "FunctionNameServerlessRuleType",
              "FunctionArnServerlessRuleType"
            ],
            "type": "string"
          }
        },
        "required": [
          "serverlessRuleType"
        ],
        "type": "object"
      },
      "ServerlessScanConfig": {
        "description": "Single serverless functions scan config",
        "properties": {
          "cloudAccounts": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "readOnly": true,
        "required": [
          "cloudAccounts"
        ],
        "type": "object"
      },
      "ServerlessSecretsRisk": {
        "enum": [
          "NO_KNOWN_RISK",
          "RISK_IDENTIFIED"
        ],
        "type": "string"
      },
      "ServerlessSecurity": {
        "description": "Mode of the Serverless security",
        "enum": [
          "ENABLED",
          "DISABLED"
        ],
        "type": "string"
      },
      "ServerlessUserRule": {
        "description": "used for violation in ServerlessFunction",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ServerlessRuleAction"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServerlessViolationInfo": {
        "properties": {
          "defaultRule": {
            "$ref": "#/components/schemas/ServerlessDefaultRule"
          },
          "ruleAction": {
            "$ref": "#/components/schemas/ServerlessRuleAction"
          },
          "unidentifiedServerlessRule": {
            "$ref": "#/components/schemas/UnidentifiedServerlessRule"
          },
          "userRule": {
            "$ref": "#/components/schemas/ServerlessUserRule"
          },
          "violationReasons": {
            "items": {
              "$ref": "#/components/schemas/ServerlessViolationReason"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ServerlessViolationReason": {
        "enum": [
          "RISK",
          "VULNERABILITY",
          "SECRETS",
          "FUNCTION_PERMISSION",
          "DATA_ACCESS",
          "PUBLICLY_ACCESSIBLE",
          "UNUSED_FUNCTION",
          "UNIDENTIFIED"
        ],
        "type": "string"
      },
      "ServerlessVulnerabilitiesWidget": {
        "properties": {
          "bars": {
            "items": {
              "$ref": "#/components/schemas/VulnerabilitiesBar"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ServerlessZip": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isIdentified": {
            "type": "boolean"
          },
          "name": {
            "description": "zip name that was given by the user to the cli",
            "type": "string"
          },
          "sha256": {
            "description": "the zip file's sha256 identifier",
            "type": "string"
          },
          "sourceType": {
            "$ref": "#/components/schemas/ZipSourceType"
          },
          "timeUpdated": {
            "format": "date-time",
            "type": "string"
          },
          "vulnerabilitiesSummary": {
            "$ref": "#/components/schemas/VulnerabilitiesSummary"
          }
        },
        "type": "object"
      },
      "ServiceAccountInfo": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceNameConnectionRulePart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectionRulePart"
          },
          {
            "properties": {
              "clusterId": {
                "format": "uuid",
                "type": "string"
              },
              "environments": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "services": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "SetAccountFeatures": {
        "description": "Features configuration for the Secure Application account",
        "properties": {
          "isDashboardDemo": {
            "default": false,
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Settings": {
        "description": "Configuration for the Secure Application account",
        "properties": {
          "agentSendStatusIntervalInSeconds": {
            "default": 30,
            "example": 300,
            "maximum": 3600,
            "minimum": 1,
            "type": "integer"
          },
          "agentSendTelemetriesIntervalInSeconds": {
            "default": 300,
            "example": 300,
            "maximum": 3600,
            "minimum": 1,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SingleBar": {
        "properties": {
          "count": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SinglePeriodicJobExpression": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PeriodicJobExpression"
          },
          {
            "properties": {
              "operationTime": {
                "format": "date-time",
                "type": "string"
              }
            },
            "required": [
              "operationTime"
            ],
            "type": "object"
          }
        ]
      },
      "SlackEventsForwardingDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventsForwardingDetails"
          },
          {
            "type": "object"
          }
        ]
      },
      "SlackVulnerabilityEventsForwardingDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SlackEventsForwardingDetails"
          },
          {
            "type": "object"
          },
          {
            "properties": {
              "vulnerabilitySeverity": {
                "$ref": "#/components/schemas/VulnerabilitySeverity"
              }
            },
            "required": [
              "vulnerabilitySeverity"
            ],
            "type": "object"
          }
        ]
      },
      "SpecMethod": {
        "properties": {
          "description": {
            "type": "string"
          },
          "diffs": {
            "$ref": "#/components/schemas/SpecScoreDiffsLists"
          },
          "findings": {
            "$ref": "#/components/schemas/SpecScoreFindings"
          },
          "method": {
            "$ref": "#/components/schemas/HttpMethod"
          },
          "path": {
            "type": "string"
          },
          "severity": {
            "$ref": "#/components/schemas/ApiSecurityRiskSeverity"
          },
          "tag": {
            "type": "string"
          },
          "vulnerabilitiesSummary": {
            "$ref": "#/components/schemas/VulnerabilitiesSummary"
          }
        },
        "type": "object"
      },
      "SpecScoreDiff": {
        "properties": {
          "detected": {
            "type": "string"
          },
          "documented": {
            "type": "string"
          },
          "lastSeen": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SpecScoreDiffsLists": {
        "properties": {
          "diffs": {
            "items": {
              "$ref": "#/components/schemas/SpecScoreDiff"
            },
            "type": "array"
          },
          "shadows": {
            "items": {
              "$ref": "#/components/schemas/SpecScoreDiff"
            },
            "type": "array"
          },
          "zombies": {
            "items": {
              "$ref": "#/components/schemas/SpecScoreDiff"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SpecScoreElementFinding": {
        "properties": {
          "additional_info": {
            "items": {
              "$ref": "#/components/schemas/AdditionalInfo"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "mitigation": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "occurrences": {
            "type": "integer"
          },
          "source": {
            "type": "string"
          },
          "specPath": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SpecScoreFindings": {
        "properties": {
          "critical": {
            "$ref": "#/components/schemas/SpecScoreFindingsList"
          },
          "high": {
            "$ref": "#/components/schemas/SpecScoreFindingsList"
          },
          "low": {
            "$ref": "#/components/schemas/SpecScoreFindingsList"
          },
          "medium": {
            "$ref": "#/components/schemas/SpecScoreFindingsList"
          },
          "unclassified": {
            "$ref": "#/components/schemas/SpecScoreFindingsList"
          }
        },
        "type": "object"
      },
      "SpecScoreFindingsList": {
        "properties": {
          "count": {
            "type": "integer"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/SpecScoreElementFinding"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SpecsAndOperationsDiffsWidget": {
        "properties": {
          "operationsDiffs": {
            "$ref": "#/components/schemas/OperationsDiffsDonutPieChart"
          },
          "specs": {
            "$ref": "#/components/schemas/SpecsDonutPieChart"
          }
        },
        "type": "object"
      },
      "SpecsDonutPieChart": {
        "properties": {
          "apisWithSpecs": {
            "type": "integer"
          },
          "apisWithoutSpecs": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SplunkEventsForwardingDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventsForwardingDetails"
          },
          {
            "type": "object"
          },
          {
            "properties": {
              "isCloud": {
                "default": false,
                "type": "boolean"
              },
              "port": {
                "default": 8088,
                "type": "integer"
              },
              "sourceName": {
                "default": "Secure Application management",
                "type": "string"
              },
              "token": {
                "type": "string"
              }
            },
            "required": [
              "sourceName",
              "token"
            ],
            "type": "object"
          }
        ]
      },
      "StandardRegistryCredentials": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RegistryCredentials"
          },
          {
            "properties": {
              "password": {
                "type": "string"
              },
              "username": {
                "type": "string"
              }
            },
            "required": [
              "username"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "StateInfo": {
        "properties": {
          "state": {
            "items": {
              "$ref": "#/components/schemas/EditUser"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "StatsSection": {
        "properties": {
          "agents": {
            "type": "integer"
          },
          "cores": {
            "type": "integer"
          },
          "hosts": {
            "type": "integer"
          },
          "pods": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SumoLogicEventsForwardingDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventsForwardingDetails"
          },
          {
            "type": "object"
          }
        ]
      },
      "SumoLogicVulnerabilityEventsForwardingDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SumoLogicEventsForwardingDetails"
          },
          {
            "type": "object"
          },
          {
            "properties": {
              "vulnerabilitySeverity": {
                "$ref": "#/components/schemas/VulnerabilitySeverity"
              }
            },
            "required": [
              "vulnerabilitySeverity"
            ],
            "type": "object"
          }
        ]
      },
      "SystemDefaultOwnerType": {
        "enum": [
          "SYSTEM",
          "USER",
          "HYBRID"
        ],
        "type": "string"
      },
      "Tag": {
        "description": "Tag",
        "properties": {
          "key": {
            "maxLength": 128,
            "type": "string"
          },
          "value": {
            "maxLength": 256,
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "TcpPerformanceMetrics": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PerformanceMetrics"
          }
        ]
      },
      "TelemetryAppEnvInfo": {
        "properties": {
          "app": {
            "$ref": "#/components/schemas/AppProcessInfo"
          },
          "cluster": {
            "properties": {
              "id": {
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "environment": {
            "properties": {
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "expansion": {
            "$ref": "#/components/schemas/ExpansionTelemetryInfo"
          },
          "instance": {
            "properties": {
              "agentId": {
                "type": "string"
              },
              "cloudAccountId": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "region": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "namespace": {
            "properties": {
              "id": {
                "format": "uuid",
                "type": "string"
              },
              "labels": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "network": {
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "pod": {
            "$ref": "#/components/schemas/PodTelemetryInfo"
          },
          "securecnId": {
            "format": "uuid",
            "type": "string"
          },
          "workloadType": {
            "$ref": "#/components/schemas/WorkloadType"
          }
        },
        "type": "object"
      },
      "TelemetryAvailabilityState": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/TelemetryStateStatus"
          },
          "statusReason": {
            "description": "will be populate only when status is unhealthy",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TelemetryState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TelemetryAvailabilityState"
          },
          {
            "properties": {
              "lastSeen": {
                "format": "date-time",
                "type": "string"
              },
              "startTime": {
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "description": "Status of a telemetry entry"
      },
      "TelemetryStateStatus": {
        "enum": [
          "INACTIVE",
          "UNHEALTHY",
          "ACTIVE"
        ],
        "type": "string"
      },
      "TelemetryThresholds": {
        "properties": {
          "connectionTelemetriesThreshold": {
            "description": "defines how many max connections telemetries to send to the management in each bulk",
            "type": "integer"
          },
          "deployerPolicyThreshold": {
            "description": "defines how many max deployer policy to send to the management in each bulk",
            "type": "integer"
          },
          "k8sTelemetriesThreshold": {
            "description": "defines how many max k8s telemetries to send to the management in each bulk",
            "type": "integer"
          },
          "podTelemetriesThreshold": {
            "description": "defines how many max pods telemetries to send to the management in each bulk",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TestInputDepthEnum": {
        "description": "An enumeration for input depth parameter.",
        "enum": [
          "QUICK",
          "DEFAULT",
          "DEEP"
        ],
        "title": "TestInputDepth",
        "type": "string"
      },
      "TestOpsgenieConnectionRequest": {
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "TestSecureXIntegrationRequest": {
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "TestSlackIntegrationRequest": {
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "TestSplunkConnectionRequest": {
        "properties": {
          "isCloud": {
            "default": false,
            "type": "boolean"
          },
          "port": {
            "default": 8088,
            "type": "integer"
          },
          "token": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "token"
        ],
        "type": "object"
      },
      "TestSumoLogicIntegrationRequest": {
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "TestWebexIntegrationRequest": {
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "TimeBasedWidget": {
        "properties": {
          "info": {
            "$ref": "#/components/schemas/TimeBasedWidgetInfo",
            "description": "general info for the telemetries widget",
            "readOnly": true
          },
          "allowedGraphs": {
            "$ref": "#/components/schemas/DashboardTimeBasedGraphs",
            "description": "all the graphs (all time periods) of the allowed telemetries",
            "readOnly": true
          },
          "blockedGraphs": {
            "$ref": "#/components/schemas/DashboardTimeBasedGraphs",
            "description": "all the graphs (all time periods) of the blocked telemetries",
            "readOnly": true
          },
          "detectedGraphs": {
            "$ref": "#/components/schemas/DashboardTimeBasedGraphs",
            "description": "all the graphs (all time periods) of the detected telemetries",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "TimeBasedWidgetInfo": {
        "properties": {
          "hasRules": {
            "readOnly": true,
            "type": "boolean"
          },
          "numOfRecommendedRules": {
            "minimum": 0,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TimeOfDay": {
        "properties": {
          "hour": {
            "default": 0,
            "maximum": 23,
            "minimum": 0,
            "type": "integer"
          },
          "minute": {
            "default": 0,
            "maximum": 59,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Token": {
        "properties": {
          "apis": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "attributeName": {
            "type": "string"
          },
          "attributeType": {
            "enum": [
              "REQUEST_HEADER",
              "QUERY_PARAM"
            ],
            "type": "string"
          },
          "expirationDate": {
            "format": "date-time",
            "type": "string"
          },
          "httpPath": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "vaultSecretPath": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "vaultSecretPath"
        ],
        "type": "object"
      },
      "TokenDeleteDependencies": {
        "properties": {
          "deploymentRules": {
            "items": {
              "$ref": "#/components/schemas/deleteDependencyElement"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TokenDetails": {
        "properties": {
          "envVariable": {
            "type": "string"
          },
          "tokenId": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "tokenId",
          "envVariable"
        ],
        "type": "object"
      },
      "TokenInjectionInfo": {
        "properties": {
          "envVariable": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "isRuleDeleted": {
            "type": "boolean"
          },
          "isTokenDeleted": {
            "type": "boolean"
          },
          "ruleId": {
            "format": "uuid",
            "type": "string"
          },
          "ruleName": {
            "type": "string"
          },
          "tokenId": {
            "format": "uuid",
            "type": "string"
          },
          "tokenName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TokenInjectionStatus": {
        "enum": [
          "NO_INJECTION",
          "SUCCESS",
          "ERROR"
        ],
        "type": "string"
      },
      "TopRiskyApi": {
        "properties": {
          "name": {
            "type": "string"
          },
          "risk": {
            "$ref": "#/components/schemas/ApiSecurityRisk"
          }
        },
        "type": "object"
      },
      "TopRiskyApisWidget": {
        "properties": {
          "topRiskyApis": {
            "items": {
              "$ref": "#/components/schemas/TopRiskyApi"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TopRiskyServerlessFunction": {
        "properties": {
          "name": {
            "type": "string"
          },
          "risk": {
            "$ref": "#/components/schemas/ServerlessFunctionRiskLevel"
          }
        },
        "type": "object"
      },
      "TopRiskyServerlessFunctionsWidget": {
        "properties": {
          "topRiskyServerlessFunctions": {
            "items": {
              "$ref": "#/components/schemas/TopRiskyServerlessFunction"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TopRiskyWorkload": {
        "properties": {
          "name": {
            "type": "string"
          },
          "risk": {
            "$ref": "#/components/schemas/WorkloadRiskLevel"
          },
          "score": {
            "format": "double",
            "maximum": 10,
            "minimum": 0,
            "multipleOf": 0.1,
            "type": "number"
          }
        },
        "type": "object"
      },
      "TopRiskyWorkloadsWidget": {
        "properties": {
          "topRiskyWorkloads": {
            "items": {
              "$ref": "#/components/schemas/TopRiskyWorkload"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TopSecurityRisksWidget": {
        "properties": {
          "topRiskyApisWidget": {
            "$ref": "#/components/schemas/TopRiskyApisWidget"
          },
          "topRiskyServerlessFunctionsWidget": {
            "$ref": "#/components/schemas/TopRiskyServerlessFunctionsWidget"
          },
          "topRiskyWorkloadsWidget": {
            "$ref": "#/components/schemas/TopRiskyWorkloadsWidget"
          }
        },
        "type": "object"
      },
      "TotalReceivedBytesGraph": {
        "description": "Return a list of total received bytes per connection",
        "items": {
          "$ref": "#/components/schemas/PerformanceMetricsGraphPoint"
        },
        "type": "array"
      },
      "TotalSentBytesGraph": {
        "description": "Return a list of total sent bytes per connection",
        "items": {
          "$ref": "#/components/schemas/PerformanceMetricsGraphPoint"
        },
        "type": "array"
      },
      "TraceAnalysisConfiguration": {
        "properties": {
          "duration": {
            "type": "integer"
          },
          "timeUnit": {
            "enum": [
              "MINUTES",
              "HOURS",
              "DAYS"
            ],
            "type": "string"
          }
        },
        "required": [
          "duration",
          "timeUnit"
        ],
        "type": "object"
      },
      "TraceAnalysisDetails": {
        "properties": {
          "endTime": {
            "format": "date-time",
            "type": "string"
          },
          "findings": {
            "items": {
              "$ref": "#/components/schemas/TraceAnalysisFinding"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/TraceAnalysisStatus"
          }
        },
        "type": "object"
      },
      "TraceAnalysisFinding": {
        "properties": {
          "additionalInfo": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "risk": {
            "$ref": "#/components/schemas/ApiSecurityRiskSeverity"
          },
          "specLocation": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TraceAnalysisStatus": {
        "enum": [
          "IN_PROGRESS",
          "READY"
        ],
        "type": "string"
      },
      "TrialUser": {
        "properties": {
          "company": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "howDidYouHearAboutUs": {
            "enum": [
              "COLLEAGUES_RECOMMENDATION",
              "KUBECON_CONFERENCE",
              "PAST_CLIENT",
              "ADVERTISING",
              "SEARCH_ENGINE",
              "BLOG"
            ],
            "type": "string"
          },
          "jobTitle": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "privacyPolicyAndTermsAndConditionsAgreement": {
            "type": "boolean"
          }
        },
        "required": [
          "email",
          "firstName",
          "lastName",
          "privacyPolicyAndTermsAndConditionsAgreement"
        ],
        "type": "object"
      },
      "TruncationStatus": {
        "properties": {
          "isTruncationEnabled": {
            "description": "is truncation enabled.",
            "type": "boolean"
          },
          "truncateTimeInDays": {
            "description": "truncation interval, in days.",
            "type": "integer"
          }
        },
        "required": [
          "truncateTimeInDays",
          "isTruncationEnabled"
        ],
        "type": "object"
      },
      "TrustedSigner": {
        "description": "Trusted signers profile",
        "properties": {
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "keys": {
            "items": {
              "$ref": "#/components/schemas/TrustedSignerKey"
            },
            "minItems": 1,
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "trustedSignerCloudAccounts": {
            "items": {
              "$ref": "#/components/schemas/TrustedSignerCloudAccount"
            },
            "minItems": 1,
            "type": "array"
          },
          "trustedSignerClusters": {
            "items": {
              "$ref": "#/components/schemas/TrustedSignerCluster"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "TrustedSignerCloudAccount": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/TrustedSignerClusterStatus",
            "readOnly": true
          },
          "validation": {
            "$ref": "#/components/schemas/TrustedSignerClusterValidation",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "TrustedSignerCluster": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/TrustedSignerClusterStatus",
            "readOnly": true
          },
          "validation": {
            "$ref": "#/components/schemas/TrustedSignerClusterValidation",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "TrustedSignerClusterStatus": {
        "enum": [
          "VALID",
          "WARNING"
        ],
        "type": "string"
      },
      "TrustedSignerClusterValidation": {
        "enum": [
          "SIGNATURE",
          "HASH",
          "NONE"
        ],
        "type": "string"
      },
      "TrustedSignerKey": {
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "key"
        ],
        "type": "object"
      },
      "UnidentifiedPodsRule": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/UnidentifiedPodsRuleAction"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "action"
        ],
        "type": "object"
      },
      "UnidentifiedPodsRuleAction": {
        "enum": [
          "DETECT",
          "BLOCK"
        ],
        "type": "string"
      },
      "UnidentifiedServerlessRule": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/UnidentifiedServerlessRuleAction"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "action"
        ],
        "type": "object"
      },
      "UnidentifiedServerlessRuleAction": {
        "enum": [
          "DETECT",
          "BLOCK"
        ],
        "type": "string"
      },
      "UnprotectedPodReason": {
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "enum": [
              "NAMESPACE_UNPROTECTED",
              "MISSING_SIDECARS",
              "HOST_NETWORK",
              "ISTIO_INJECT_FALSE_ANNOTATION",
              "ISTIO_INJECT_FALSE_LABEL",
              "PORTSHIFT_INJECT_FALSE_ANNOTATION",
              "PORTSHIFT_INJECT_FALSE_LABEL"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UrlSchemeEnum": {
        "description": "An enumeration.",
        "enum": [
          "HTTP",
          "HTTPS"
        ],
        "title": "UrlSchemeEnum",
        "type": "string"
      },
      "UsageAndPricing": {
        "properties": {
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "podsUsageGraph": {
            "items": {
              "$ref": "#/components/schemas/GraphNumberPoint"
            },
            "type": "array"
          },
          "pricingDetails": {
            "$ref": "#/components/schemas/PricingDetails",
            "type": "object"
          },
          "vcpusUsageGraph": {
            "items": {
              "$ref": "#/components/schemas/GraphNumberPoint"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UsageAndPricingPeriod": {
        "properties": {
          "timePeriod": {
            "$ref": "#/components/schemas/UsageAndPricingPeriodEnum",
            "type": "string"
          },
          "usageAndPricing": {
            "items": {
              "$ref": "#/components/schemas/UsageAndPricing"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UsageAndPricingPeriodEnum": {
        "enum": [
          "YEAR",
          "MONTHS",
          "LAST_DAY"
        ],
        "type": "string"
      },
      "UsageAndPricingSection": {
        "properties": {
          "periods": {
            "items": {
              "$ref": "#/components/schemas/UsageAndPricingPeriod"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UsageStatus": {
        "description": "Account resource usage status",
        "properties": {
          "currentClustersUsage": {
            "type": "integer"
          },
          "currentNodesUsage": {
            "type": "integer"
          },
          "maxClusters": {
            "type": "integer"
          },
          "maxNodes": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "User": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EditUser"
          },
          {
            "properties": {
              "email": {
                "description": "The email of the user.",
                "type": "string"
              },
              "shouldDisplayEula": {
                "readOnly": true,
                "type": "boolean"
              },
              "shouldDisplayProductTour": {
                "readOnly": true,
                "type": "boolean"
              }
            },
            "required": [
              "role"
            ],
            "type": "object"
          }
        ]
      },
      "UserDisplay": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EditUser"
          },
          {
            "properties": {
              "email": {
                "description": "The email of the user.",
                "type": "string"
              },
              "normalizedRole": {
                "description": "The role of the user",
                "type": "string"
              }
            },
            "required": [
              "role"
            ],
            "type": "object"
          }
        ]
      },
      "UserIdGroupPair": {
        "properties": {
          "description": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "peeringStatus": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "vpcId": {
            "type": "string"
          },
          "vpcPeeringConnectionId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserInteraction": {
        "enum": [
          "NONE",
          "REQUIRED"
        ],
        "type": "string"
      },
      "UserLoginInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/User"
          },
          {
            "properties": {
              "accountTier": {
                "$ref": "#/components/schemas/AccountTier",
                "readOnly": true
              },
              "apiSecurity": {
                "$ref": "#/components/schemas/ApiSecurity",
                "readOnly": true
              },
              "permissionsMode": {
                "$ref": "#/components/schemas/PermissionsMode",
                "readOnly": true
              },
              "pricingUnitType": {
                "$ref": "#/components/schemas/pricingUnitType",
                "readOnly": true
              },
              "serverlessSecurity": {
                "$ref": "#/components/schemas/ServerlessSecurity",
                "readOnly": true
              },
              "usageStatus": {
                "$ref": "#/components/schemas/UsageStatus",
                "readOnly": true
              }
            },
            "required": [
              "permissionsMode",
              "accountTier",
              "pricingUnitType",
              "apiSecurity",
              "serverlessSecurity"
            ],
            "type": "object"
          }
        ]
      },
      "UserRule": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/AppRuleAction"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UuidList": {
        "properties": {
          "uuidList": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "VPC": {
        "description": "Describes an AWS VPC.",
        "properties": {
          "awsAccountId": {
            "type": "string"
          },
          "awsAccountName": {
            "readOnly": true,
            "type": "string"
          },
          "regionId": {
            "type": "string"
          },
          "vpcId": {
            "$ref": "#/components/schemas/vpcId"
          }
        },
        "required": [
          "vpcId",
          "regionId",
          "awsAccountId"
        ],
        "type": "object"
      },
      "VPCDescription": {
        "allOf": [
          {
            "properties": {
              "name": {
                "description": "The \"Name\" tag of the VPC.\n",
                "type": "string"
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/VPC"
          }
        ],
        "description": "Like VPC but also includes the name"
      },
      "ViolationInfo": {
        "description": "If the the App is running on an environment on which it is not allowed to run, this object contains the rule it violated.",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/AppRuleAction"
          },
          "comment": {
            "type": "string"
          },
          "defaultRule": {
            "$ref": "#/components/schemas/DefaultRule"
          },
          "lastViolation": {
            "format": "date-time",
            "type": "string"
          },
          "mutateRule": {
            "$ref": "#/components/schemas/UserRule"
          },
          "pspViolationReasons": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "unidentifiedPodReasons": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "unidentifiedPodsRule": {
            "$ref": "#/components/schemas/UnidentifiedPodsRule"
          },
          "userRule": {
            "$ref": "#/components/schemas/UserRule"
          },
          "violationReasons": {
            "items": {
              "$ref": "#/components/schemas/ViolationReason"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ViolationReason": {
        "enum": [
          "VULNERABILITY",
          "PSP",
          "API",
          "SIDECAR"
        ],
        "type": "string"
      },
      "ViolationRuleType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AppRuleType"
          },
          {
            "properties": {
              "action": {
                "$ref": "#/components/schemas/AppRuleAction"
              }
            },
            "required": [
              "action"
            ],
            "type": "object"
          }
        ]
      },
      "ViolationsGridLinePanelHostsInfo": {
        "properties": {
          "instanceId": {
            "type": "string"
          },
          "instanceType": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "vpc": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ViolationsGridLinePanelRulesInfo": {
        "properties": {
          "portRange": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "ranges": {
            "items": {
              "$ref": "#/components/schemas/RuleRange"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ViolationsGridLinePanelSecurityGroupInfo": {
        "properties": {
          "hostsInfo": {
            "items": {
              "$ref": "#/components/schemas/ViolationsGridLinePanelHostsInfo"
            },
            "type": "array"
          },
          "inboundRulesInfo": {
            "items": {
              "$ref": "#/components/schemas/ViolationsGridLinePanelRulesInfo"
            },
            "type": "array"
          },
          "outboundRulesInfo": {
            "items": {
              "$ref": "#/components/schemas/ViolationsGridLinePanelRulesInfo"
            },
            "type": "array"
          },
          "showInboundFirst": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ViolationsMapEdge": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "sourceNode": {
            "format": "uuid",
            "type": "string"
          },
          "targetNode": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ViolationsMapNode": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ViolationsMapNodeEntity",
            "description": "the AWS entity"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ViolationsMapNodeEntity": {
        "description": "the interface that represents the node's entity type. Possible types are: PortshiftAwsInstance, PortshiftAwsSecurityGroupViolationInfo, PortshiftAwsSubnet",
        "discriminator": {
          "propertyName": "violationsMapNodeType"
        },
        "properties": {
          "violationsMapNodeType": {
            "$ref": "#/components/schemas/ViolationsMapNodeType"
          }
        },
        "required": [
          "violationsMapNodeType"
        ],
        "type": "object"
      },
      "ViolationsMapNodeType": {
        "enum": [
          "SECURITY_GROUP",
          "SUBNET",
          "INSTANCE"
        ],
        "type": "string"
      },
      "VulnerabilitiesBar": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SingleBar"
          }
        ],
        "properties": {
          "severity": {
            "$ref": "#/components/schemas/VulnerabilitySeverity"
          }
        },
        "type": "object"
      },
      "VulnerabilitiesSummary": {
        "description": "Vulnerabilities summary by severity",
        "properties": {
          "critical": {
            "minimum": 0,
            "type": "integer"
          },
          "high": {
            "minimum": 0,
            "type": "integer"
          },
          "low": {
            "minimum": 0,
            "type": "integer"
          },
          "medium": {
            "minimum": 0,
            "type": "integer"
          },
          "total": {
            "minimum": 0,
            "type": "integer"
          },
          "unknown": {
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "VulnerabilitiesWidget": {
        "properties": {
          "ServerlessVulnerabilitiesWidget": {
            "$ref": "#/components/schemas/ServerlessVulnerabilitiesWidget"
          },
          "WorkloadVulnerabilitiesWidget": {
            "$ref": "#/components/schemas/WorkloadVulnerabilitiesWidget"
          }
        },
        "type": "object"
      },
      "Vulnerability": {
        "properties": {
          "cvss": {
            "$ref": "#/components/schemas/Cvss"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "layerName": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "severity": {
            "$ref": "#/components/schemas/VulnerabilitySeverity"
          },
          "snoozedUntil": {
            "format": "date-time",
            "type": "string"
          },
          "vulnerabilitySources": {
            "$ref": "#/components/schemas/VulnerabilitySources"
          }
        },
        "type": "object"
      },
      "VulnerabilityCiPolicy": {
        "properties": {
          "enforcementOption": {
            "$ref": "#/components/schemas/EnforcementOption",
            "description": "The action that should be taken on the pipeline"
          },
          "permissibleVulnerabilityLevel": {
            "$ref": "#/components/schemas/VulnerabilitySeverity",
            "description": "The permissible vulnerability level in the pipeline"
          }
        },
        "required": [
          "permissibleVulnerabilityLevel",
          "enforcementOption"
        ],
        "type": "object"
      },
      "VulnerabilityFixAvailability": {
        "default": "NO_FIX",
        "enum": [
          "NO_FIX",
          "PARTIAL_FIX",
          "FIX_AVILABLE"
        ],
        "type": "string"
      },
      "VulnerabilitySeverity": {
        "enum": [
          "UNKNOWN",
          "LOW",
          "MEDIUM",
          "HIGH",
          "CRITICAL"
        ],
        "type": "string"
      },
      "VulnerabilitySource": {
        "properties": {
          "fixVersion": {
            "type": "string"
          },
          "packageName": {
            "type": "string"
          },
          "packageVersion": {
            "type": "string"
          }
        },
        "required": [
          "packageName",
          "packageVersion"
        ],
        "type": "object"
      },
      "VulnerabilitySources": {
        "properties": {
          "fixAvailability": {
            "$ref": "#/components/schemas/VulnerabilityFixAvailability"
          },
          "sources": {
            "items": {
              "$ref": "#/components/schemas/VulnerabilitySource"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "VulnerabilityValidation": {
        "description": "When the rule action is ALLOW, onViolationAction is mandatory",
        "properties": {
          "highestVulnerabilityAllowed": {
            "$ref": "#/components/schemas/VulnerabilitySeverity"
          },
          "onViolationAction": {
            "$ref": "#/components/schemas/OnViolationAction"
          }
        },
        "required": [
          "highestVulnerabilityAllowed",
          "onViolationAction"
        ],
        "type": "object"
      },
      "WebexEventsForwardingDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventsForwardingDetails"
          },
          {
            "type": "object"
          }
        ]
      },
      "WebexVulnerabilityEventsForwardingDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebexEventsForwardingDetails"
          },
          {
            "type": "object"
          },
          {
            "properties": {
              "vulnerabilitySeverity": {
                "$ref": "#/components/schemas/VulnerabilitySeverity"
              }
            },
            "required": [
              "vulnerabilitySeverity"
            ],
            "type": "object"
          }
        ]
      },
      "WeeklyPeriodicJobExpression": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PeriodicJobExpression"
          },
          {
            "properties": {
              "dayInWeek": {
                "default": 1,
                "description": "1 - 7 which represents sun- sat",
                "maximum": 7,
                "minimum": 1,
                "type": "integer"
              },
              "timeOfDay": {
                "$ref": "#/components/schemas/TimeOfDay"
              }
            },
            "type": "object"
          }
        ]
      },
      "WorkloadAddress": {
        "properties": {
          "address": {
            "pattern": "^.*:()([1-9]|[1-5]?[0-9]{2,4}|6[1-4][0-9]{3}|65[1-4][0-9]{2}|655[1-2][0-9]|6553[1-5])$",
            "type": "string"
          },
          "networkProtocol": {
            "$ref": "#/components/schemas/NetworkProtocol"
          }
        },
        "required": [
          "address"
        ],
        "type": "object"
      },
      "WorkloadIgnoredRisk": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IgnoredRisk"
          },
          {
            "properties": {
              "clusterId": {
                "format": "uuid",
                "type": "string"
              },
              "clusterName": {
                "type": "string"
              },
              "currentWorkloadId": {
                "format": "uuid",
                "type": "string"
              },
              "namespaceId": {
                "format": "uuid",
                "type": "string"
              },
              "namespaceName": {
                "type": "string"
              },
              "workloadNames": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "workloadNames"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "WorkloadRisk": {
        "properties": {
          "level": {
            "$ref": "#/components/schemas/WorkloadRiskLevel"
          },
          "reasons": {
            "items": {
              "$ref": "#/components/schemas/WorkloadRiskReason"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "WorkloadRiskLevel": {
        "enum": [
          "LOW",
          "MEDIUM",
          "HIGH",
          "CRITICAL"
        ],
        "type": "string"
      },
      "WorkloadRiskReason": {
        "properties": {
          "isIgnored": {
            "type": "boolean"
          },
          "level": {
            "$ref": "#/components/schemas/WorkloadRiskLevel"
          },
          "text": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/WorkloadRiskReasonType"
          }
        },
        "type": "object"
      },
      "WorkloadRiskReasonType": {
        "enum": [
          "K8S_DASHBOARD",
          "VULNERABILITY",
          "RISKY_ROLE",
          "PRIVILEGED",
          "RUN_AS_ROOT",
          "ALLOWED_HOST_PATH",
          "ALLOWED_RISKY_CAPABILITIES",
          "PUBLIC_FACING",
          "UNIDENTIFIED",
          "RUNNING_SSH_SERVER",
          "HOST_NETWORK",
          "HOST_PID",
          "HOST_IPC",
          "ALLOW_PRIVILEGE_ESCALATION",
          "TEMPLATE_DIFF",
          "DOCKERFILE_SCAN",
          "API"
        ],
        "type": "string"
      },
      "WorkloadRuleScopeType": {
        "description": "identify the scope type. Only one of the below should be not null, and  used.",
        "discriminator": {
          "propertyName": "workloadRuleScopeType"
        },
        "properties": {
          "workloadRuleScopeType": {
            "$ref": "#/components/schemas/WorkloadRuleScopeTypeEnum"
          }
        },
        "required": [
          "workloadRuleScopeType"
        ],
        "type": "object"
      },
      "WorkloadRuleScopeTypeEnum": {
        "enum": [
          "AnyRuleType",
          "ClusterNameRuleType",
          "EnvironmentNameRuleType"
        ],
        "type": "string"
      },
      "WorkloadRuleType": {
        "description": "identify the workload type. Only one of the below should be not null, and  used.",
        "discriminator": {
          "propertyName": "workloadRuleType"
        },
        "properties": {
          "workloadRuleType": {
            "enum": [
              "AppNameWorkloadRuleType",
              "AppTypeWorkloadRuleType",
              "AppLabelWorkloadRuleType",
              "AppAnyWorkloadRuleType",
              "PodNameWorkloadRuleType",
              "PodLabelWorkloadRuleType",
              "PodAnyWorkloadRuleType"
            ],
            "type": "string"
          }
        },
        "required": [
          "workloadRuleType"
        ],
        "type": "object"
      },
      "WorkloadType": {
        "enum": [
          "POD",
          "SYSTEM_POD",
          "APP",
          "EXPANSION",
          "EXTERNAL"
        ],
        "type": "string"
      },
      "WorkloadVulnerabilitiesWidget": {
        "properties": {
          "bars": {
            "items": {
              "$ref": "#/components/schemas/VulnerabilitiesBar"
            },
            "type": "array"
          },
          "totalVulnerableImages": {
            "type": "integer"
          },
          "totalVulnerablePods": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ZipSourceType": {
        "enum": [
          "RUNTIME",
          "CI_PLUGIN"
        ],
        "type": "string"
      },
      "apiSecSourceFilter": {
        "enum": [
          "INTERNAL",
          "EXTERNAL"
        ],
        "type": "string"
      },
      "deleteDependencyElement": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "deleteDependencyEnvironmentRuleElement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/deleteDependencyElement"
          },
          {
            "properties": {
              "relatedEnvironments": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "eventsToForward": {
        "enum": [
          "NOTIFICATION",
          "ADMINISTRATIVE",
          "ALERT",
          "VULNERABILITY"
        ],
        "type": "string"
      },
      "imagePackageDetails": {
        "properties": {
          "licenses": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "imageSortKey": {
        "enum": [
          "IMAGE_NAME",
          "TIME",
          "RISK"
        ],
        "type": "string"
      },
      "installationSource": {
        "default": "SCRIPT",
        "enum": [
          "SCRIPT",
          "HELM"
        ],
        "type": "string"
      },
      "internalRegistryParameters": {
        "description": "internal registry information",
        "properties": {
          "internalRegistry": {
            "description": "when internal registry enabled, specify the registry URL",
            "type": "string"
          },
          "internalRegistryEnabled": {
            "default": false,
            "description": "indicates whether internal registry is enabled",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "kubernetesAuditLogsWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TimeBasedWidget"
          }
        ],
        "properties": {
          "riskyGraphs": {
            "$ref": "#/components/schemas/DashboardTimeBasedGraphs",
            "description": "all the graphs (all time periods) of risky cluster api events",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "pricingUnitType": {
        "enum": [
          "POD",
          "VCPUS"
        ],
        "type": "string"
      },
      "registrySection": {
        "properties": {
          "isIdentified": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "sidecarsResource": {
        "properties": {
          "proxyInitLimitsCpu": {
            "pattern": "^\\d+(\\.\\d+)?m$",
            "type": "string"
          },
          "proxyInitLimitsMemory": {
            "pattern": "^\\d+(\\.\\d+)?(E|P|T|G|M|K)i?$",
            "type": "string"
          },
          "proxyInitRequestsCpu": {
            "pattern": "^\\d+(\\.\\d+)?m$",
            "type": "string"
          },
          "proxyInitRequestsMemory": {
            "pattern": "^\\d+(\\.\\d+)?(E|P|T|G|M|K)i?$",
            "type": "string"
          },
          "proxyLimitsCpu": {
            "pattern": "^\\d+(\\.\\d+)?m$",
            "type": "string"
          },
          "proxyLimitsMemory": {
            "pattern": "^\\d+(\\.\\d+)?(E|P|T|G|M|K)i?$",
            "type": "string"
          },
          "proxyRequestCpu": {
            "pattern": "^\\d+(\\.\\d+)?m$",
            "type": "string"
          },
          "proxyRequestMemory": {
            "pattern": "^\\d+(\\.\\d+)?(E|P|T|G|M|K)i?$",
            "type": "string"
          }
        },
        "type": "object"
      },
      "virtualNetwork": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "vpcId": {
        "description": "AWS VPC ID",
        "type": "string"
      },
      "vpcResponse": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/vpcId"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "tags": [
    {
      "description": "APIs used for login and password management",
      "name": "users"
    },
    {
      "description": "APIs to get dashboard statistics",
      "name": "dashboard"
    },
    {
      "description": "APIs used to define environments",
      "name": "envs"
    },
    {
      "description": "APIs used to query for telemetries",
      "name": "telemetries"
    },
    {
      "description": "APIs used to  query for network map",
      "name": "runtime map"
    },
    {
      "description": "APIs used to  define and manage environment policies",
      "name": "environment policies"
    },
    {
      "description": "APIs used to  define and manage connection policies",
      "name": "connection policies"
    },
    {
      "description": "APIs used to  define and manage cluster events policies",
      "name": "cluster events policies"
    },
    {
      "description": "APIs used to  define and manage api security policies",
      "name": "API security policies"
    },
    {
      "description": "APIs used to query for CD pipelines results",
      "name": "CD"
    },
    {
      "description": "APIs used to  define and manage CI/CD policies",
      "name": "CI/CD policies"
    },
    {
      "description": "APIs used to  define and manage registries",
      "name": "registries"
    },
    {
      "description": "APIs used to  define and manage trusted signers",
      "name": "trusted signers"
    },
    {
      "description": "APIs use to  interact with  agents",
      "name": "agent management"
    },
    {
      "description": "APIs used to manage Kubernetes clusters on Secure Application",
      "name": "kubernetes"
    },
    {
      "description": "APIs used to manage cloud accounts on Secure Application",
      "name": "cloud accounts"
    },
    {
      "description": "APIs used to manage risk assessment on Kubernetes clusters",
      "name": "risk assessment"
    },
    {
      "description": "APIs used to manage Api Security",
      "name": "api security"
    },
    {
      "description": "APIs used to manage pod security standards profiles on Secure Application",
      "name": "psp profiles"
    },
    {
      "description": "APIs used to manage expansions on Secure Application",
      "name": "expansions"
    },
    {
      "description": "APIs used to manage deployers on Secure Application",
      "name": "deployers"
    },
    {
      "description": "APIs used to define and manage  image hashes",
      "name": "image hash"
    },
    {
      "description": "APIs used to retrieve  audit logs",
      "name": "audit logs"
    },
    {
      "description": "APIs used to get policy recommendations",
      "name": "advisor"
    },
    {
      "description": "APIs to delete workloads",
      "name": "truncation"
    },
    {
      "description": "APIs used to define apps",
      "name": "apps"
    },
    {
      "description": "APIs used to change  credentials or return details about the  user's AWS environment",
      "name": "aws"
    },
    {
      "description": "APIs used  to configure system settings",
      "name": "settings"
    },
    {
      "description": "APIs to get the Secure Application CLI",
      "name": "cli"
    },
    {
      "description": "APIs to get the Secure Application API specification file",
      "name": "api"
    },
    {
      "description": "APIs to get the kubernetes cis benchmark data",
      "name": "k8s cis benchmark"
    }
  ],
  "externalDocs": {
    "description": "Product Documentation",
    "url": "https://panoptica.readme.io/reference"
  }
}
